{"ast":null,"code":"\"use strict\";\n\nvar _storeJs = _interopRequireDefault(require(\"store-js\"));\n\nvar _polaris = require(\"@shopify/polaris\");\n\nvar _bodyParser = require(\"body-parser\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst getPearsonCorrelation = require('./calc_correlation');\n\nconst linear_regression = require('./linear_regression');\n\nconst fetch_from_map = (select, tabs, maps, product_id_title_map, dropdown_select, product_id_price_map, fx_map) => {\n  try {\n    if (select !== 0) {\n      // fetch data for graphs\n      const selected_currency = tabs[select]['id'];\n      console.log(\"selected currency is \", selected_currency);\n      console.log(\"dropdown_select is \", dropdown_select);\n      const selected_data_all_products = maps.get(selected_currency);\n      const selected_data = selected_data_all_products.get(dropdown_select);\n      const product_price = product_id_price_map.get(dropdown_select);\n      const today_fx = fx_map.get(selected_currency);\n      console.log(\"product_price is \", product_price);\n      var product_price_list = selected_data[2].map(function (element) {\n        return element * product_price;\n      });\n      const [regression_fx, regression_sales, regression_predicted_sales, slope] = linear_regression(selected_data[1], product_price_list);\n      console.log(\"regression_fx is \", regression_fx);\n      console.log(\"regression_sales is \", regression_sales);\n      console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n      console.log(\"slope is \", slope);\n      console.log(\"today_product_price is \", today_fx * product_price);\n      console.log(\"selected data is \", selected_data);\n      localStorage.setItem('date', selected_data[0]);\n      localStorage.setItem('price', selected_data[1]);\n      localStorage.setItem('exchange_rate', product_price_list);\n      localStorage.setItem('current_level', selected_data[3]);\n      localStorage.setItem('correlation', getPearsonCorrelation(selected_data[1], selected_data[2])); //localStorage.setItem('regression_fx', regression_fx);\n\n      localStorage.setItem('regression_fx', regression_fx);\n      localStorage.setItem('regression_sales', regression_sales);\n      localStorage.setItem('regression_predicted_sales', regression_predicted_sales);\n      localStorage.setItem('slope', slope);\n      localStorage.setItem('today_product_price', Math.round(today_fx * product_price * 100) / 100);\n      console.log(\"done storing\");\n      /*\n      console.log(\"localStorage.getItem('date') is\",localStorage.getItem('date'))\n      console.log(\"localStorage.getItem('price') is\",localStorage.getItem('price'))\n      console.log(\"localStorage.getItem('exchange_rate') is\",localStorage.getItem('exchange_rate'))*/\n      // find the product price\n      // filter options\n\n      console.log(\"selected_data_all_products is\", selected_data_all_products);\n      console.log('product_id_title_map is ', product_id_title_map);\n      var num_dates = 0;\n      var options = [];\n      var product_options = [];\n\n      for (let [key, value] of selected_data_all_products) {\n        num_dates = value[0].length;\n\n        if (num_dates > 1) {\n          var price_set = new Set(value[1]);\n          var fx_set = new Set(value[2]);\n\n          if (price_set.size > 1 && fx_set.size > 1) {\n            console.log('use key to get name ', product_id_title_map.get(key));\n            options.push({\n              label: product_id_title_map.get(key),\n              value: key\n            });\n            product_options.push(key);\n          }\n        }\n\n        console.log(key + ' = ' + value);\n      } // Find the most sensitive product\n\n\n      let slope_map = new Map();\n      var slope_list = [];\n      console.log(\"product_options is \", product_options.length);\n\n      for (k = 0; k < product_options.length; k++) {\n        console.log(\"product_options[k] is \", product_options[k]);\n        const product_price_rank = product_id_price_map.get(product_options[k]);\n        console.log(\"product_price_rank is \", product_price_rank);\n        var product_price_list_rank = selected_data_all_products.get(product_options[k])[2].map(function (element) {\n          return element * product_price_rank;\n        });\n        const slope_rank = linear_regression(selected_data_all_products.get(product_options[k])[1], product_price_list_rank)[3];\n        console.log(\"slope_rank is \", slope_rank);\n\n        if (slope_map.has(slope_rank)) {\n          const value = slope_map.get(slope_rank);\n          value.push(product_options[k]);\n          slope_map.set(slope_rank, value);\n        } else {\n          slope_map.set(slope_rank, [product_options[k]]);\n        }\n\n        slope_list.push(slope_rank);\n      }\n\n      slope_list.sort(function (a, b) {\n        return a - b;\n      });\n      console.log(\"slope_list is \", slope_list);\n      const product_set_rank = new Set();\n\n      for (f = 0; f < slope_list.length; f++) {\n        const product_options_list = slope_map.get(slope_list[f]);\n        product_set_rank.add(product_options_list);\n      }\n\n      console.log(\"product_set_rank is \", product_set_rank);\n      let product_array_rank = Array.from(product_set_rank);\n      localStorage.setItem('product_array_rank', product_array_rank);\n      localStorage.setItem('slope_rank', slope_list);\n      console.log(\"product_array_rank is \", product_array_rank);\n    }\n  } catch (err) {\n    console.log(\"no id\");\n  }\n\n  return options;\n};\n\nmodule.exports = fetch_from_map;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/fetch_from_map.js"],"names":["getPearsonCorrelation","require","linear_regression","fetch_from_map","select","tabs","maps","product_id_title_map","dropdown_select","product_id_price_map","fx_map","selected_currency","console","log","selected_data_all_products","get","selected_data","product_price","today_fx","product_price_list","map","element","regression_fx","regression_sales","regression_predicted_sales","slope","localStorage","setItem","Math","round","num_dates","options","product_options","key","value","length","price_set","Set","fx_set","size","push","label","slope_map","Map","slope_list","k","product_price_rank","product_price_list_rank","slope_rank","has","set","sort","a","b","product_set_rank","f","product_options_list","add","product_array_rank","Array","from","err","module","exports"],"mappings":"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","sourcesContent":["import store from 'store-js';\nimport { KeypressListener } from '@shopify/polaris';\nimport { json } from 'body-parser';\n\nconst getPearsonCorrelation = require('./calc_correlation')\nconst linear_regression = require('./linear_regression')\n\nconst fetch_from_map = (select, tabs, maps, product_id_title_map, dropdown_select, product_id_price_map, fx_map) => {\n\n\n    try{\n        \n        if (select !== 0){\n            // fetch data for graphs\n            const selected_currency = tabs[select]['id']\n            console.log(\"selected currency is \", selected_currency)\n            console.log(\"dropdown_select is \", dropdown_select)\n\n\n            const selected_data_all_products = maps.get(selected_currency)\n            const selected_data = selected_data_all_products.get(dropdown_select)\n            const product_price = product_id_price_map.get(dropdown_select)\n            const today_fx = fx_map.get(selected_currency)\n            console.log(\"product_price is \", product_price)\n\n            var product_price_list = selected_data[2].map(function(element) {\n                return element*product_price;\n            });\n\n            const [regression_fx, regression_sales, regression_predicted_sales, slope] = linear_regression(selected_data[1],product_price_list)\n\n   \n                \n            console.log(\"regression_fx is \", regression_fx);\n            console.log(\"regression_sales is \", regression_sales);\n            console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n            console.log(\"slope is \", slope);\n            console.log(\"today_product_price is \", today_fx*product_price);\n            console.log(\"selected data is \", selected_data)\n\n            localStorage.setItem('date', selected_data[0]);\n            localStorage.setItem('price', selected_data[1]);\n            localStorage.setItem('exchange_rate', product_price_list);\n            localStorage.setItem('current_level', selected_data[3]);\n            localStorage.setItem('correlation', getPearsonCorrelation(selected_data[1],selected_data[2]));\n            //localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_sales', regression_sales);\n            localStorage.setItem('regression_predicted_sales', regression_predicted_sales);\n            localStorage.setItem('slope', slope);\n            localStorage.setItem('today_product_price', Math.round(today_fx*product_price*100)/100);\n\n            console.log(\"done storing\")\n            /*\n            console.log(\"localStorage.getItem('date') is\",localStorage.getItem('date'))\n            console.log(\"localStorage.getItem('price') is\",localStorage.getItem('price'))\n            console.log(\"localStorage.getItem('exchange_rate') is\",localStorage.getItem('exchange_rate'))*/\n\n            // find the product price\n\n\n\n\n\n\n\n            // filter options\n            console.log(\"selected_data_all_products is\",selected_data_all_products)\n            console.log('product_id_title_map is ', product_id_title_map)\n            var num_dates = 0\n            var options = []\n            var product_options = []\n            for (let [key, value] of selected_data_all_products) {\n                num_dates = value[0].length\n                if (num_dates>1){\n                    var price_set = new Set(value[1]);\n                    var fx_set = new Set(value[2]);\n                    if (price_set.size>1 && fx_set.size>1){\n                        console.log('use key to get name ', product_id_title_map.get(key))\n                        options.push(\n                            {\n                                label:product_id_title_map.get(key), value: key\n                            }\n                        )\n                        product_options.push(key)\n                    }\n                }\n                console.log(key + ' = ' + value)\n            }\n\n            // Find the most sensitive product\n            let slope_map = new Map()\n            var slope_list = []\n\n            console.log(\"product_options is \", product_options.length)\n\n            for (k=0; k<product_options.length; k++){\n                console.log(\"product_options[k] is \", product_options[k])\n                const product_price_rank = product_id_price_map.get(product_options[k])\n                console.log(\"product_price_rank is \", product_price_rank)\n                \n                var product_price_list_rank = selected_data_all_products.get(product_options[k])[2].map(function(element) {\n                    return element*product_price_rank;\n                });\n\n                const slope_rank = linear_regression(selected_data_all_products.get(product_options[k])[1],product_price_list_rank)[3]\n\n                console.log(\"slope_rank is \", slope_rank)\n\n                if (slope_map.has(slope_rank)){\n                    const value = slope_map.get(slope_rank)\n                    value.push(product_options[k])\n                    slope_map.set(slope_rank, value)\n                } else {\n                    slope_map.set(slope_rank, [product_options[k]])\n                }\n                slope_list.push(slope_rank)\n            }\n\n\n            slope_list.sort(function(a, b){return a-b});\n            console.log(\"slope_list is \", slope_list)\n\n            const product_set_rank = new Set();\n            for (f=0;f<slope_list.length;f++){\n                const product_options_list = slope_map.get(slope_list[f])\n                product_set_rank.add(product_options_list)\n            }\n\n            console.log(\"product_set_rank is \", product_set_rank)\n\n            let product_array_rank = Array.from(product_set_rank);\n            localStorage.setItem('product_array_rank', product_array_rank);\n            localStorage.setItem('slope_rank', slope_list);\n\n            console.log(\"product_array_rank is \", product_array_rank)\n        }\n\n        \n\n\n\n    } catch(err){\n        console.log(\"no id\")\n    }\n    \n    return options\n}\n\nmodule.exports = fetch_from_map; \n\n"]},"metadata":{},"sourceType":"script"}