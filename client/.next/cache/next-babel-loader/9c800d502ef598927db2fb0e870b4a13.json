{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Card, Layout } from '@shopify/polaris';\nimport { HorizontalBar, Doughnut, Bar } from 'react-chartjs-2';\nimport store from 'store-js';\n\nvar getPearsonCorrelation = require('../functions/sales_exchange_rate_corr');\n\nvar date = store.get('date');\nvar price = store.get('price');\nvar exchange_rate = store.get('exchange_rate');\nvar level = store.get('level');\nvar r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34, 37, 24, 67, 42], [1.23, 1.22, 1.23, 1.24, 1.25])), 1) * 100);\nvar doughnut = [r, 100 - r];\nvar leve_num2 = [2, 2, 2, 2]; //const leve_num1 = [2, 2, 2, 2]\n//const leve_num3 = [2, 2, 2, 2]\n\nvar leve_num1 = [level[0][0] * 100 - 2, level[0][1] * 100 - 2, level[0][2] * 100 - 2, level[0][3] * 100 - 2];\nvar leve_num3 = [100 - level[0][0] * 100, 100 - level[0][0] * 100, 100 - level[0][0] * 100, 100 - level[0][0] * 100]; //console.log(\"1 is\",leve_num1)\n//console.log(\"2 is\",leve_num2)\n//console.log(\"3 is\",leve_num3)\n//console.log(\"level2 is \", leve_num1)\n//console.log(\"date is \", date)\n//console.log(\"price is \", price)\n//console.log(\"exchange_rate is \", exchange_rate)\n//console.log(\"r is \", r)\n\nvar color = '';\n\nif (r < 30) {\n  color = '#a2d6c4';\n} else if (r < 60) {\n  color = '#ffb367';\n} else {\n  color = '#fc7e2f';\n}\n\nvar doughnutChartData = {\n  labels: [\"Moderate: \" + r],\n  datasets: [{\n    //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n    backgroundColor: [color, \"#EEEEEE\"],\n    borderColor: 'rgba(0, 0, 0, 0)',\n    borderWidth: 2,\n    data: doughnut\n  }]\n};\nvar doughnutChartOptions = {\n  circumference: 1 * Math.PI,\n  rotation: Math.PI,\n  maintainAspectRatio: true,\n  cutoutPercentage: 70,\n  tooltips: {\n    enabled: false\n  },\n  legend: {\n    display: true,\n    position: 'bottom',\n    align: 'center',\n    labels: {\n      fontSize: 25,\n      boxWidth: 0,\n      fontColor: '#01023A'\n    }\n  },\n  pieceLabel: {\n    render: 'value' + '%',\n    fontColor: \"white\"\n  }\n};\nvar lineChartData = {\n  //labels: ['04-19', '04-22', '04-25', '04-28', '05-01', '05-04', '05-07', '05-10', '05-13'],\n  lables: date,\n  datasets: [{\n    yAxisID: 'A',\n    type: \"bar\",\n    label: \"sales in store currency\",\n    fill: false,\n    lineTension: 0,\n    backgroundColor: \"rgb(1, 2, 58)\",\n    borderColor: \"rgb(1, 2, 58)\",\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: \"rgb(1, 2, 58)\",\n    pointBackgroundColor: \"rgb(1, 2, 58)\",\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderWidth: 2,\n    pointRadius: 4,\n    pointHitRadius: 10,\n    // notice the gap in the data and the spanGaps: false\n    //data: [1, 2, 3, 4, 3, 2, 4, 3, 1],\n    data: price,\n    spanGaps: false,\n    barPercentage: 0.3\n  }, {\n    yAxisID: 'B',\n    type: \"line\",\n    label: \"product price\",\n    fill: false,\n    lineTension: 0,\n    backgroundColor: \"rgb(1, 2, 58)\",\n    borderColor: \"rgb(1, 2, 58)\",\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: \"rgb(1, 2, 58)\",\n    pointBackgroundColor: \"rgb(1, 2, 58)\",\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderWidth: 2,\n    pointRadius: 4,\n    pointHitRadius: 10,\n    // notice the gap in the data and the spanGaps: false\n    //data: [7, 7.1005, 7.0906, 7.0879, 7.1372, 7.1542, 7.1257, 7.1673, 7.1562],\n    data: exchange_rate,\n    spanGaps: false\n  }]\n};\nvar lineChartOptions = {\n  maintainAspectRatio: true,\n  tooltips: {\n    enabled: true\n  },\n  legend: {\n    display: false\n  },\n  scales: {\n    yAxes: [{\n      id: 'A',\n      type: 'linear',\n      position: 'left',\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\"\n      }\n    }, {\n      id: 'B',\n      type: 'linear',\n      position: 'right',\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\"\n      },\n      ticks: {\n        min: 0,\n        max: 1.2\n      }\n    }],\n    xAxes: [{\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\"\n      }\n    }]\n  },\n  layout: {\n    padding: {\n      left: 0,\n      right: 50,\n      top: 0,\n      bottom: 0\n    }\n  }\n};\nvar barChartData = {\n  labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP', 'US - Aaa Corporate Bonds', 'US - S&P 500'],\n  datasets: [{\n    backgroundColor: [\"#ffa41b\", '#005082', '#ff5733', '#708160', '#00a8cc'],\n    borderColor: 'rgba(0, 0, 0, 0)',\n    borderWidth: 2,\n    data: [0.65, 0.50, 0.47, 0.39, 0.37]\n  }]\n};\nvar barChartOptions = {\n  legend: {\n    display: false\n  },\n  scales: {\n    xAxes: [{\n      ticks: {\n        min: 0,\n        max: 1,\n        callback: function callback(value) {\n          return value;\n        }\n      },\n      scaleLabel: {\n        display: true,\n        labelString: \"Correlation Coefficient (Absolute Value)\"\n      }\n    }],\n    yAxes: [{\n      barPercentage: 0.3,\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\"\n      }\n    }]\n  }\n};\nvar rangeChartData = {\n  labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n  datasets: [{\n    label: 'range',\n    backgroundColor: 'rgb(1, 2, 58)',\n    stack: '3',\n    data: leve_num1\n  }, {\n    backgroundColor: '#32DC8B',\n    stack: '3',\n    data: leve_num2\n  }, {\n    label: 'range2',\n    backgroundColor: 'rgb(1, 2, 58)',\n    stack: '3',\n    data: leve_num3\n  }]\n};\nvar rangeChartOptions = {\n  maintainAspectRatio: false,\n  tooltips: {\n    enabled: false\n  },\n  legend: {\n    display: false\n  },\n  scales: {\n    xAxes: [{\n      stacked: true,\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\"\n      },\n      ticks: {\n        min: 0,\n        max: 100,\n        callback: function callback(value) {\n          return value + \"%\";\n        }\n      }\n    }],\n    yAxes: [{\n      stacked: true,\n      barPercentage: 0.4,\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\"\n      }\n    }]\n  },\n  layout: {\n    padding: {\n      left: 0,\n      right: 30,\n      top: 0,\n      bottom: 0\n    }\n  }\n};\nexport default function Country_data() {\n  return __jsx(Layout, null, __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Card, null, __jsx(\"p\", null, \"Price volatile\"), __jsx(Doughnut, {\n    height: \"80vh\",\n    data: doughnutChartData,\n    options: doughnutChartOptions\n  }), __jsx(Bar, {\n    height: \"200vh\",\n    data: lineChartData,\n    options: lineChartOptions\n  }))), __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Card, null, __jsx(\"p\", null, \"The current price level\"), __jsx(HorizontalBar, {\n    height: \"170vh\",\n    data: rangeChartData,\n    options: rangeChartOptions\n  })), __jsx(Card, null, __jsx(\"p\", null, \"Product ranking\"), __jsx(HorizontalBar, {\n    height: \"170vh\",\n    data: barChartData,\n    options: barChartOptions\n  }))));\n}","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/Country_data.js"],"names":["React","Card","Layout","HorizontalBar","Doughnut","Bar","store","getPearsonCorrelation","require","date","get","price","exchange_rate","level","r","parseInt","Math","min","abs","doughnut","leve_num2","leve_num1","leve_num3","color","doughnutChartData","labels","datasets","backgroundColor","borderColor","borderWidth","data","doughnutChartOptions","circumference","PI","rotation","maintainAspectRatio","cutoutPercentage","tooltips","enabled","legend","display","position","align","fontSize","boxWidth","fontColor","pieceLabel","render","lineChartData","lables","yAxisID","type","label","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","spanGaps","barPercentage","lineChartOptions","scales","yAxes","id","gridLines","ticks","max","xAxes","layout","padding","left","right","top","bottom","barChartData","barChartOptions","callback","value","scaleLabel","labelString","rangeChartData","stack","rangeChartOptions","stacked","Country_data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Card, Layout} from '@shopify/polaris';\nimport {HorizontalBar, Doughnut, Bar} from 'react-chartjs-2';\nimport store from 'store-js';\nconst getPearsonCorrelation = require('../functions/sales_exchange_rate_corr')\n\nconst date = store.get('date') \nconst price = store.get('price') \nconst exchange_rate = store.get('exchange_rate') \nconst level = store.get('level') \nconst r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1) * 100)\nconst doughnut = [r, 100-r]\n\nconst leve_num2 = [2, 2, 2, 2]\n//const leve_num1 = [2, 2, 2, 2]\n//const leve_num3 = [2, 2, 2, 2]\nconst leve_num1 = [level[0][0]*100-2, level[0][1]*100-2, level[0][2]*100-2, level[0][3]*100-2]\nconst leve_num3 = [100-level[0][0]*100,100-level[0][0]*100,100-level[0][0]*100,100-level[0][0]*100]\n\n//console.log(\"1 is\",leve_num1)\n//console.log(\"2 is\",leve_num2)\n//console.log(\"3 is\",leve_num3)\n//console.log(\"level2 is \", leve_num1)\n\n//console.log(\"date is \", date)\n//console.log(\"price is \", price)\n//console.log(\"exchange_rate is \", exchange_rate)\n//console.log(\"r is \", r)\n\nvar color = ''\nif (r < 30){\n    color = '#a2d6c4'\n} else if (r < 60){\n    color = '#ffb367'\n} else {\n    color = '#fc7e2f'\n}\n\n\n\nconst doughnutChartData = {\n  labels: [\"Moderate: \"+r],\n  datasets: [\n    {\n      //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n      backgroundColor: [color,\"#EEEEEE\"],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: doughnut,\n\n    }\n  ],\n};\n  \nconst doughnutChartOptions = {\n  circumference: 1* Math.PI,\n  rotation: Math.PI,\n  maintainAspectRatio: true,\n  cutoutPercentage:70,\n  tooltips:{\n    enabled:false,\n  },\n  legend: {\n            display: true,\n            position: 'bottom',\n            align:'center',\n            labels:{\n                fontSize: 25,\n                boxWidth: 0,\n                fontColor: '#01023A'\n            }\n          },\n  pieceLabel: {\n    render: 'value' + '%',\n    fontColor: \"white\",\n  }\n  };\n\nvar lineChartData = {\n  //labels: ['04-19', '04-22', '04-25', '04-28', '05-01', '05-04', '05-07', '05-10', '05-13'],\n  lables: date,\n  datasets: [{\n    yAxisID: 'A',\n    type: \"bar\",\n    label: \"sales in store currency\",\n    fill: false,\n    lineTension: 0,\n    backgroundColor: \"rgb(1, 2, 58)\",\n    borderColor: \"rgb(1, 2, 58)\",\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: \"rgb(1, 2, 58)\",\n    pointBackgroundColor: \"rgb(1, 2, 58)\",\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderWidth: 2,\n    pointRadius: 4,\n    pointHitRadius: 10,\n    // notice the gap in the data and the spanGaps: false\n    //data: [1, 2, 3, 4, 3, 2, 4, 3, 1],\n    data: price,\n    spanGaps: false,\n    barPercentage: 0.3\n    },\n    {\n      yAxisID: 'B',\n      type: \"line\",\n      label: \"product price\",\n      fill: false,\n      lineTension: 0,\n      backgroundColor: \"rgb(1, 2, 58)\",\n      borderColor: \"rgb(1, 2, 58)\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"rgb(1, 2, 58)\",\n      pointBackgroundColor: \"rgb(1, 2, 58)\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [7, 7.1005, 7.0906, 7.0879, 7.1372, 7.1542, 7.1257, 7.1673, 7.1562],\n      data: exchange_rate,\n      spanGaps: false,\n      }\n\n  ]\n  };\n\nvar lineChartOptions = {\n  maintainAspectRatio: true,\n  tooltips:{\n    enabled:true,\n  },\n  legend: {\n    display: false,\n  },\n  scales: {\n            yAxes:\n            [{\n                id: 'A',\n                type: 'linear',\n                position: 'left',\n                gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                },\n\n \n              }, {\n                id: 'B',\n                type: 'linear',\n                position: 'right',\n                gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                },\n                ticks: {\n                    min: 0,\n                    max: 1.2\n                    }\n\n              }],\n            xAxes: [{\n              gridLines: {\n                color: \"rgba(0, 0, 0, 0)\",\n            }\n            },],            \n        },\n        layout: {\n          padding: {\n              left: 0,\n              right: 50,\n              top: 0,\n              bottom: 0\n          }\n      }   \n};\n\n\nconst barChartData = {\n  labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP',\n            'US - Aaa Corporate Bonds', 'US - S&P 500'],\n  datasets: [\n    {\n      backgroundColor: [\"#ffa41b\", '#005082','#ff5733','#708160','#00a8cc'],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: [0.65, 0.50, 0.47, 0.39, 0.37]\n    }\n  ],\n};\n\nconst barChartOptions = {\n\n  legend: {\n            display: false,\n          },\n\n  scales: {\n            xAxes: [{\n              ticks: {\n                min: 0,\n                max: 1,\n                callback: function(value) {\n                    return value\n                }\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"Correlation Coefficient (Absolute Value)\"\n              }\n            },],\n            yAxes: [{\n              barPercentage: 0.3,\n              gridLines: {\n                color: \"rgba(0, 0, 0, 0)\",\n            }\n            },],\n          },\n};\n\nconst rangeChartData = {\n    labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n    datasets: [\n    {\n    label: 'range',\n    backgroundColor: 'rgb(1, 2, 58)',\n    stack: '3',\n    data: leve_num1,\n    },\n    {\n    backgroundColor: '#32DC8B',\n    stack: '3',\n    data: leve_num2,\n    },\n    {\n      label: 'range2',\n      backgroundColor: 'rgb(1, 2, 58)',\n      stack: '3',\n      data: leve_num3,\n      },\n    ],\n  };\n    \n  const rangeChartOptions = {\n    maintainAspectRatio: false,\n    tooltips:{\n      enabled:false,\n    },\n    legend: {\n              display: false,\n            },\n    scales: {\n              xAxes: [{\n                stacked: true,\n                gridLines: {\n                  color: \"rgba(0, 0, 0, 0)\",\n                },\n                ticks: {\n                  min: 0,\n                  max: 100,\n                  callback: function(value) {\n                      return value + \"%\"\n                  }\n                }\n              },],\n              yAxes: [{\n                stacked: true,\n                barPercentage: 0.4,\n                gridLines: {\n                  color: \"rgba(0, 0, 0, 0)\",\n              }\n              \n              },],\n            },\n            layout: {\n              padding: {\n                  left: 0,\n                  right: 30,\n                  top: 0,\n                  bottom: 0\n              }\n          }  \n    };\n\n\nexport default function Country_data() {  \n    return (\n\n\n            <Layout>\n            <Layout.Section oneHalf>\n            <Card>\n                <p>Price volatile</p>\n                <Doughnut\n                    height=\"80vh\"\n                    data={doughnutChartData}\n                    options={doughnutChartOptions}\n                />\n                <Bar \n                  height=\"200vh\"\n                  data={lineChartData}\n                  options={lineChartOptions}\n                />\n                </Card>\n            </Layout.Section>\n            <Layout.Section oneHalf>\n            <Card>\n                <p>The current price level</p>\n                <HorizontalBar \n                    height=\"170vh\"\n                    data={rangeChartData}\n                    options={rangeChartOptions}\n                    />\n            </Card>\n            <Card>\n                <p>Product ranking</p>\n                <HorizontalBar \n                        height=\"170vh\"\n                        data={barChartData}\n                        options={barChartOptions}\n                    />\n            </Card>\n            </Layout.Section>\n          </Layout>\n\n    );\n  }\n\n"]},"metadata":{},"sourceType":"module"}