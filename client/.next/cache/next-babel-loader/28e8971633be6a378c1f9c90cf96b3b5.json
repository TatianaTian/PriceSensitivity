{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport { ComposableMap, Geographies, Geography, Sphere, Graticule } from \"react-simple-maps\";\nvar geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nvar colorScale = scaleLinear().domain([0.29, 0.68]).range([\"#ffedea\", \"#ff5233\"]);\n\nvar MapChart = function MapChart() {\n  var _useState = useState([]),\n      data = _useState[0],\n      setData = _useState[1];\n\n  useEffect(function () {\n    csv(\"/vulnerability.csv\").then(function (data) {\n      setData(data);\n    });\n  }, []);\n  return __jsx(ComposableMap, {\n    projectionConfig: {\n      rotate: [-10, 0, 0],\n      scale: 147\n    }\n  }, __jsx(Sphere, {\n    stroke: \"#E4E5E6\",\n    strokeWidth: 0.5\n  }), __jsx(Graticule, {\n    stroke: \"#E4E5E6\",\n    strokeWidth: 0.5\n  }), data.length > 0 && __jsx(Geographies, {\n    geography: geoUrl\n  }, function (_ref) {\n    var geographies = _ref.geographies;\n    return geographies.map(function (geo) {\n      var d = data.find(function (s) {\n        return s.ISO3 === geo.properties.ISO_A3;\n      });\n      return __jsx(Geography, {\n        key: geo.rsmKey,\n        geography: geo,\n        fill: d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"\n      });\n    });\n  }));\n};\n\nexport default MapChart;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/MapChart.js"],"names":["React","useEffect","useState","csv","scaleLinear","ComposableMap","Geographies","Geography","Sphere","Graticule","geoUrl","colorScale","domain","range","MapChart","data","setData","then","rotate","scale","length","geographies","map","geo","d","find","s","ISO3","properties","ISO_A3","rsmKey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,SALF,QAMO,mBANP;AAQA,IAAMC,MAAM,GACV,wGADF;AAGA,IAAMC,UAAU,GAAGP,WAAW,GAC3BQ,MADgB,CACT,CAAC,IAAD,EAAO,IAAP,CADS,EAEhBC,KAFgB,CAEV,CAAC,SAAD,EAAY,SAAZ,CAFU,CAAnB;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAAA,kBACGZ,QAAQ,CAAC,EAAD,CADX;AAAA,MACda,IADc;AAAA,MACRC,OADQ;;AAGrBf,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,GAAG,sBAAH,CAA0Bc,IAA1B,CAA+B,UAAAF,IAAI,EAAI;AACrCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE,MAAC,aAAD;AACE,IAAA,gBAAgB,EAAE;AAChBG,MAAAA,MAAM,EAAE,CAAC,CAAC,EAAF,EAAM,CAAN,EAAS,CAAT,CADQ;AAEhBC,MAAAA,KAAK,EAAE;AAFS;AADpB,KAME,MAAC,MAAD;AAAQ,IAAA,MAAM,EAAC,SAAf;AAAyB,IAAA,WAAW,EAAE;AAAtC,IANF,EAOE,MAAC,SAAD;AAAW,IAAA,MAAM,EAAC,SAAlB;AAA4B,IAAA,WAAW,EAAE;AAAzC,IAPF,EAQGJ,IAAI,CAACK,MAAL,GAAc,CAAd,IACC,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEV;AAAxB,KACG;AAAA,QAAGW,WAAH,QAAGA,WAAH;AAAA,WACCA,WAAW,CAACC,GAAZ,CAAgB,UAAAC,GAAG,EAAI;AACrB,UAAMC,CAAC,GAAGT,IAAI,CAACU,IAAL,CAAU,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,IAAF,KAAWJ,GAAG,CAACK,UAAJ,CAAeC,MAA9B;AAAA,OAAX,CAAV;AACA,aACE,MAAC,SAAD;AACE,QAAA,GAAG,EAAEN,GAAG,CAACO,MADX;AAEE,QAAA,SAAS,EAAEP,GAFb;AAGE,QAAA,IAAI,EAAEC,CAAC,GAAGb,UAAU,CAACa,CAAC,CAAC,MAAD,CAAF,CAAb,GAA2B;AAHpC,QADF;AAOD,KATD,CADD;AAAA,GADH,CATJ,CADF;AA2BD,CApCD;;AAsCA,eAAeV,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then(data => {\n      setData(data);\n    });\n  }, []);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 147\n      }}\n    >\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      {data.length > 0 && (\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => {\n              const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                />\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n"]},"metadata":{},"sourceType":"module"}