{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\n// import \nvar position = require('./positionGenerator'); // user confirms the lock: collect buyer/seller currencies, units, locked_rate from Shopify\n\n\nvar buyer_currency = 'AUD';\nvar seller_currency = 'USD';\nvar locked_rate = '1.25';\nvar units_buyer = 75; //in buyer's currencies\n\nvar account = ''; // connect to ONADA\n\nvar common = require('./lib/common');\n\nvar config = require('./lib/config');\n\nvar argv = require('yargs').alias('config', 'c').nargs('config', 1).describe('config', \"v20 Configuration File to use\")[\"default\"]('config', config.defaultConfigFile()).argv;\n\nvar conf = new config.Config(argv.config);\nvar ctx = conf.createContext(); // generate the trading direction\n\nvar _position$positionTra = position.positionTrader(buyer_currency, seller_currency, units_buyer, locked_rate),\n    _position$positionTra2 = _slicedToArray(_position$positionTra, 3),\n    trade_direction = _position$positionTra2[0],\n    tradeQuantity = _position$positionTra2[1],\n    currency_pair = _position$positionTra2[2];\n\nif (trade_direction === 'buy') {\n  units_buyer = Math.round(tradeQuantity);\n  account = conf.buyAccount;\n} else if (trade_direction === 'sell') {\n  units_buyer = Math.round(tradeQuantity * -1);\n  account = conf.sellAccount;\n}\n\nconsole.log('trade account ', account); // place limit trades, buy orders to buy_account, sell orders to sell_account\n\nvar marketOrder = new ctx.order.MarketOrderRequest({\n  instrument: currency_pair,\n  units: units_buyer,\n  timeInForce: 'IOC' //priceBound: locked_rate\n\n});\nctx.order.market(account, marketOrder, function (response) {\n  common.handleErrorResponse(response);\n  common.dumpOrderCreateResponse(response);\n});","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_app/trade/trades/src/place_trades.js"],"names":["position","require","buyer_currency","seller_currency","locked_rate","units_buyer","account","common","config","argv","alias","nargs","describe","defaultConfigFile","conf","Config","ctx","createContext","positionTrader","trade_direction","tradeQuantity","currency_pair","Math","round","buyAccount","sellAccount","console","log","marketOrder","order","MarketOrderRequest","instrument","units","timeInForce","market","response","handleErrorResponse","dumpOrderCreateResponse"],"mappings":";;AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB,C,CAEA;;;AACA,IAAIC,cAAc,GAAG,KAArB;AACA,IAAIC,eAAe,GAAG,KAAtB;AACA,IAAIC,WAAW,GAAG,MAAlB;AACA,IAAIC,WAAW,GAAG,EAAlB,C,CAAsB;;AACtB,IAAIC,OAAO,GAAG,EAAd,C,CAGA;;AACA,IAAIC,MAAM,GAAGN,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIO,MAAM,GAAGP,OAAO,CAAC,cAAD,CAApB;;AAEA,IAAIQ,IAAI,GAAGR,OAAO,CAAC,OAAD,CAAP,CACVS,KADU,CACJ,QADI,EACM,GADN,EAEVC,KAFU,CAEJ,QAFI,EAEM,CAFN,EAGVC,QAHU,CAGD,QAHC,EAGS,+BAHT,aAIF,QAJE,EAIQJ,MAAM,CAACK,iBAAP,EAJR,EAKVJ,IALD;;AAOA,IAAIK,IAAI,GAAG,IAAIN,MAAM,CAACO,MAAX,CAAkBN,IAAI,CAACD,MAAvB,CAAX;AACA,IAAIQ,GAAG,GAAGF,IAAI,CAACG,aAAL,EAAV,C,CAEA;;4BACsDjB,QAAQ,CAACkB,cAAT,CAAwBhB,cAAxB,EAAuCC,eAAvC,EAAuDE,WAAvD,EAAmED,WAAnE,C;;IAAjDe,e;IAAiBC,a;IAAeC,a;;AACrC,IAAIF,eAAe,KAAK,KAAxB,EAA8B;AAC1Bd,EAAAA,WAAW,GAAGiB,IAAI,CAACC,KAAL,CAAWH,aAAX,CAAd;AACAd,EAAAA,OAAO,GAAGQ,IAAI,CAACU,UAAf;AACH,CAHD,MAIK,IAAIL,eAAe,KAAK,MAAxB,EAA+B;AAChCd,EAAAA,WAAW,GAAGiB,IAAI,CAACC,KAAL,CAAWH,aAAa,GAAI,CAAC,CAA7B,CAAd;AACAd,EAAAA,OAAO,GAAGQ,IAAI,CAACW,WAAf;AACH;;AAEDC,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BrB,OAA9B,E,CAEA;;AACA,IAAIsB,WAAW,GAAG,IAAIZ,GAAG,CAACa,KAAJ,CAAUC,kBAAd,CAAiC;AAC/CC,EAAAA,UAAU,EAAEV,aADmC;AAE/CW,EAAAA,KAAK,EAAE3B,WAFwC;AAG/C4B,EAAAA,WAAW,EAAE,KAHkC,CAI/C;;AAJ+C,CAAjC,CAAlB;AAOAjB,GAAG,CAACa,KAAJ,CAAUK,MAAV,CACI5B,OADJ,EAEIsB,WAFJ,EAGI,UAAAO,QAAQ,EAAI;AACR5B,EAAAA,MAAM,CAAC6B,mBAAP,CAA2BD,QAA3B;AACA5B,EAAAA,MAAM,CAAC8B,uBAAP,CAA+BF,QAA/B;AACH,CANL","sourcesContent":["// import \nlet position = require('./positionGenerator');\n\n// user confirms the lock: collect buyer/seller currencies, units, locked_rate from Shopify\nvar buyer_currency = 'AUD';\nvar seller_currency = 'USD';\nvar locked_rate = '1.25';\nvar units_buyer = 75; //in buyer's currencies\nvar account = '';\n\n\n// connect to ONADA\nlet common = require('./lib/common');\nlet config = require('./lib/config');\n\nlet argv = require('yargs')\n.alias('config', 'c')\n.nargs('config', 1)\n.describe('config', \"v20 Configuration File to use\")\n.default('config', config.defaultConfigFile())\n.argv;\n\nlet conf = new config.Config(argv.config);\nlet ctx = conf.createContext();\n\n// generate the trading direction\nvar [trade_direction, tradeQuantity, currency_pair] = position.positionTrader(buyer_currency,seller_currency,units_buyer,locked_rate);\nif (trade_direction === 'buy'){\n    units_buyer = Math.round(tradeQuantity);\n    account = conf.buyAccount\n}\nelse if (trade_direction === 'sell'){\n    units_buyer = Math.round(tradeQuantity * (-1));\n    account = conf.sellAccount\n}\n\nconsole.log('trade account ', account)\n\n// place limit trades, buy orders to buy_account, sell orders to sell_account\nlet marketOrder = new ctx.order.MarketOrderRequest({\n    instrument: currency_pair,\n    units: units_buyer,\n    timeInForce: 'IOC',\n    //priceBound: locked_rate\n});\n\nctx.order.market(\n    account,\n    marketOrder,\n    response => {\n        common.handleErrorResponse(response);\n        common.dumpOrderCreateResponse(response);\n    }\n)    \n"]},"metadata":{},"sourceType":"script"}