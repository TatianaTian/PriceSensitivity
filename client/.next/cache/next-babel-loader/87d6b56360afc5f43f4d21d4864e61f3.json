{"ast":null,"code":"var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate) => {\n  var [data, myMap, exchange_rate_round] = reformat_data(sales, exchange_rate);\n  console.log(\"data is \", data);\n  /*\n  var regression = new jsregression.LinearRegression(  {alpha: 0.001, // \n      iterations: 300,\n      lambda: 0.0});\n  console.log(\"here\")\n  var model = regression.fit(data);\n  */\n\n  let myMap2 = new Map();\n  myMap2 = myMap; // sort exchange rate\n\n  exchange_rate_round.sort(function (a, b) {\n    return a - b;\n  });\n  var regression_fx = [];\n  var regression_sales = [];\n  var regression_predicted_sales = [];\n\n  for (j = 0; j < exchange_rate_round.length; j++) {\n    regression_fx.push(exchange_rate_round[j]);\n    regression_sales.push(myMap2.get(exchange_rate_round[j]));\n    regression_predicted_sales.push(regression.transform([exchange_rate_round[j]]));\n    console.log(\"predicted number is \", regression.transform([exchange_rate_round[j]]));\n  }\n\n  return [regression_fx, regression_sales, regression_predicted_sales];\n};\n\nfunction reformat_data(sales, exchange_rate) {\n  var round_sales;\n  const exchange_rate_round = [];\n  const data = [];\n  let myMap = new Map();\n\n  for (i = 0; i < exchange_rate.length; i++) {\n    var round_fx = Math.round(1000 * exchange_rate[i]) / 1000;\n\n    if (myMap.has(round_fx)) {\n      var sales_list = myMap.get(round_fx);\n      round_sales = Math.round(100 * sales[i]) / 100;\n      sales_list.push(round_sales);\n      myMap.set(round_fx, sales_list);\n    }\n\n    round_sales = Math.round(100 * sales[i]) / 100;\n    myMap.set(round_fx, [round_sales]);\n  }\n\n  for (let [k, v] of myMap) {\n    let sum = v.reduce((previous, current) => current += previous);\n    let avg = sum / v.length;\n    data.push([k, avg]);\n    exchange_rate_round.push(k);\n  }\n\n  return [data, myMap, exchange_rate_round];\n}\n\nmodule.exports = linear_regression;\n\nfunction findLineByLeastSquares(values_x, values_y) {\n  var x_sum = 0;\n  var y_sum = 0;\n  var xy_sum = 0;\n  var xx_sum = 0;\n  var count = 0;\n  /*\n   * The above is just for quick access, makes the program faster\n   */\n\n  var x = 0;\n  var y = 0;\n  var values_length = values_x.length;\n\n  if (values_length != values_y.length) {\n    throw new Error('The parameters values_x and values_y need to have same size!');\n  }\n  /*\n   * Above and below cover edge cases\n   */\n\n\n  if (values_length === 0) {\n    return [[], []];\n  }\n  /*\n   * Calculate the sum for each of the parts necessary.\n   */\n\n\n  for (let i = 0; i < values_length; i++) {\n    x = values_x[i];\n    y = values_y[i];\n    x_sum += x;\n    y_sum += y;\n    xx_sum += x * x;\n    xy_sum += x * y;\n    count++;\n  }\n  /*\n   * Calculate m and b for the line equation:\n   * y = x * m + b\n   */\n\n\n  var m = (count * xy_sum - x_sum * y_sum) / (count * xx_sum - x_sum * x_sum);\n  var b = y_sum / count - m * x_sum / count;\n  /*\n   * We then return the x and y data points according to our fit\n   */\n\n  var result_values_x = [];\n  var result_values_y = [];\n\n  for (let i = 0; i < values_length; i++) {\n    x = values_x[i];\n    y = x * m + b;\n    result_values_x.push(x);\n    result_values_y.push(y);\n  }\n\n  console.log(result_values_x);\n  console.log(result_values_y);\n  return [m, b];\n}\n\nfindLineByLeastSquares([0.921, 0.922, 0.926], [209.8, 555.4, 93.56]); //linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/linear_regression.js"],"names":["jsregression","require","linear_regression","sales","exchange_rate","data","myMap","exchange_rate_round","reformat_data","console","log","myMap2","Map","sort","a","b","regression_fx","regression_sales","regression_predicted_sales","j","length","push","get","regression","transform","round_sales","i","round_fx","Math","round","has","sales_list","set","k","v","sum","reduce","previous","current","avg","module","exports","findLineByLeastSquares","values_x","values_y","x_sum","y_sum","xy_sum","xx_sum","count","x","y","values_length","Error","m","result_values_x","result_values_y"],"mappings":"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","sourcesContent":["var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate)=>{\n    \n    var [data, myMap, exchange_rate_round] = reformat_data(sales, exchange_rate)\n    console.log(\"data is \", data)\n    /*\n    var regression = new jsregression.LinearRegression(  {alpha: 0.001, // \n        iterations: 300,\n        lambda: 0.0});\n    console.log(\"here\")\n    var model = regression.fit(data);\n    */\n    let myMap2 = new Map();\n    myMap2 = myMap\n\n    // sort exchange rate\n    exchange_rate_round.sort(function(a, b){return a-b});\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    \n    for (j=0;j<exchange_rate_round.length;j++){\n        regression_fx.push(exchange_rate_round[j])\n        regression_sales.push(myMap2.get(exchange_rate_round[j]))\n        \n        regression_predicted_sales.push(regression.transform([exchange_rate_round[j]]))\n        console.log(\"predicted number is \", regression.transform([exchange_rate_round[j]]))\n    }\n    return [regression_fx, regression_sales, regression_predicted_sales]\n}\n\nfunction reformat_data(sales, exchange_rate){\n    var round_sales\n    const exchange_rate_round = []\n    const data = []\n    let myMap = new Map()\n    for (i=0;i<exchange_rate.length;i++){\n        var round_fx = Math.round(1000*exchange_rate[i])/1000;\n        if (myMap.has(round_fx)){\n            var sales_list = myMap.get(round_fx)\n            round_sales = Math.round(100*sales[i])/100;\n            sales_list.push(round_sales)\n            myMap.set(round_fx,sales_list)\n        }\n        round_sales = Math.round(100*sales[i])/100;\n        myMap.set(round_fx,[round_sales])\n    }\n    for (let [k, v] of myMap) {\n        let sum = v.reduce((previous, current) => current += previous);\n        let avg = sum / v.length;\n        data.push([k, avg])\n        exchange_rate_round.push(k)\n    }\n\n    return [data, myMap, exchange_rate_round]\n}\n \nmodule.exports = linear_regression; \n\n\nfunction findLineByLeastSquares(values_x, values_y) {\n    var x_sum = 0;\n    var y_sum = 0;\n    var xy_sum = 0;\n    var xx_sum = 0;\n    var count = 0;\n\n    /*\n     * The above is just for quick access, makes the program faster\n     */\n    var x = 0;\n    var y = 0;\n    var values_length = values_x.length;\n\n    if (values_length != values_y.length) {\n        throw new Error('The parameters values_x and values_y need to have same size!');\n    }\n\n    /*\n     * Above and below cover edge cases\n     */\n    if (values_length === 0) {\n        return [ [], [] ];\n    }\n\n    /*\n     * Calculate the sum for each of the parts necessary.\n     */\n    for (let i = 0; i< values_length; i++) {\n        x = values_x[i];\n        y = values_y[i];\n        x_sum+= x;\n        y_sum+= y;\n        xx_sum += x*x;\n        xy_sum += x*y;\n        count++;\n    }\n\n    /*\n     * Calculate m and b for the line equation:\n     * y = x * m + b\n     */\n    var m = (count*xy_sum - x_sum*y_sum) / (count*xx_sum - x_sum*x_sum);\n    var b = (y_sum/count) - (m*x_sum)/count;\n\n    /*\n     * We then return the x and y data points according to our fit\n     */\n    var result_values_x = [];\n    var result_values_y = [];\n\n    for (let i = 0; i < values_length; i++) {\n        x = values_x[i];\n        y = x * m + b;\n        result_values_x.push(x);\n        result_values_y.push(y);\n    }\n    console.log(result_values_x)\n    console.log(result_values_y)\n    return [m, b];\n}\n\n\nfindLineByLeastSquares([0.921,0.922,0.926],[209.8,555.4,93.56])\n\n\n\n\n\n//linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/\n"]},"metadata":{},"sourceType":"script"}