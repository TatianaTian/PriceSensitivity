{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport { ComposableMap, Geographies, Geography, Sphere, Graticule } from \"react-simple-maps\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nconst colorScale = scaleLinear().domain([0.29, 0.68]).range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  const {\n    0: data,\n    1: setData\n  } = useState([]);\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then(data => {\n      setData(data);\n    });\n  }, []);\n  return __jsx(ComposableMap, {\n    projectionConfig: {\n      rotate: [-10, 0, 0],\n      scale: 150\n    } //width={180}\n    //height={180}\n    ,\n    \"data-tip\": \"\"\n  }, __jsx(Sphere, {\n    stroke: \"#E4E5E6\",\n    strokeWidth: 0.5\n  }), __jsx(Graticule, {\n    stroke: \"#E4E5E6\",\n    strokeWidth: 0.5\n  }), data.length > 0 && __jsx(Geographies, {\n    geography: geoUrl\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n    return __jsx(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      onMouseEnter: () => {\n        const {\n          NAME,\n          POP_EST\n        } = geo.properties;\n        setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n      },\n      onMouseLeave: () => {\n        setTooltipContent(\"\");\n      },\n      fill: d ? colorScale(d[\"2017\"]) : \"#F5F4F6\",\n      hover: (fill = \"#D6D6DA\", outline = \"none\")\n    });\n  })));\n};\n\nexport default MapChart;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/MapChart.js"],"names":["React","useEffect","useState","csv","scaleLinear","ComposableMap","Geographies","Geography","Sphere","Graticule","rounded","num","Math","round","geoUrl","colorScale","domain","range","MapChart","setTooltipContent","data","setData","then","rotate","scale","length","geographies","map","geo","d","find","s","ISO3","properties","ISO_A3","rsmKey","NAME","POP_EST","fill","outline"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule\n} from \"react-simple-maps\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = ({ setTooltipContent }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then(data => {\n      setData(data);\n    });\n  }, []);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 150\n      }}\n      //width={180}\n      //height={180}\n      data-tip=\"\"\n    >\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      {data.length > 0 && (\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => {\n              const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                  hover= {\n                    fill= \"#D6D6DA\",\n                    outline= \"none\"\n                  }\n                />\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n"]},"metadata":{},"sourceType":"module"}