{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Card, Layout } from '@shopify/polaris';\nimport { HorizontalBar, Doughnut, Bar } from 'react-chartjs-2';\nimport store from 'store-js';\n\nvar getPearsonCorrelation = require('../functions/calc_correlation');\n\nvar string_to_list = require('../functions/string_to_list');\n\nexport default function Country_data() {\n  var date_string = localStorage.getItem('date');\n  var price_string = localStorage.getItem('price');\n  var exchange_rate_string = localStorage.getItem('exchange_rate');\n  var current_level_string = localStorage.getItem('current_level');\n  var correlation = localStorage.getItem('correlation');\n  var date = [];\n  var price = [];\n  var exchange_rate = [];\n  var current_level = [];\n  var min_bar = 0;\n  var max_bar = 0;\n  var min_line = 0;\n  var max_line = 0;\n\n  if (date_string.includes(',')) {\n    date = string_to_list(localStorage.getItem('date'), '');\n    price = string_to_list(store.get('price'), 'float');\n    exchange_rate = string_to_list(store.get('exchange_rate'), 'float');\n    current_level = string_to_list(store.get('current_level'), 'float');\n    min_bar = Math.min.apply(Math, price) * 0.8;\n    max_bar = (Math.max.apply(Math, price) - min_bar) * 2.2 + min_bar;\n    max_line = Math.max.apply(Math, exchange_rate);\n    min_line = max_line - (max_line - Math.min.apply(Math, exchange_rate)) * 2.2;\n    console.log(\"y is \", [min_bar, max_bar, min_line, max_line]);\n  } else {\n    date = [date_string];\n    price = [price_string];\n    exchange_rate = [exchange_rate_string];\n    current_level = string_to_list(store.get('current_level'), 'float');\n  } //const level = store.get('level') \n\n\n  var r = parseInt(Math.min(Math.abs(parseFloat(correlation)), 1) * 100); //r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1) * 100)\n\n  var doughnut = [r, 100 - r];\n  var leve_num1 = [Math.max(current_level[0] * 100 - 2, 0), Math.max(current_level[1] * 100 - 2, 0), Math.max(current_level[2] * 100 - 2, 0), Math.max(current_level[3] * 100 - 2, 0)];\n  console.log(\"level-num1 is \", leve_num1);\n  var leve_num3 = [98 - leve_num1[0], 98 - leve_num1[1], 98 - leve_num1[2], 98 - leve_num1[3]];\n  console.log(\"level-num3 is \", leve_num3);\n  var leve_num2 = [2, 2, 2, 2];\n  console.log(\"date is \", date);\n  console.log(\"price is \", price);\n  console.log(\"exchange_rate is \", exchange_rate);\n  console.log(\"current_level is \", current_level);\n  console.log(\"correlation is \", correlation);\n  var color = '';\n  var text = '';\n\n  if (r < 30) {\n    color = '#a2d6c4';\n    text = 'light';\n  } else if (r < 60) {\n    color = '#ffa41b';\n    text = 'moderate';\n  } else {\n    color = '#FF2D00';\n    text = 'heavy';\n  }\n\n  var doughnutChartData = {\n    labels: [text + ': ' + r],\n    datasets: [{\n      //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n      backgroundColor: [color, \"#EEEEEE\"],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: doughnut\n    }]\n  };\n  var doughnutChartOptions = {\n    circumference: 1 * Math.PI,\n    rotation: Math.PI,\n    maintainAspectRatio: true,\n    cutoutPercentage: 80,\n    tooltips: {\n      enabled: false\n    },\n    legend: {\n      display: true,\n      position: 'bottom',\n      align: 'center',\n      labels: {\n        fontSize: 25,\n        boxWidth: 0,\n        fontColor: '#01023A'\n      }\n    },\n    pieceLabel: {\n      render: 'value' + '%',\n      fontColor: \"white\"\n    }\n  };\n  var lineChartData = {\n    //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n    labels: date,\n    //lables: [price[0],price[1],price[2]],\n    datasets: [{\n      yAxisID: 'A',\n      type: \"bar\",\n      label: \"sales in store currency\",\n      fill: false,\n      lineTension: 0,\n      backgroundColor: \"#63b7af\",\n      borderColor: \"#63b7af\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"rgb(1, 2, 58)\",\n      pointBackgroundColor: \"rgb(1, 2, 58)\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [89.54, 96.8, 246.51],\n      data: price,\n      //data: [store.get('price')],\n      spanGaps: false,\n      barPercentage: 0.3\n    }, {\n      yAxisID: 'B',\n      type: \"line\",\n      label: \"product price\",\n      fill: false,\n      lineTension: 0.3,\n      backgroundColor: \"#ee8572\",\n      borderColor: \"#ee8572\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"#ee8572\",\n      pointBackgroundColor: \"#ee8572\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"#ee8572\",\n      pointHoverBorderColor: \"#ee8572\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [0.8072950291, 0.8072950291, 0.8072950291],\n      data: exchange_rate,\n      //data: [store.get('exchange_rate')],\n      spanGaps: false\n    }]\n  };\n  var lineChartOptions = {\n    maintainAspectRatio: true,\n    tooltips: {\n      enabled: true\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      yAxes: [{\n        id: 'A',\n        type: 'linear',\n        position: 'left',\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        },\n        ticks: {\n          min: min_bar,\n          max: max_bar\n        }\n      }, {\n        id: 'B',\n        type: 'linear',\n        position: 'right',\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        },\n        ticks: {\n          min: min_line,\n          max: max_line\n        }\n      }],\n      xAxes: [{\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 0,\n        right: 50,\n        top: 0,\n        bottom: 0\n      }\n    }\n  };\n  var barChartData = {\n    labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP', 'US - Aaa Corporate Bonds', 'US - S&P 500'],\n    datasets: [{\n      backgroundColor: [\"#ffa41b\", '#005082', '#ff5733', '#708160', '#00a8cc'],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: [0.65, 0.50, 0.47, 0.39, 0.37]\n    }]\n  };\n  var barChartOptions = {\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        ticks: {\n          min: 0,\n          max: 1,\n          callback: function callback(value) {\n            return value;\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: \"Correlation Coefficient (Absolute Value)\"\n        }\n      }],\n      yAxes: [{\n        barPercentage: 0.3,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    }\n  };\n  var rangeChartData = {\n    labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n    datasets: [{\n      label: 'range',\n      backgroundColor: '#35495e',\n      stack: '3',\n      data: leve_num1\n    }, {\n      backgroundColor: '#63b7af',\n      stack: '3',\n      data: leve_num2\n    }, {\n      label: 'range2',\n      backgroundColor: '#35495e',\n      stack: '3',\n      data: leve_num3\n    }]\n  };\n  var rangeChartOptions = {\n    maintainAspectRatio: false,\n    tooltips: {\n      enabled: false\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        stacked: true,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        },\n        ticks: {\n          min: 0,\n          max: 100,\n          callback: function callback(value) {\n            return value + \"%\";\n          }\n        }\n      }],\n      yAxes: [{\n        stacked: true,\n        barPercentage: 0.4,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 0,\n        right: 30,\n        top: 0,\n        bottom: 0\n      }\n    }\n  };\n  return __jsx(Layout, null, __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Card, null, __jsx(\"p\", null, \"Price Change Magnitude in USD\"), __jsx(Doughnut, {\n    height: \"100vh\",\n    data: doughnutChartData,\n    options: doughnutChartOptions\n  }), __jsx(\"p\", null, \"Price vs Sales in USD\"), __jsx(Bar, {\n    height: \"200vh\",\n    data: lineChartData,\n    options: lineChartOptions\n  }))), __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Card, null, __jsx(\"p\", null, \"The current price level in USD\"), __jsx(HorizontalBar, {\n    height: \"220vh\",\n    data: rangeChartData,\n    options: rangeChartOptions\n  })), __jsx(Card, null, __jsx(\"h5\", null, \"Product Ranking\"), __jsx(\"p\", null, \"Rankings of products on how easily sales are affected by price change\"), __jsx(HorizontalBar, {\n    height: \"170vh\",\n    data: barChartData,\n    options: barChartOptions\n  }))));\n}","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/Country_data.js"],"names":["React","Card","Layout","HorizontalBar","Doughnut","Bar","store","getPearsonCorrelation","require","string_to_list","Country_data","date_string","localStorage","getItem","price_string","exchange_rate_string","current_level_string","correlation","date","price","exchange_rate","current_level","min_bar","max_bar","min_line","max_line","includes","get","Math","min","apply","max","console","log","r","parseInt","abs","parseFloat","doughnut","leve_num1","leve_num3","leve_num2","color","text","doughnutChartData","labels","datasets","backgroundColor","borderColor","borderWidth","data","doughnutChartOptions","circumference","PI","rotation","maintainAspectRatio","cutoutPercentage","tooltips","enabled","legend","display","position","align","fontSize","boxWidth","fontColor","pieceLabel","render","lineChartData","yAxisID","type","label","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","spanGaps","barPercentage","lineChartOptions","scales","yAxes","id","gridLines","ticks","xAxes","layout","padding","left","right","top","bottom","barChartData","barChartOptions","callback","value","scaleLabel","labelString","rangeChartData","stack","rangeChartOptions","stacked"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Card, Layout} from '@shopify/polaris';\nimport {HorizontalBar, Doughnut, Bar} from 'react-chartjs-2';\nimport store from 'store-js';\nconst getPearsonCorrelation = require('../functions/calc_correlation')\nconst string_to_list = require('../functions/string_to_list')\n\n\n\n\nexport default function Country_data() {  \n\n    const date_string = localStorage.getItem('date')\n    const price_string = localStorage.getItem('price')\n    const exchange_rate_string = localStorage.getItem('exchange_rate')\n    const current_level_string = localStorage.getItem('current_level')\n    const correlation = localStorage.getItem('correlation')\n\n    var date = []\n    var price = []\n    var exchange_rate = []\n    var current_level = []\n\n    var min_bar = 0\n    var max_bar = 0\n    var min_line = 0\n    var max_line = 0\n\n\n    if (date_string.includes(',')){\n        date = string_to_list(localStorage.getItem('date'),'')\n        price = string_to_list(store.get('price'),'float')\n        exchange_rate = string_to_list(store.get('exchange_rate'),'float')\n        current_level = string_to_list(store.get('current_level'),'float')\n        \n        min_bar = Math.min.apply(Math, price)*0.8\n        max_bar = (Math.max.apply(Math, price)-min_bar)*2.2+min_bar\n\n        max_line = Math.max.apply(Math, exchange_rate)\n        min_line = max_line - (max_line - Math.min.apply(Math, exchange_rate) )*2.2\n\n        console.log(\"y is \", [min_bar, max_bar, min_line, max_line])\n        \n\n    } else {\n        date = [date_string]\n        price = [price_string]\n        exchange_rate = [exchange_rate_string]\n        current_level = string_to_list(store.get('current_level'),'float')\n    }\n\n    \n\n    \n    //const level = store.get('level') \n    var r = parseInt(Math.min(Math.abs(parseFloat(correlation)), 1) * 100)\n    //r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1) * 100)\n    const doughnut = [r, 100-r]\n    \n\n    var leve_num1 = [Math.max(current_level[0]*100-2,0), Math.max(current_level[1]*100-2,0), Math.max(current_level[2]*100-2,0), Math.max(current_level[3]*100-2,0)]\n    console.log(\"level-num1 is \", leve_num1)\n    var leve_num3 = [98-leve_num1[0],98-leve_num1[1],98-leve_num1[2],98-leve_num1[3]]\n    console.log(\"level-num3 is \", leve_num3)\n    const leve_num2 = [2, 2, 2, 2]\n\n\n    \n    console.log(\"date is \", date)\n    console.log(\"price is \", price)\n    console.log(\"exchange_rate is \", exchange_rate)\n    console.log(\"current_level is \", current_level)\n    console.log(\"correlation is \", correlation)\n \n    \n    var color = ''\n    var text = ''\n    if (r < 30){\n        color = '#a2d6c4'\n        text = 'light'\n    } else if (r < 60){\n        color = '#ffa41b'\n        text = 'moderate'\n    } else {\n        color = '#FF2D00'\n        text = 'heavy'\n    }\n    \n    \n    \n    const doughnutChartData = {\n      labels: [text+': '+r],\n      datasets: [\n        {\n          //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n          backgroundColor: [color,\"#EEEEEE\"],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          data: doughnut,\n    \n        }\n      ],\n    };\n      \n    const doughnutChartOptions = {\n      circumference: 1* Math.PI,\n      rotation: Math.PI,\n      maintainAspectRatio: true,\n      cutoutPercentage:80,\n      tooltips:{\n        enabled:false,\n      },\n      legend: {\n                display: true,\n                position: 'bottom',\n                align:'center',\n                labels:{\n                    fontSize: 25,\n                    boxWidth: 0,\n                    fontColor: '#01023A'\n                }\n              },\n      pieceLabel: {\n        render: 'value' + '%',\n        fontColor: \"white\",\n      }\n      };\n    \n    var lineChartData = {\n      //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n      labels: date,\n      //lables: [price[0],price[1],price[2]],\n      datasets: [{\n        yAxisID: 'A',\n        type: \"bar\",\n        label: \"sales in store currency\",\n        fill: false,\n        lineTension: 0,\n        backgroundColor: \"#63b7af\",\n        borderColor: \"#63b7af\",\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: \"rgb(1, 2, 58)\",\n        pointBackgroundColor: \"rgb(1, 2, 58)\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10,\n        // notice the gap in the data and the spanGaps: false\n        //data: [89.54, 96.8, 246.51],\n        data: price,\n        //data: [store.get('price')],\n        spanGaps: false,\n        barPercentage: 0.3\n        },\n        {\n          yAxisID: 'B',\n          type: \"line\",\n          label: \"product price\",\n          fill: false,\n          lineTension: 0.3,\n          backgroundColor: \"#ee8572\",\n          borderColor: \"#ee8572\",\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: \"#ee8572\",\n          pointBackgroundColor: \"#ee8572\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"#ee8572\",\n          pointHoverBorderColor: \"#ee8572\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 4,\n          pointHitRadius: 10,\n          // notice the gap in the data and the spanGaps: false\n          //data: [0.8072950291, 0.8072950291, 0.8072950291],\n          data: exchange_rate,\n          //data: [store.get('exchange_rate')],\n          spanGaps: false,\n          }\n    \n      ]\n      };\n    \n    var lineChartOptions = {\n      maintainAspectRatio: true,\n      tooltips:{\n        enabled:true,\n      },\n      legend: {\n        display: false,\n      },\n      scales: {\n                yAxes:\n                [{\n                    id: 'A',\n                    type: 'linear',\n                    position: 'left',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                        min: min_bar,\n                        max: max_bar\n                    }\n    \n     \n                  }, {\n                    id: 'B',\n                    type: 'linear',\n                    position: 'right',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                        min: min_line,\n                        max: max_line\n                    }\n    \n    \n                  }],\n                xAxes: [{\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],            \n            },\n            layout: {\n              padding: {\n                  left: 0,\n                  right: 50,\n                  top: 0,\n                  bottom: 0\n              }\n          }   \n    };\n    \n    \n    const barChartData = {\n      labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP',\n                'US - Aaa Corporate Bonds', 'US - S&P 500'],\n      datasets: [\n        {\n          backgroundColor: [\"#ffa41b\", '#005082','#ff5733','#708160','#00a8cc'],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          data: [0.65, 0.50, 0.47, 0.39, 0.37]\n        }\n      ],\n    };\n    \n    const barChartOptions = {\n    \n      legend: {\n                display: false,\n              },\n    \n      scales: {\n                xAxes: [{\n                  ticks: {\n                    min: 0,\n                    max: 1,\n                    callback: function(value) {\n                        return value\n                    }\n                  },\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"Correlation Coefficient (Absolute Value)\"\n                  }\n                },],\n                yAxes: [{\n                  barPercentage: 0.3,\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],\n              },\n    };\n    \n    const rangeChartData = {\n        labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n        datasets: [\n        {\n        label: 'range',\n        backgroundColor: '#35495e',\n        stack: '3',\n        data: leve_num1,\n        },\n        {\n        backgroundColor: '#63b7af',\n        stack: '3',\n        data: leve_num2,\n        },\n        {\n          label: 'range2',\n          backgroundColor: '#35495e',\n          stack: '3',\n          data: leve_num3,\n          },\n        ],\n      };\n        \n      const rangeChartOptions = {\n        maintainAspectRatio: false,\n        tooltips:{\n          enabled:false,\n        },\n        legend: {\n                  display: false,\n                },\n        scales: {\n                  xAxes: [{\n                    stacked: true,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                      min: 0,\n                      max: 100,\n                      callback: function(value) {\n                          return value + \"%\"\n                      }\n                    }\n                  },],\n                  yAxes: [{\n                    stacked: true,\n                    barPercentage: 0.4,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                  }\n                  \n                  },],\n                },\n                layout: {\n                  padding: {\n                      left: 0,\n                      right: 30,\n                      top: 0,\n                      bottom: 0\n                  }\n              }  \n        };\n\n\n\n\n\n    return (\n\n\n            <Layout>\n            <Layout.Section oneHalf>\n            <Card>\n\n                \n                <p>Price Change Magnitude in USD</p>\n                <Doughnut\n                    height=\"100vh\"\n                    data={doughnutChartData}\n                    options={doughnutChartOptions}\n                />\n                <p>Price vs Sales in USD</p>\n                <Bar \n                  height=\"200vh\"\n                  data={lineChartData}\n                  options={lineChartOptions}\n                />\n                </Card>\n            </Layout.Section>\n            <Layout.Section oneHalf>\n            <Card>\n                <p>The current price level in USD</p>\n                <HorizontalBar \n                    height=\"220vh\"\n                    data={rangeChartData}\n                    options={rangeChartOptions}\n                    />\n            </Card>\n            <Card>\n                <h5>Product Ranking</h5>\n                <p>Rankings of products on how easily sales are affected by price change</p>\n                <HorizontalBar \n                        height=\"170vh\"\n                        data={barChartData}\n                        options={barChartOptions}\n                    />\n            </Card>\n            </Layout.Section>\n          </Layout>\n\n    );\n  }\n\n"]},"metadata":{},"sourceType":"module"}