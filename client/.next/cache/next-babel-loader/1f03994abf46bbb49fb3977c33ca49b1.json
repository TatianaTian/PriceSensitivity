{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/slicedToArray\"));\n\nvar _storeJs = _interopRequireDefault(require(\"store-js\"));\n\nvar _polaris = require(\"@shopify/polaris\");\n\nvar _bodyParser = require(\"body-parser\");\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar getPearsonCorrelation = require('./calc_correlation');\n\nvar linear_regression = require('./linear_regression');\n\nvar fetch_from_map = function fetch_from_map(select, tabs, maps, product_id_title_map, dropdown_select, product_id_price_map, fx_map) {\n  //try{\n  if (select !== 0) {\n    // fetch data for graphs\n    var selected_currency = tabs[select]['id'];\n    console.log(\"selected currency is \", selected_currency);\n    console.log(\"dropdown_select is \", dropdown_select);\n    var selected_data_all_products = maps.get(selected_currency);\n    var selected_data = selected_data_all_products.get(dropdown_select);\n    var product_price = product_id_price_map.get(dropdown_select);\n    var today_fx = fx_map.get(selected_currency);\n    console.log(\"product_price is \", product_price);\n    var product_price_list = selected_data[2].map(function (element) {\n      return Math.round(element * product_price * 100) / 100;\n    });\n    console.log(\"selected_data[1] is \", selected_data[1]);\n    console.log(\"product_price_list is \", product_price_list);\n\n    var _linear_regression = linear_regression(selected_data[1], product_price_list),\n        _linear_regression2 = (0, _slicedToArray2[\"default\"])(_linear_regression, 5),\n        regression_fx = _linear_regression2[0],\n        regression_sales = _linear_regression2[1],\n        regression_predicted_sales = _linear_regression2[2],\n        slope = _linear_regression2[3],\n        intercept = _linear_regression2[4];\n\n    console.log(\"indicated_sale is \", Math.round((today_fx * product_price * slope + intercept) * 100) / 100);\n    console.log(\"regression_fx is \", regression_fx);\n    console.log(\"regression_sales is \", regression_sales);\n    console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n    console.log(\"slope is \", slope);\n    console.log(\"intercept is \", intercept);\n    console.log(\"today_product_price is \", today_fx * product_price);\n    console.log(\"selected data is \", selected_data);\n    localStorage.setItem('date', selected_data[0]);\n    localStorage.setItem('price', selected_data[1]);\n    localStorage.setItem('exchange_rate', product_price_list);\n    localStorage.setItem('current_level', selected_data[3]);\n    localStorage.setItem('correlation', getPearsonCorrelation(selected_data[1], selected_data[2])); //localStorage.setItem('regression_fx', regression_fx);\n\n    localStorage.setItem('regression_fx', regression_fx);\n    localStorage.setItem('regression_sales', regression_sales);\n    localStorage.setItem('regression_predicted_sales', regression_predicted_sales);\n    localStorage.setItem('slope', Math.abs(slope));\n    localStorage.setItem('today_product_price', Math.round(today_fx * product_price * 100) / 100);\n    localStorage.setItem('indicated_sale', Math.round((today_fx * product_price * slope + intercept) * 100) / 100);\n    console.log(\"done storing\");\n    /*\n    console.log(\"localStorage.getItem('date') is\",localStorage.getItem('date'))\n    console.log(\"localStorage.getItem('price') is\",localStorage.getItem('price'))\n    console.log(\"localStorage.getItem('exchange_rate') is\",localStorage.getItem('exchange_rate'))*/\n    // find the product price\n    // filter options\n\n    console.log(\"selected_data_all_products is\", selected_data_all_products);\n    console.log('product_id_title_map is ', product_id_title_map);\n    var num_dates = 0;\n    var options = [];\n    var product_options = [];\n\n    var _iterator = _createForOfIteratorHelper(selected_data_all_products),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = (0, _slicedToArray2[\"default\"])(_step.value, 2),\n            key = _step$value[0],\n            value = _step$value[1];\n\n        num_dates = value[0].length;\n\n        if (num_dates > 1) {\n          var price_set = new Set(value[1]);\n          var fx_set = new Set(value[2]);\n\n          if (price_set.size > 1 && fx_set.size > 1) {\n            console.log('use key to get name ', product_id_title_map.get(key));\n            options.push({\n              label: product_id_title_map.get(key),\n              value: key\n            });\n            product_options.push(key);\n          }\n        }\n\n        console.log(key + ' = ' + value);\n      } // Find the most sensitive product\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var slope_map = new Map();\n    var slope_list = [];\n    console.log(\"product_options is \", product_options);\n\n    for (var k = 0; k < product_options.length; k++) {\n      if (product_options[k] !== 'all') {\n        var product_price_list_rank;\n\n        (function () {\n          var product_price_rank = product_id_price_map.get(product_options[k]);\n          console.log(\"product_price_rank is \", product_price_rank);\n          product_price_list_rank = selected_data_all_products.get(product_options[k])[2].map(function (element) {\n            return element * product_price_rank;\n          });\n          var slope_rank = linear_regression(selected_data_all_products.get(product_options[k])[1], product_price_list_rank)[3];\n          console.log(\"slope_rank is \", slope_rank);\n\n          if (slope_map.has(slope_rank)) {\n            var value = slope_map.get(slope_rank);\n            value.push(product_id_title_map.get(product_options[k]));\n            slope_map.set(slope_rank, value);\n          } else {\n            console.log(\"product_id_title_map is \", product_id_title_map);\n            console.log(\"product_options[k] is \", product_options[k]);\n            console.log(\"product_id_title_map.get([product_options[k]] is \", product_id_title_map.get(product_options[k]));\n            slope_map.set(slope_rank, product_id_title_map.get(product_options[k]));\n          }\n\n          slope_list.push(slope_rank);\n        })();\n      }\n    }\n\n    console.log(\"slope_map is \", slope_map);\n    slope_list.sort(function (a, b) {\n      return b - a;\n    });\n    console.log(\"slope_list is \", slope_list);\n    var product_set_rank = new Set();\n\n    for (var f = 0; f < slope_list.length; f++) {\n      var product_options_list = slope_map.get(slope_list[f]);\n      console.log(\"product_options_list is \", product_options_list);\n      product_set_rank.add(product_options_list);\n    }\n\n    console.log(\"product_set_rank is \", product_set_rank);\n    var product_array_rank = Array.from(product_set_rank);\n    localStorage.setItem('product_array_rank', product_array_rank);\n    localStorage.setItem('slope_rank', slope_list);\n    console.log(\"product_array_rank is \", product_array_rank);\n  } //} catch(err){\n  //   console.log(\"no id\")\n  //}\n\n\n  return options;\n};\n\nmodule.exports = fetch_from_map;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/fetch_from_map.js"],"names":["getPearsonCorrelation","require","linear_regression","fetch_from_map","select","tabs","maps","product_id_title_map","dropdown_select","product_id_price_map","fx_map","selected_currency","console","log","selected_data_all_products","get","selected_data","product_price","today_fx","product_price_list","map","element","Math","round","regression_fx","regression_sales","regression_predicted_sales","slope","intercept","localStorage","setItem","abs","num_dates","options","product_options","key","value","length","price_set","Set","fx_set","size","push","label","slope_map","Map","slope_list","k","product_price_list_rank","product_price_rank","slope_rank","has","set","sort","a","b","product_set_rank","f","product_options_list","add","product_array_rank","Array","from","module","exports"],"mappings":"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","sourcesContent":["import store from 'store-js';\nimport { KeypressListener } from '@shopify/polaris';\nimport { json } from 'body-parser';\n\nconst getPearsonCorrelation = require('./calc_correlation')\nconst linear_regression = require('./linear_regression')\n\nconst fetch_from_map = (select, tabs, maps, product_id_title_map, dropdown_select, product_id_price_map, fx_map) => {\n\n\n    //try{\n        \n        if (select !== 0){\n            // fetch data for graphs\n            const selected_currency = tabs[select]['id']\n            console.log(\"selected currency is \", selected_currency)\n            console.log(\"dropdown_select is \", dropdown_select)\n\n\n            const selected_data_all_products = maps.get(selected_currency)\n            const selected_data = selected_data_all_products.get(dropdown_select)\n            const product_price = product_id_price_map.get(dropdown_select)\n            const today_fx = fx_map.get(selected_currency)\n            console.log(\"product_price is \", product_price)\n\n            var product_price_list = selected_data[2].map(function(element) {\n                return Math.round(element*product_price*100)/100;\n            });\n\n            console.log(\"selected_data[1] is \", selected_data[1]);\n            console.log(\"product_price_list is \", product_price_list);\n            const [regression_fx, regression_sales, regression_predicted_sales, slope, intercept] = linear_regression(selected_data[1],product_price_list)\n\n   \n            console.log(\"indicated_sale is \", Math.round((today_fx*product_price*slope+intercept)*100)/100);\n            console.log(\"regression_fx is \", regression_fx);\n            console.log(\"regression_sales is \", regression_sales);\n            console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n            console.log(\"slope is \", slope);\n            console.log(\"intercept is \", intercept)\n            console.log(\"today_product_price is \", today_fx*product_price);\n            console.log(\"selected data is \", selected_data)\n\n            localStorage.setItem('date', selected_data[0]);\n            localStorage.setItem('price', selected_data[1]);\n            localStorage.setItem('exchange_rate', product_price_list);\n            localStorage.setItem('current_level', selected_data[3]);\n            localStorage.setItem('correlation', getPearsonCorrelation(selected_data[1],selected_data[2]));\n            //localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_sales', regression_sales);\n            localStorage.setItem('regression_predicted_sales', regression_predicted_sales);\n            localStorage.setItem('slope', Math.abs(slope));\n            localStorage.setItem('today_product_price', Math.round(today_fx*product_price*100)/100);\n            localStorage.setItem('indicated_sale', Math.round((today_fx*product_price*slope+intercept)*100)/100);\n\n            console.log(\"done storing\")\n            /*\n            console.log(\"localStorage.getItem('date') is\",localStorage.getItem('date'))\n            console.log(\"localStorage.getItem('price') is\",localStorage.getItem('price'))\n            console.log(\"localStorage.getItem('exchange_rate') is\",localStorage.getItem('exchange_rate'))*/\n\n            // find the product price\n\n\n\n\n\n\n\n            // filter options\n            console.log(\"selected_data_all_products is\",selected_data_all_products)\n            console.log('product_id_title_map is ', product_id_title_map)\n            var num_dates = 0\n            var options = []\n            var product_options = []\n            for (let [key, value] of selected_data_all_products) {\n                num_dates = value[0].length\n                if (num_dates>1){\n                    var price_set = new Set(value[1]);\n                    var fx_set = new Set(value[2]);\n                    if (price_set.size>1 && fx_set.size>1){\n                        console.log('use key to get name ', product_id_title_map.get(key))\n                        options.push(\n                            {\n                                label:product_id_title_map.get(key), value: key\n                            }\n                        )\n                        product_options.push(key)\n                    }\n                }\n                console.log(key + ' = ' + value)\n            }\n\n            // Find the most sensitive product\n            let slope_map = new Map()\n            var slope_list = []\n\n            console.log(\"product_options is \", product_options)\n\n            for (var k=0; k<product_options.length; k++){\n                if (product_options[k] !== 'all'){\n                    const product_price_rank = product_id_price_map.get(product_options[k])\n                    console.log(\"product_price_rank is \", product_price_rank)\n                    \n                    var product_price_list_rank = selected_data_all_products.get(product_options[k])[2].map(function(element) {\n                        return element*product_price_rank;\n                    });\n    \n                    const slope_rank = linear_regression(selected_data_all_products.get(product_options[k])[1],product_price_list_rank)[3]\n    \n                    console.log(\"slope_rank is \", slope_rank)\n    \n                    if (slope_map.has(slope_rank)){\n                        const value = slope_map.get(slope_rank)\n                        value.push(product_id_title_map.get(product_options[k]))\n                        slope_map.set(slope_rank, value)\n                    } else {\n                        \n                        console.log(\"product_id_title_map is \", product_id_title_map)\n                        console.log(\"product_options[k] is \", product_options[k])\n                        console.log(\"product_id_title_map.get([product_options[k]] is \", product_id_title_map.get(product_options[k]))\n                        \n                        slope_map.set(slope_rank, product_id_title_map.get(product_options[k]))\n                    }\n                    slope_list.push(slope_rank)\n                }\n            }\n\n            console.log(\"slope_map is \", slope_map)\n            slope_list.sort(function(a, b){return b-a});\n            console.log(\"slope_list is \", slope_list)\n\n            const product_set_rank = new Set();\n            for (var f=0;f<slope_list.length;f++){\n                const product_options_list = slope_map.get(slope_list[f])\n                console.log(\"product_options_list is \", product_options_list)\n                product_set_rank.add(product_options_list)\n            }\n\n            console.log(\"product_set_rank is \", product_set_rank)\n\n            let product_array_rank = Array.from(product_set_rank);\n            localStorage.setItem('product_array_rank', product_array_rank);\n            localStorage.setItem('slope_rank', slope_list);\n\n            console.log(\"product_array_rank is \", product_array_rank)\n        }\n\n        \n\n\n\n    //} catch(err){\n     //   console.log(\"no id\")\n    //}\n    \n    return options\n}\n\nmodule.exports = fetch_from_map; \n\n"]},"metadata":{},"sourceType":"script"}