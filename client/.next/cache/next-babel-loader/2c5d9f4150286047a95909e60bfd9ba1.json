{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\n// import \nvar position = require('./positionGenerator'); //let insertDoc = require('../mongotest')\n\n\nvar MongoClient = require('mongodb').MongoClient;\n\nvar store = require('/Users/tatianatian/Desktop/Startup/shopify_app/node_modules/store-js/dist/store.legacy');\n\nfunction request_bid_ask(buyer_currency) {\n  // user asks for quote: collect buyer/seller currencies and units from Shopify\n  //var buyer_currency = 'GBP';\n  var seller_currency = 'USD'; // connect to ONADA\n\n  var common = require('./lib/common');\n\n  var config = require('./lib/config'); //let conf = new config.Config(argv.config);\n\n\n  var conf = new config.Config();\n  var ctx = conf.createContext();\n  var price = ''; // generate the trading direction\n\n  var _position$positionInd = position.positionIndicator(buyer_currency, seller_currency),\n      _position$positionInd2 = _slicedToArray(_position$positionInd, 2),\n      trade_direction = _position$positionInd2[0],\n      currency_pair = _position$positionInd2[1];\n\n  if (trade_direction === 'buy') {\n    account = conf.buyAccount;\n  } else if (trade_direction === 'sell') {\n    account = conf.sellAccount;\n  } // request prices\n\n\n  ctx.pricing.get(account, {\n    instruments: currency_pair\n  }, function (response) {\n    var obj = JSON.parse(response['rawBody']);\n\n    if (trade_direction === \"buy\") {\n      price = obj.prices[0].asks;\n      indicate_trade_price = price[0].price;\n      indicate_locked_rate = indicate_trade_price * 1.005;\n    } else if (trade_direction === \"sell\") {\n      price = obj.prices[0].bids;\n      indicate_trade_price = price[0].price;\n      indicate_locked_rate = indicate_trade_price * 0.99;\n    } // solution 1: write data to mongoDB\n    //insertDoc.insertDoc(indicate_locked_rate)\n    // solution 2: write to LocalStorage\n\n\n    store.set('user', {\n      name: 'Amy',\n      quote: indicate_locked_rate\n    }); // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n  });\n}\n\nexports.request_bid_ask = request_bid_ask; //request_bid_ask();","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_app/trade/trades/src/request_bid_ask.js"],"names":["position","require","MongoClient","store","request_bid_ask","buyer_currency","seller_currency","common","config","conf","Config","ctx","createContext","price","positionIndicator","trade_direction","currency_pair","account","buyAccount","sellAccount","pricing","get","instruments","response","obj","JSON","parse","prices","asks","indicate_trade_price","indicate_locked_rate","bids","set","name","quote","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB,C,CACA;;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,WAAvC;;AACA,IAAIC,KAAK,GAAGF,OAAO,CAAC,wFAAD,CAAnB;;AAEA,SAASG,eAAT,CAAyBC,cAAzB,EAAwC;AACpC;AACA;AACA,MAAIC,eAAe,GAAG,KAAtB,CAHoC,CAKpC;;AACA,MAAIC,MAAM,GAAGN,OAAO,CAAC,cAAD,CAApB;;AACA,MAAIO,MAAM,GAAGP,OAAO,CAAC,cAAD,CAApB,CAPoC,CASpC;;;AACA,MAAIQ,IAAI,GAAG,IAAID,MAAM,CAACE,MAAX,EAAX;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,aAAL,EAAV;AACA,MAAIC,KAAK,GAAG,EAAZ,CAZoC,CAcpC;;AAdoC,8BAeGb,QAAQ,CAACc,iBAAT,CAA2BT,cAA3B,EAA0CC,eAA1C,CAfH;AAAA;AAAA,MAe/BS,eAf+B;AAAA,MAedC,aAfc;;AAgBpC,MAAID,eAAe,KAAK,KAAxB,EAA8B;AAC1BE,IAAAA,OAAO,GAAGR,IAAI,CAACS,UAAf;AACH,GAFD,MAGK,IAAIH,eAAe,KAAK,MAAxB,EAA+B;AAChCE,IAAAA,OAAO,GAAGR,IAAI,CAACU,WAAf;AACH,GArBmC,CAuBpC;;;AACAR,EAAAA,GAAG,CAACS,OAAJ,CAAYC,GAAZ,CACIJ,OADJ,EAEI;AACIK,IAAAA,WAAW,EAAEN;AADjB,GAFJ,EAMI,UAACO,QAAD,EAAc;AACV,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAAC,SAAD,CAAnB,CAAV;;AACA,QAAIR,eAAe,KAAK,KAAxB,EAA8B;AAC1BF,MAAAA,KAAK,GAAGW,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,IAAtB;AACAC,MAAAA,oBAAoB,GAAGhB,KAAK,CAAC,CAAD,CAAL,CAASA,KAAhC;AACAiB,MAAAA,oBAAoB,GAAID,oBAAoB,GAAG,KAA/C;AACH,KAJD,MAKK,IAAId,eAAe,KAAK,MAAxB,EAA+B;AAChCF,MAAAA,KAAK,GAAGW,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcI,IAAtB;AACAF,MAAAA,oBAAoB,GAAGhB,KAAK,CAAC,CAAD,CAAL,CAASA,KAAhC;AACAiB,MAAAA,oBAAoB,GAAID,oBAAoB,GAAG,IAA/C;AACH,KAXS,CAaV;AACA;AACA;;;AACA1B,IAAAA,KAAK,CAAC6B,GAAN,CAAU,MAAV,EAAkB;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAEJ;AAAtB,KAAlB,EAhBU,CAmBV;AACH,GA1BL;AA6BH;;AAEDK,OAAO,CAAC/B,eAAR,GAA0BA,eAA1B,C,CACA","sourcesContent":["// import \nlet position = require('./positionGenerator');\n//let insertDoc = require('../mongotest')\nconst MongoClient = require('mongodb').MongoClient;\nlet store = require('/Users/tatianatian/Desktop/Startup/shopify_app/node_modules/store-js/dist/store.legacy')\n\nfunction request_bid_ask(buyer_currency){\n    // user asks for quote: collect buyer/seller currencies and units from Shopify\n    //var buyer_currency = 'GBP';\n    var seller_currency = 'USD';\n\n    // connect to ONADA\n    let common = require('./lib/common');\n    let config = require('./lib/config');    \n\n    //let conf = new config.Config(argv.config);\n    let conf = new config.Config();\n    let ctx = conf.createContext();\n    var price = '';\n\n    // generate the trading direction\n    var [trade_direction, currency_pair] = position.positionIndicator(buyer_currency,seller_currency);\n    if (trade_direction === 'buy'){\n        account = conf.buyAccount\n    }\n    else if (trade_direction === 'sell'){\n        account = conf.sellAccount\n    }\n\n    // request prices\n    ctx.pricing.get(\n        account,\n        {\n            instruments: currency_pair,\n        },\n\n        (response) => {\n            var obj = JSON.parse(response['rawBody']);\n            if (trade_direction === \"buy\"){\n                price = obj.prices[0].asks\n                indicate_trade_price = price[0].price\n                indicate_locked_rate =  indicate_trade_price * 1.005\n            }\n            else if (trade_direction === \"sell\"){\n                price = obj.prices[0].bids\n                indicate_trade_price = price[0].price\n                indicate_locked_rate =  indicate_trade_price * 0.99\n            }\n\n            // solution 1: write data to mongoDB\n            //insertDoc.insertDoc(indicate_locked_rate)\n            // solution 2: write to LocalStorage\n            store.set('user', { name: 'Amy', quote: indicate_locked_rate })\n\n\n            // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n        }\n    )\n    \n}\n\nexports.request_bid_ask = request_bid_ask\n//request_bid_ask();\n\n  "]},"metadata":{},"sourceType":"script"}