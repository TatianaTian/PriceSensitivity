{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { memo } from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nconst colorScale = scaleLinear().domain([0.29, 0.68]).range([\"#ffedea\", \"#ff5233\"]);\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then(data => {\n      setData(data);\n    });\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    }\n  }, __jsx(ZoomableGroup, null, __jsx(Geographies, {\n    geography: geoUrl\n  }, ({\n    geographies\n  }) => geographies.map(geo => {\n    const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n    return;\n\n    __jsx(Geography, {\n      key: geo.rsmKey,\n      geography: geo,\n      fill: d ? colorScale(d[\"2017\"]) : \"#F5F4F6\",\n      onMouseEnter: () => {\n        const {\n          NAME,\n          POP_EST\n        } = geo.properties;\n        setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n      },\n      onMouseLeave: () => {\n        setTooltipContent(\"\");\n      },\n      style: {\n        default: {\n          fill: \"#D6D6DA\",\n          outline: \"none\"\n        },\n        hover: {\n          fill: \"#F53\",\n          outline: \"none\"\n        },\n        pressed: {\n          fill: \"#E42\",\n          outline: \"none\"\n        }\n      }\n    });\n  })))));\n};\n\nexport default memo(MapChart);","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/MapChart.js"],"names":["React","memo","scaleLinear","ZoomableGroup","ComposableMap","Geographies","Geography","geoUrl","colorScale","domain","range","rounded","num","Math","round","MapChart","setTooltipContent","data","setData","useState","useEffect","csv","then","scale","geographies","map","geo","d","find","s","ISO3","properties","ISO_A3","rsmKey","NAME","POP_EST","default","fill","outline","hover","pressed"],"mappings":"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","sourcesContent":["import React, { memo } from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffedea\", \"#ff5233\"]);\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({ setTooltipContent }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then(data => {\n      setData(data);\n    });\n  }, []);\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => {\n                const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n                return\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n                })\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}