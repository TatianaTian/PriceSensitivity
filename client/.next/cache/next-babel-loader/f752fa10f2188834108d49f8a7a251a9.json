{"ast":null,"code":"const getPearsonCorrelation = require('./calc_correlation');\n\nconst price_sensitive_market = (tabs, maps) => {\n  //let myMap = new Map();\n  var elasticity_list = []; //console.log(\"all list is \", alllist)\n\n  for (var i = 1; i < tabs.length; i++) {\n    const selected_currency = tabs[i]['id'];\n    const selected_data_all_products = maps.get(selected_currency);\n    const selected_data = selected_data_all_products.get('all');\n    var product_price_list = selected_data[2].map(function (element) {\n      return Math.round(element * product_price * 100) / 100;\n    });\n    const slope = linear_regression(selected_data[1], product_price_list)[3];\n    const elasticity = price_elasticity(selected_data[1], product_price_list, Math.abs(slope));\n\n    if (myMap.has(elasticity)) {\n      var value = myMap.get(elasticity);\n      value.push(selected_currency);\n      myMap.set(elasticity, value);\n    } else {\n      myMap.set(elasticity, [selected_currency]);\n    }\n\n    elasticity_list.push(elasticity);\n  }\n\n  elasticity_list.sort(function (a, b) {\n    return b - a;\n  });\n  var currency_rank = [];\n\n  for (var j = 1; j < tabs.length; j++) {\n    var currency = elasticity_list[j];\n\n    if (!currency_rank.includes(currency[0])) {\n      currency_rank.push(currency);\n    }\n  }\n\n  localStorage.setItem('currency_elasticity_rank', currency_rank);\n};\n\nmodule.exports = price_sensitive_market;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/price_sensitive_market.js"],"names":["getPearsonCorrelation","require","price_sensitive_market","tabs","maps","elasticity_list","i","length","selected_currency","selected_data_all_products","get","selected_data","product_price_list","map","element","Math","round","product_price","slope","linear_regression","elasticity","price_elasticity","abs","myMap","has","value","push","set","sort","a","b","currency_rank","j","currency","includes","localStorage","setItem","module","exports"],"mappings":"AAAA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,oBAAD,CAArC;;AAEA,MAAMC,sBAAsB,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC3C;AACA,MAAIC,eAAe,GAAG,EAAtB,CAF2C,CAG3C;;AAGA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACH,IAAI,CAACI,MAApB,EAA2BD,CAAC,EAA5B,EAA+B;AAC3B,UAAME,iBAAiB,GAAGL,IAAI,CAACG,CAAD,CAAJ,CAAQ,IAAR,CAA1B;AACA,UAAMG,0BAA0B,GAAGL,IAAI,CAACM,GAAL,CAASF,iBAAT,CAAnC;AACA,UAAMG,aAAa,GAAGF,0BAA0B,CAACC,GAA3B,CAA+B,KAA/B,CAAtB;AACA,QAAIE,kBAAkB,GAAGD,aAAa,CAAC,CAAD,CAAb,CAAiBE,GAAjB,CAAqB,UAASC,OAAT,EAAkB;AAC5D,aAAOC,IAAI,CAACC,KAAL,CAAWF,OAAO,GAACG,aAAR,GAAsB,GAAjC,IAAsC,GAA7C;AACH,KAFwB,CAAzB;AAGA,UAAMC,KAAK,GAAGC,iBAAiB,CAACR,aAAa,CAAC,CAAD,CAAd,EAAkBC,kBAAlB,CAAjB,CAAuD,CAAvD,CAAd;AACA,UAAMQ,UAAU,GAAGC,gBAAgB,CAACV,aAAa,CAAC,CAAD,CAAd,EAAmBC,kBAAnB,EAAuCG,IAAI,CAACO,GAAL,CAASJ,KAAT,CAAvC,CAAnC;;AAEA,QAAIK,KAAK,CAACC,GAAN,CAAUJ,UAAV,CAAJ,EAA0B;AACtB,UAAIK,KAAK,GAAGF,KAAK,CAACb,GAAN,CAAUU,UAAV,CAAZ;AACAK,MAAAA,KAAK,CAACC,IAAN,CAAWlB,iBAAX;AACAe,MAAAA,KAAK,CAACI,GAAN,CAAUP,UAAV,EAAsBK,KAAtB;AACH,KAJD,MAIK;AACDF,MAAAA,KAAK,CAACI,GAAN,CAAUP,UAAV,EAAsB,CAACZ,iBAAD,CAAtB;AACH;;AACDH,IAAAA,eAAe,CAACqB,IAAhB,CAAqBN,UAArB;AACH;;AAEDf,EAAAA,eAAe,CAACuB,IAAhB,CAAqB,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAAC,WAAOA,CAAC,GAACD,CAAT;AAAW,GAA/C;AACA,MAAIE,aAAa,GAAG,EAApB;;AAEA,OAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC7B,IAAI,CAACI,MAApB,EAA2ByB,CAAC,EAA5B,EAA+B;AAC3B,QAAIC,QAAQ,GAAG5B,eAAe,CAAC2B,CAAD,CAA9B;;AACA,QAAI,CAACD,aAAa,CAACG,QAAd,CAAuBD,QAAQ,CAAC,CAAD,CAA/B,CAAL,EAAyC;AACrCF,MAAAA,aAAa,CAACL,IAAd,CAAmBO,QAAnB;AACH;AACJ;;AACDE,EAAAA,YAAY,CAACC,OAAb,CAAqB,0BAArB,EAAiDL,aAAjD;AACH,CApCD;;AAsCAM,MAAM,CAACC,OAAP,GAAiBpC,sBAAjB","sourcesContent":["const getPearsonCorrelation = require('./calc_correlation')\n\nconst price_sensitive_market = (tabs, maps) => {\n    //let myMap = new Map();\n    var elasticity_list = []\n    //console.log(\"all list is \", alllist)\n\n\n    for (var i=1;i<tabs.length;i++){\n        const selected_currency = tabs[i]['id']\n        const selected_data_all_products = maps.get(selected_currency)\n        const selected_data = selected_data_all_products.get('all')\n        var product_price_list = selected_data[2].map(function(element) {\n            return Math.round(element*product_price*100)/100;\n        });\n        const slope = linear_regression(selected_data[1],product_price_list)[3]\n        const elasticity = price_elasticity(selected_data[1], product_price_list, Math.abs(slope))\n        \n        if (myMap.has(elasticity)){\n            var value = myMap.get(elasticity)\n            value.push(selected_currency)\n            myMap.set(elasticity, value)\n        }else{\n            myMap.set(elasticity, [selected_currency])\n        }\n        elasticity_list.push(elasticity)\n    }\n\n    elasticity_list.sort(function(a, b){return b-a});\n    var currency_rank = []\n\n    for (var j=1;j<tabs.length;j++){\n        var currency = elasticity_list[j]\n        if (!currency_rank.includes(currency[0])){\n            currency_rank.push(currency)\n        }\n    }\n    localStorage.setItem('currency_elasticity_rank', currency_rank);\n}\n\nmodule.exports = price_sensitive_market; "]},"metadata":{},"sourceType":"script"}