{"ast":null,"code":"const linear_regression = require('./linear_regression');\n\nconst price_elasticity = require('./price_elasticity');\n\nconst price_sensitive_market = (tabs, maps) => {\n  let myMap = new Map(); //try{\n\n  var elasticity_list = [];\n  console.log(\"tabs.length is \", tabs);\n  console.log(\"maps is \", maps);\n\n  for (var i = 1; i < tabs.length; i++) {\n    const selected_currency = tabs[i]['id'];\n    console.log(\"selected_currency is \", selected_currency);\n    const selected_data_all_products = maps.get(selected_currency);\n    const selected_data = selected_data_all_products.get('all');\n    const product_price = 100;\n    var product_price_list = selected_data[2].map(function (element) {\n      return Math.round(element * product_price * 100) / 100;\n    });\n\n    if (selected_data[1].length > 1) {\n      console.log(\"selected_data[1] is \", selected_data[1]);\n      console.log(\"product_price_list is \", product_price_list);\n      const slope = linear_regression(selected_data[1], product_price_list)[3];\n      console.log(\"slope is \", slope);\n      const elasticity = price_elasticity(selected_data[1], product_price_list, Math.abs(slope));\n      console.log(\"elasticity is \", elasticity);\n\n      if (myMap.has(elasticity)) {\n        console.log(\"myMap has elasticity\");\n        var value = myMap.get(elasticity);\n        value.push(selected_currency);\n        myMap.set(elasticity, value);\n      } else {\n        console.log(\"myMap doesn't have elasticity\");\n        console.log(\"[selected_currency] is \", selected_currency);\n        myMap.set(elasticity, [selected_currency]);\n      }\n\n      elasticity_list.push(elasticity);\n    }\n  }\n\n  elasticity_list.sort(function (a, b) {\n    return a - b;\n  });\n  console.log(\"elasticity_list is \", elasticity_list);\n  var currency_rank = [];\n\n  for (var j = 0; j < elasticity_list.length; j++) {\n    var elasticity_element = elasticity_list[j];\n    console.log(\"myMap.get(elasticity_element) is \", myMap.get(elasticity_element));\n\n    if (!currency_rank.includes(myMap.get(elasticity_element)[0])) {\n      console.log(\"myMap.get(elasticity_element).length is \", myMap.get(elasticity_element).length);\n\n      for (var k = 0; k < myMap.get(elasticity_element).length; k++) {\n        currency_rank.push(myMap.get(elasticity_element)[k]);\n      }\n    }\n  }\n\n  console.log(\"currency_rank is \", currency_rank); //localStorage.setItem('currency_elasticity_rank', currency_rank);\n\n  return currency_rank; //} catch (error){\n  // console.log(\"error in price sensitive market\")\n  //}\n};\n\nmodule.exports = price_sensitive_market;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/price_sensitive_market.js"],"names":["linear_regression","require","price_elasticity","price_sensitive_market","tabs","maps","myMap","Map","elasticity_list","console","log","i","length","selected_currency","selected_data_all_products","get","selected_data","product_price","product_price_list","map","element","Math","round","slope","elasticity","abs","has","value","push","set","sort","a","b","currency_rank","j","elasticity_element","includes","k","module","exports"],"mappings":"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","sourcesContent":["const linear_regression = require('./linear_regression')\nconst price_elasticity = require('./price_elasticity')\n\nconst price_sensitive_market = (tabs, maps) => {\n    let myMap = new Map();\n    //try{\n    var elasticity_list = []\n    console.log(\"tabs.length is \", tabs)\n    console.log(\"maps is \", maps)\n\n\n    for (var i=1;i<tabs.length;i++){\n        const selected_currency = tabs[i]['id']\n        console.log(\"selected_currency is \", selected_currency)\n\n        const selected_data_all_products = maps.get(selected_currency)\n        const selected_data = selected_data_all_products.get('all')\n        const product_price = 100\n        var product_price_list = selected_data[2].map(function(element) {\n            return Math.round(element*product_price*100)/100;\n        });\n\n        if (selected_data[1].length>1){\n            console.log(\"selected_data[1] is \", selected_data[1])\n            console.log(\"product_price_list is \", product_price_list)\n            const slope = linear_regression(selected_data[1],product_price_list)[3]\n    \n            console.log(\"slope is \", slope)\n    \n            const elasticity = price_elasticity(selected_data[1], product_price_list, Math.abs(slope))\n    \n            console.log(\"elasticity is \", elasticity)\n            \n            if (myMap.has(elasticity)){\n                console.log(\"myMap has elasticity\")\n                var value = myMap.get(elasticity)\n                value.push(selected_currency)\n                myMap.set(elasticity, value)\n            }else{\n                console.log(\"myMap doesn't have elasticity\")\n                console.log(\"[selected_currency] is \", selected_currency)\n                myMap.set(elasticity, [selected_currency])\n            }\n            elasticity_list.push(elasticity)\n        }\n    }\n\n    elasticity_list.sort(function(a, b){return a-b});\n\n    console.log(\"elasticity_list is \", elasticity_list)\n\n    var currency_rank = []\n\n    for (var j=0;j<elasticity_list.length;j++){\n        var elasticity_element = elasticity_list[j]\n        console.log(\"myMap.get(elasticity_element) is \", myMap.get(elasticity_element))\n        if (!currency_rank.includes(myMap.get(elasticity_element)[0])){\n            console.log(\"myMap.get(elasticity_element).length is \", myMap.get(elasticity_element).length)\n            for (var k=0; k<myMap.get(elasticity_element).length;k++){\n                currency_rank.push(myMap.get(elasticity_element)[k])\n            }\n            \n        }\n    }\n\n    console.log(\"currency_rank is \", currency_rank)\n\n    //localStorage.setItem('currency_elasticity_rank', currency_rank);\n    return currency_rank\n //} catch (error){\n   // console.log(\"error in price sensitive market\")\n    //}\n}\n\nmodule.exports = price_sensitive_market; "]},"metadata":{},"sourceType":"script"}