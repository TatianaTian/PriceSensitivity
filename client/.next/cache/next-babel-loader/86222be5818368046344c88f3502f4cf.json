{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar jsregression = require('js-regression');\n\nvar linear_regression = function linear_regression(sales, exchange_rate) {\n  var _reformat_data = reformat_data(sales, exchange_rate),\n      _reformat_data2 = _slicedToArray(_reformat_data, 3),\n      myMap = _reformat_data2[0],\n      exchange_rate_round = _reformat_data2[1],\n      sales_round = _reformat_data2[2]; //console.log(\"data is \", data)\n\n\n  var _findLineByLeastSquar = findLineByLeastSquares(exchange_rate_round, sales_round),\n      _findLineByLeastSquar2 = _slicedToArray(_findLineByLeastSquar, 2),\n      m = _findLineByLeastSquar2[0],\n      b = _findLineByLeastSquar2[1];\n  /*\n  var regression = new jsregression.LinearRegression(  {alpha: 0.001, // \n      iterations: 300,\n      lambda: 0.0});\n  console.log(\"here\")\n  var model = regression.fit(data);\n  */\n\n\n  var myMap2 = new Map();\n  myMap2 = myMap; // sort exchange rate\n\n  exchange_rate_round.sort(function (a, b) {\n    return a - b;\n  });\n  var regression_fx = [];\n  var regression_sales = [];\n  var regression_predicted_sales = [];\n\n  for (j = 0; j < exchange_rate_round.length; j++) {\n    regression_fx.push(exchange_rate_round[j]);\n    regression_sales.push(myMap2.get(exchange_rate_round[j]));\n    regression_predicted_sales.push(m * exchange_rate_round[j] + b);\n    console.log(\"predicted number is \", m * exchange_rate_round[j] + b);\n  }\n\n  console.log(\"m is \", m);\n  console.log(\"b is \", b);\n  return [regression_fx, regression_sales, regression_predicted_sales, Math.abs(Math.round(m * 100) / 100)];\n};\n\nfunction reformat_data(sales, exchange_rate) {\n  var round_sales;\n  var exchange_rate_round = [];\n  var sales_round = [];\n  var myMap = new Map();\n\n  for (i = 0; i < exchange_rate.length; i++) {\n    var round_fx = Math.round(100 * exchange_rate[i]) / 100;\n\n    if (myMap.has(round_fx)) {\n      var sales_list = myMap.get(round_fx);\n      round_sales = Math.round(100 * sales[i]) / 100;\n      sales_list.push(round_sales);\n      myMap.set(round_fx, sales_list);\n    }\n\n    round_sales = Math.round(100 * sales[i]) / 100;\n    myMap.set(round_fx, [round_sales]);\n  }\n\n  var _iterator = _createForOfIteratorHelper(myMap),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          k = _step$value[0],\n          v = _step$value[1];\n\n      var sum = v.reduce(function (previous, current) {\n        return current += previous;\n      });\n      var avg = sum / v.length;\n      sales_round.push(avg);\n      exchange_rate_round.push(k);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return [myMap, exchange_rate_round, sales_round];\n}\n\nmodule.exports = linear_regression;\n\nfunction findLineByLeastSquares(values_x, values_y) {\n  var x_sum = 0;\n  var y_sum = 0;\n  var xy_sum = 0;\n  var xx_sum = 0;\n  var count = 0;\n  /*\n   * The above is just for quick access, makes the program faster\n   */\n\n  var x = 0;\n  var y = 0;\n  var values_length = values_x.length;\n\n  if (values_length != values_y.length) {\n    throw new Error('The parameters values_x and values_y need to have same size!');\n  }\n  /*\n   * Above and below cover edge cases\n   */\n\n\n  if (values_length === 0) {\n    return [[], []];\n  }\n  /*\n   * Calculate the sum for each of the parts necessary.\n   */\n\n\n  for (var _i = 0; _i < values_length; _i++) {\n    x = values_x[_i];\n    y = values_y[_i];\n    x_sum += x;\n    y_sum += y;\n    xx_sum += x * x;\n    xy_sum += x * y;\n    count++;\n  }\n  /*\n   * Calculate m and b for the line equation:\n   * y = x * m + b\n   */\n\n\n  var m = (count * xy_sum - x_sum * y_sum) / (count * xx_sum - x_sum * x_sum);\n  var b = y_sum / count - m * x_sum / count;\n  /*\n   * We then return the x and y data points according to our fit\n   */\n\n  var result_values_x = [];\n  var result_values_y = [];\n\n  for (var _i2 = 0; _i2 < values_length; _i2++) {\n    x = values_x[_i2];\n    y = x * m + b;\n    result_values_x.push(x);\n    result_values_y.push(y);\n  }\n\n  console.log(result_values_x);\n  console.log(result_values_y);\n  return [m, b];\n}\n\nfindLineByLeastSquares([0.921, 0.922, 0.926], [209.8, 555.4, 93.56]); //linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/linear_regression.js"],"names":["jsregression","require","linear_regression","sales","exchange_rate","reformat_data","myMap","exchange_rate_round","sales_round","findLineByLeastSquares","m","b","myMap2","Map","sort","a","regression_fx","regression_sales","regression_predicted_sales","j","length","push","get","console","log","Math","abs","round","round_sales","i","round_fx","has","sales_list","set","k","v","sum","reduce","previous","current","avg","module","exports","values_x","values_y","x_sum","y_sum","xy_sum","xx_sum","count","x","y","values_length","Error","result_values_x","result_values_y"],"mappings":"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","sourcesContent":["var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate)=>{\n    \n    var [myMap, exchange_rate_round, sales_round] = reformat_data(sales, exchange_rate)\n    //console.log(\"data is \", data)\n    const [m, b] = findLineByLeastSquares(exchange_rate_round, sales_round)\n    /*\n    var regression = new jsregression.LinearRegression(  {alpha: 0.001, // \n        iterations: 300,\n        lambda: 0.0});\n    console.log(\"here\")\n    var model = regression.fit(data);\n    */\n    let myMap2 = new Map();\n    myMap2 = myMap\n\n    // sort exchange rate\n    exchange_rate_round.sort(function(a, b){return a-b});\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    \n    for (j=0;j<exchange_rate_round.length;j++){\n        regression_fx.push(exchange_rate_round[j])\n        regression_sales.push(myMap2.get(exchange_rate_round[j]))\n        \n        regression_predicted_sales.push(m*exchange_rate_round[j]+b)\n        console.log(\"predicted number is \", m*exchange_rate_round[j]+b)\n    }\n    console.log(\"m is \",m)\n    console.log(\"b is \",b)\n    return [regression_fx, regression_sales, regression_predicted_sales, Math.abs(Math.round(m*100)/100)]\n}\n\nfunction reformat_data(sales, exchange_rate){\n    var round_sales\n    const exchange_rate_round = []\n    const sales_round = []\n    let myMap = new Map()\n    for (i=0;i<exchange_rate.length;i++){\n        var round_fx = Math.round(100*exchange_rate[i])/100;\n        if (myMap.has(round_fx)){\n            var sales_list = myMap.get(round_fx)\n            round_sales = Math.round(100*sales[i])/100;\n            sales_list.push(round_sales)\n            myMap.set(round_fx,sales_list)\n        }\n        round_sales = Math.round(100*sales[i])/100;\n        myMap.set(round_fx,[round_sales])\n    }\n    for (let [k, v] of myMap) {\n        let sum = v.reduce((previous, current) => current += previous);\n        let avg = sum / v.length;\n        sales_round.push(avg)\n        exchange_rate_round.push(k)\n    }\n\n    return [myMap, exchange_rate_round, sales_round]\n}\n \nmodule.exports = linear_regression; \n\n\nfunction findLineByLeastSquares(values_x, values_y) {\n    var x_sum = 0;\n    var y_sum = 0;\n    var xy_sum = 0;\n    var xx_sum = 0;\n    var count = 0;\n\n    /*\n     * The above is just for quick access, makes the program faster\n     */\n    var x = 0;\n    var y = 0;\n    var values_length = values_x.length;\n\n    if (values_length != values_y.length) {\n        throw new Error('The parameters values_x and values_y need to have same size!');\n    }\n\n    /*\n     * Above and below cover edge cases\n     */\n    if (values_length === 0) {\n        return [ [], [] ];\n    }\n\n    /*\n     * Calculate the sum for each of the parts necessary.\n     */\n    for (let i = 0; i< values_length; i++) {\n        x = values_x[i];\n        y = values_y[i];\n        x_sum+= x;\n        y_sum+= y;\n        xx_sum += x*x;\n        xy_sum += x*y;\n        count++;\n    }\n\n    /*\n     * Calculate m and b for the line equation:\n     * y = x * m + b\n     */\n    var m = (count*xy_sum - x_sum*y_sum) / (count*xx_sum - x_sum*x_sum);\n    var b = (y_sum/count) - (m*x_sum)/count;\n\n    /*\n     * We then return the x and y data points according to our fit\n     */\n    var result_values_x = [];\n    var result_values_y = [];\n\n    for (let i = 0; i < values_length; i++) {\n        x = values_x[i];\n        y = x * m + b;\n        result_values_x.push(x);\n        result_values_y.push(y);\n    }\n    console.log(result_values_x)\n    console.log(result_values_y)\n    return [m, b];\n}\n\n\nfindLineByLeastSquares([0.921,0.922,0.926],[209.8,555.4,93.56])\n\n\n\n\n\n//linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/\n"]},"metadata":{},"sourceType":"script"}