{"ast":null,"code":"var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate) => {\n  var [data, myMap] = reformat_data(sales, exchange_rate);\n  console.log(\"data is \", data);\n  var regression = new jsregression.LinearRegression();\n  var model = regression.fit(data);\n  let myMap2 = new Map();\n  myMap2 = myMap; // sort exchange rate\n\n  exchange_rate.sort(function (a, b) {\n    return a - b;\n  });\n  var regression_fx = [];\n  var regression_sales = [];\n  var regression_predicted_sales = [];\n\n  for (j = 0; j < exchange_rate.length; j++) {\n    regression_fx.push(exchange_rate[i]);\n    regression_sales.push(myMap2.get(exchange_rate[i]));\n    regression_predicted_sales.push(regression.transform([exchange_rate[i]]));\n  }\n\n  console.log(\"regression_fx is \", regression_fx);\n  console.log(\"regression_sales is \", regression_sales);\n  console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n  return [regression_fx, regression_sales, regression_predicted_sales];\n};\n\nfunction reformat_data(sales, exchange_rate) {\n  const data = [];\n  let myMap = new Map();\n\n  for (i = 0; i < exchange_rate.length; i++) {\n    data.push([exchange_rate[i], sales[i]]);\n    myMap.set(exchange_rate[i], sales[i]);\n  }\n\n  return [data, myMap];\n}\n\nmodule.exports = linear_regression;\nlinear_regression([20, 50, 60], [4, 9, 7]);","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/linear_regression.js"],"names":["jsregression","require","linear_regression","sales","exchange_rate","data","myMap","reformat_data","console","log","regression","LinearRegression","model","fit","myMap2","Map","sort","a","b","regression_fx","regression_sales","regression_predicted_sales","j","length","push","i","get","transform","set","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,aAAR,KAAwB;AAC9C,MAAI,CAACC,IAAD,EAAOC,KAAP,IAAgBC,aAAa,CAACJ,KAAD,EAAQC,aAAR,CAAjC;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,IAAxB;AACA,MAAIK,UAAU,GAAG,IAAIV,YAAY,CAACW,gBAAjB,EAAjB;AACA,MAAIC,KAAK,GAAGF,UAAU,CAACG,GAAX,CAAeR,IAAf,CAAZ;AAEA,MAAIS,MAAM,GAAG,IAAIC,GAAJ,EAAb;AACAD,EAAAA,MAAM,GAAGR,KAAT,CAP8C,CAS9C;;AACAF,EAAAA,aAAa,CAACY,IAAd,CAAmB,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAAC,WAAOD,CAAC,GAACC,CAAT;AAAW,GAA7C;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,0BAA0B,GAAG,EAAjC;;AAEA,OAAKC,CAAC,GAAC,CAAP,EAASA,CAAC,GAAClB,aAAa,CAACmB,MAAzB,EAAgCD,CAAC,EAAjC,EAAoC;AAChCH,IAAAA,aAAa,CAACK,IAAd,CAAmBpB,aAAa,CAACqB,CAAD,CAAhC;AACAL,IAAAA,gBAAgB,CAACI,IAAjB,CAAsBV,MAAM,CAACY,GAAP,CAAWtB,aAAa,CAACqB,CAAD,CAAxB,CAAtB;AACAJ,IAAAA,0BAA0B,CAACG,IAA3B,CAAgCd,UAAU,CAACiB,SAAX,CAAqB,CAACvB,aAAa,CAACqB,CAAD,CAAd,CAArB,CAAhC;AACH;;AAEDjB,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCU,aAAjC;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCW,gBAApC;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CY,0BAA9C;AAEA,SAAO,CAACF,aAAD,EAAgBC,gBAAhB,EAAkCC,0BAAlC,CAAP;AACH,CA1BD;;AA4BA,SAASd,aAAT,CAAuBJ,KAAvB,EAA8BC,aAA9B,EAA4C;AACxC,QAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,KAAK,GAAG,IAAIS,GAAJ,EAAZ;;AACA,OAAKU,CAAC,GAAC,CAAP,EAASA,CAAC,GAACrB,aAAa,CAACmB,MAAzB,EAAgCE,CAAC,EAAjC,EAAoC;AAChCpB,IAAAA,IAAI,CAACmB,IAAL,CAAU,CAACpB,aAAa,CAACqB,CAAD,CAAd,EAAkBtB,KAAK,CAACsB,CAAD,CAAvB,CAAV;AACAnB,IAAAA,KAAK,CAACsB,GAAN,CAAUxB,aAAa,CAACqB,CAAD,CAAvB,EAA2BtB,KAAK,CAACsB,CAAD,CAAhC;AACH;;AACD,SAAO,CAACpB,IAAD,EAAOC,KAAP,CAAP;AACH;;AAEDuB,MAAM,CAACC,OAAP,GAAiB5B,iBAAjB;AAEAA,iBAAiB,CAAC,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,CAAD,EAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAAZ,CAAjB","sourcesContent":["var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate)=>{\n    var [data, myMap] = reformat_data(sales, exchange_rate)\n    console.log(\"data is \", data)\n    var regression = new jsregression.LinearRegression();\n    var model = regression.fit(data);\n    \n    let myMap2 = new Map();\n    myMap2 = myMap\n\n    // sort exchange rate\n    exchange_rate.sort(function(a, b){return a-b});\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    \n    for (j=0;j<exchange_rate.length;j++){\n        regression_fx.push(exchange_rate[i])\n        regression_sales.push(myMap2.get(exchange_rate[i]))\n        regression_predicted_sales.push(regression.transform([exchange_rate[i]]))\n    }\n\n    console.log(\"regression_fx is \", regression_fx);\n    console.log(\"regression_sales is \", regression_sales);\n    console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n\n    return [regression_fx, regression_sales, regression_predicted_sales]\n}\n\nfunction reformat_data(sales, exchange_rate){\n    const data = []\n    let myMap = new Map()\n    for (i=0;i<exchange_rate.length;i++){\n        data.push([exchange_rate[i],sales[i]])\n        myMap.set(exchange_rate[i],sales[i])\n    }\n    return [data, myMap]\n}\n \nmodule.exports = linear_regression; \n\nlinear_regression([20,50,60],[4,9,7])\n"]},"metadata":{},"sourceType":"script"}