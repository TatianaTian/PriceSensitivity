{"ast":null,"code":"var jsregression = require('js-regression');\n\nconst regression = (sales, exchange_rate) => {\n  var [data, myMap] = reformat_data(sales, exchange_rate);\n  var regression = new jsregression.LinearRegression();\n  var model = regression.fit(data);\n  let myMap2 = Map();\n  myMap2 = myMap; // sort exchange rate\n\n  exchange_rate.sort(function (a, b) {\n    return a - b;\n  });\n  var regression_fx = [];\n  var regression_sales = [];\n  var regression_predicted_sales = [];\n\n  for (j = 0; j < exchange_rate.length(); j++) {\n    regression_fx.push(exchange_rate[i]);\n    regression_sales.push(myMap2.get(exchange_rate[i]));\n    regression_predicted_sales.push(regression.transform([exchange_rate[i]]));\n  }\n\n  console.log(\"regression_fx is \", regression_fx);\n  console.log(\"regression_sales is \", regression_sales);\n  console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n  return [regression_fx, regression_sales, regression_predicted_sales];\n};\n\nfunction reformat_data(sales, exchange_rate) {\n  const data = [];\n  let myMap = Map();\n\n  for (i = 0; i < exchange_rate.length(); i++) {\n    data.push([exchange_rate[i], sales[i]]);\n    myMap.set(exchange_rate[i], sales[i]);\n  }\n\n  return [data, myMap];\n}","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/linear_regression.js"],"names":["jsregression","require","regression","sales","exchange_rate","data","myMap","reformat_data","LinearRegression","model","fit","myMap2","Map","sort","a","b","regression_fx","regression_sales","regression_predicted_sales","j","length","push","i","get","transform","console","log","set"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,aAAR,KAAwB;AACvC,MAAI,CAACC,IAAD,EAAOC,KAAP,IAAgBC,aAAa,CAACJ,KAAD,EAAQC,aAAR,CAAjC;AACA,MAAIF,UAAU,GAAG,IAAIF,YAAY,CAACQ,gBAAjB,EAAjB;AACA,MAAIC,KAAK,GAAGP,UAAU,CAACQ,GAAX,CAAeL,IAAf,CAAZ;AAEA,MAAIM,MAAM,GAAGC,GAAG,EAAhB;AACAD,EAAAA,MAAM,GAAGL,KAAT,CANuC,CAQvC;;AACAF,EAAAA,aAAa,CAACS,IAAd,CAAmB,UAASC,CAAT,EAAYC,CAAZ,EAAc;AAAC,WAAOD,CAAC,GAACC,CAAT;AAAW,GAA7C;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,0BAA0B,GAAG,EAAjC;;AAEA,OAAKC,CAAC,GAAC,CAAP,EAASA,CAAC,GAACf,aAAa,CAACgB,MAAd,EAAX,EAAkCD,CAAC,EAAnC,EAAsC;AAClCH,IAAAA,aAAa,CAACK,IAAd,CAAmBjB,aAAa,CAACkB,CAAD,CAAhC;AACAL,IAAAA,gBAAgB,CAACI,IAAjB,CAAsBV,MAAM,CAACY,GAAP,CAAWnB,aAAa,CAACkB,CAAD,CAAxB,CAAtB;AACAJ,IAAAA,0BAA0B,CAACG,IAA3B,CAAgCnB,UAAU,CAACsB,SAAX,CAAqB,CAACpB,aAAa,CAACkB,CAAD,CAAd,CAArB,CAAhC;AACH;;AAEDG,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCV,aAAjC;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCT,gBAApC;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CR,0BAA9C;AAEA,SAAO,CAACF,aAAD,EAAgBC,gBAAhB,EAAkCC,0BAAlC,CAAP;AACH,CAzBD;;AA2BA,SAASX,aAAT,CAAuBJ,KAAvB,EAA8BC,aAA9B,EAA4C;AACxC,QAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,KAAK,GAAGM,GAAG,EAAf;;AACA,OAAKU,CAAC,GAAC,CAAP,EAASA,CAAC,GAAClB,aAAa,CAACgB,MAAd,EAAX,EAAkCE,CAAC,EAAnC,EAAsC;AAClCjB,IAAAA,IAAI,CAACgB,IAAL,CAAU,CAACjB,aAAa,CAACkB,CAAD,CAAd,EAAkBnB,KAAK,CAACmB,CAAD,CAAvB,CAAV;AACAhB,IAAAA,KAAK,CAACqB,GAAN,CAAUvB,aAAa,CAACkB,CAAD,CAAvB,EAA2BnB,KAAK,CAACmB,CAAD,CAAhC;AACH;;AACD,SAAO,CAACjB,IAAD,EAAOC,KAAP,CAAP;AACH","sourcesContent":["var jsregression = require('js-regression');\n\nconst regression = (sales, exchange_rate)=>{\n    var [data, myMap] = reformat_data(sales, exchange_rate)\n    var regression = new jsregression.LinearRegression();\n    var model = regression.fit(data);\n    \n    let myMap2 = Map();\n    myMap2 = myMap\n\n    // sort exchange rate\n    exchange_rate.sort(function(a, b){return a-b});\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    \n    for (j=0;j<exchange_rate.length();j++){\n        regression_fx.push(exchange_rate[i])\n        regression_sales.push(myMap2.get(exchange_rate[i]))\n        regression_predicted_sales.push(regression.transform([exchange_rate[i]]))\n    }\n\n    console.log(\"regression_fx is \", regression_fx);\n    console.log(\"regression_sales is \", regression_sales);\n    console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n\n    return [regression_fx, regression_sales, regression_predicted_sales]\n}\n\nfunction reformat_data(sales, exchange_rate){\n    const data = []\n    let myMap = Map()\n    for (i=0;i<exchange_rate.length();i++){\n        data.push([exchange_rate[i],sales[i]])\n        myMap.set(exchange_rate[i],sales[i])\n    }\n    return [data, myMap]\n}\n \n\n\n"]},"metadata":{},"sourceType":"script"}