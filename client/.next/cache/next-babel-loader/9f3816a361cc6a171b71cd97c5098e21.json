{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\n// import \nvar position = require('./positionGenerator');\n\nvar insertDoc = require('../mongotest');\n\nvar store = require('/Users/tatianatian/Desktop/Startup/shopify_app/node_modules/store-js/dist/store.legacy');\n\nfunction request_bid_ask() {\n  // user asks for quote: collect buyer/seller currencies and units from Shopify\n  var buyer_currency = 'GBP';\n  var seller_currency = 'USD'; // connect to ONADA\n\n  var common = require('./lib/common');\n\n  var config = require('./lib/config'); //let conf = new config.Config(argv.config);\n\n\n  var conf = new config.Config();\n  var ctx = conf.createContext();\n  var price = ''; // generate the trading direction\n\n  var _position$positionInd = position.positionIndicator(buyer_currency, seller_currency),\n      _position$positionInd2 = _slicedToArray(_position$positionInd, 2),\n      trade_direction = _position$positionInd2[0],\n      currency_pair = _position$positionInd2[1];\n\n  if (trade_direction === 'buy') {\n    account = conf.buyAccount;\n  } else if (trade_direction === 'sell') {\n    account = conf.sellAccount;\n  } // request prices\n\n\n  ctx.pricing.get(account, {\n    instruments: currency_pair\n  }, function (response) {\n    var obj = JSON.parse(response['rawBody']);\n\n    if (trade_direction === \"buy\") {\n      price = obj.prices[0].asks;\n      indicate_trade_price = price[0].price;\n      indicate_locked_rate = indicate_trade_price * 1.005;\n    } else if (trade_direction === \"sell\") {\n      price = obj.prices[0].bids;\n      indicate_trade_price = price[0].price;\n      indicate_locked_rate = indicate_trade_price * 0.99;\n    } //console.log(indicate_trade_price) \n\n\n    console.log('indicative price is ', indicate_locked_rate); // solution 1: write data to mongoDB\n\n    insertDoc.insertDoc(indicate_locked_rate); // solution 2: write to LocalStorage\n\n    store.set('user', {\n      quote: indicate_locked_rate,\n      name: 'Amy'\n    });\n    console.log('stored in localStorage'); // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n  });\n}\n\nexports.request_bid_ask = request_bid_ask; //request_bid_ask();","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_app/trade/trades/src/request_bid_ask.js"],"names":["position","require","insertDoc","store","request_bid_ask","buyer_currency","seller_currency","common","config","conf","Config","ctx","createContext","price","positionIndicator","trade_direction","currency_pair","account","buyAccount","sellAccount","pricing","get","instruments","response","obj","JSON","parse","prices","asks","indicate_trade_price","indicate_locked_rate","bids","console","log","set","quote","name","exports"],"mappings":";;AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAvB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,wFAAD,CAAnB;;AAEA,SAASG,eAAT,GAA0B;AACtB;AACA,MAAIC,cAAc,GAAG,KAArB;AACA,MAAIC,eAAe,GAAG,KAAtB,CAHsB,CAKtB;;AACA,MAAIC,MAAM,GAAGN,OAAO,CAAC,cAAD,CAApB;;AACA,MAAIO,MAAM,GAAGP,OAAO,CAAC,cAAD,CAApB,CAPsB,CAStB;;;AACA,MAAIQ,IAAI,GAAG,IAAID,MAAM,CAACE,MAAX,EAAX;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,aAAL,EAAV;AACA,MAAIC,KAAK,GAAG,EAAZ,CAZsB,CActB;;AAdsB,8BAeiBb,QAAQ,CAACc,iBAAT,CAA2BT,cAA3B,EAA0CC,eAA1C,CAfjB;AAAA;AAAA,MAejBS,eAfiB;AAAA,MAeAC,aAfA;;AAgBtB,MAAID,eAAe,KAAK,KAAxB,EAA8B;AAC1BE,IAAAA,OAAO,GAAGR,IAAI,CAACS,UAAf;AACH,GAFD,MAGK,IAAIH,eAAe,KAAK,MAAxB,EAA+B;AAChCE,IAAAA,OAAO,GAAGR,IAAI,CAACU,WAAf;AACH,GArBqB,CAuBtB;;;AACAR,EAAAA,GAAG,CAACS,OAAJ,CAAYC,GAAZ,CACIJ,OADJ,EAEI;AACIK,IAAAA,WAAW,EAAEN;AADjB,GAFJ,EAMI,UAACO,QAAD,EAAc;AACV,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAAC,SAAD,CAAnB,CAAV;;AACA,QAAIR,eAAe,KAAK,KAAxB,EAA8B;AAC1BF,MAAAA,KAAK,GAAGW,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,IAAtB;AACAC,MAAAA,oBAAoB,GAAGhB,KAAK,CAAC,CAAD,CAAL,CAASA,KAAhC;AACAiB,MAAAA,oBAAoB,GAAID,oBAAoB,GAAG,KAA/C;AACH,KAJD,MAKK,IAAId,eAAe,KAAK,MAAxB,EAA+B;AAChCF,MAAAA,KAAK,GAAGW,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcI,IAAtB;AACAF,MAAAA,oBAAoB,GAAGhB,KAAK,CAAC,CAAD,CAAL,CAASA,KAAhC;AACAiB,MAAAA,oBAAoB,GAAID,oBAAoB,GAAG,IAA/C;AACH,KAXS,CAYV;;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,oBAApC,EAbU,CAeV;;AACA5B,IAAAA,SAAS,CAACA,SAAV,CAAoB4B,oBAApB,EAhBU,CAiBV;;AAEA3B,IAAAA,KAAK,CAAC+B,GAAN,CAAU,MAAV,EAAkB;AAAEC,MAAAA,KAAK,EAACL,oBAAR;AAA8BM,MAAAA,IAAI,EAAE;AAApC,KAAlB;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EApBU,CAsBV;AACH,GA7BL;AAgCH;;AAEDI,OAAO,CAACjC,eAAR,GAA0BA,eAA1B,C,CACA","sourcesContent":["// import \nlet position = require('./positionGenerator');\nlet insertDoc = require('../mongotest')\nlet store = require('/Users/tatianatian/Desktop/Startup/shopify_app/node_modules/store-js/dist/store.legacy')\n\nfunction request_bid_ask(){\n    // user asks for quote: collect buyer/seller currencies and units from Shopify\n    var buyer_currency = 'GBP';\n    var seller_currency = 'USD';\n\n    // connect to ONADA\n    let common = require('./lib/common');\n    let config = require('./lib/config');    \n\n    //let conf = new config.Config(argv.config);\n    let conf = new config.Config();\n    let ctx = conf.createContext();\n    var price = '';\n\n    // generate the trading direction\n    var [trade_direction, currency_pair] = position.positionIndicator(buyer_currency,seller_currency);\n    if (trade_direction === 'buy'){\n        account = conf.buyAccount\n    }\n    else if (trade_direction === 'sell'){\n        account = conf.sellAccount\n    }\n\n    // request prices\n    ctx.pricing.get(\n        account,\n        {\n            instruments: currency_pair,\n        },\n\n        (response) => {\n            var obj = JSON.parse(response['rawBody']);\n            if (trade_direction === \"buy\"){\n                price = obj.prices[0].asks\n                indicate_trade_price = price[0].price\n                indicate_locked_rate =  indicate_trade_price * 1.005\n            }\n            else if (trade_direction === \"sell\"){\n                price = obj.prices[0].bids\n                indicate_trade_price = price[0].price\n                indicate_locked_rate =  indicate_trade_price * 0.99\n            }\n            //console.log(indicate_trade_price) \n            console.log('indicative price is ', indicate_locked_rate)\n\n            // solution 1: write data to mongoDB\n            insertDoc.insertDoc(indicate_locked_rate)\n            // solution 2: write to LocalStorage\n            \n            store.set('user', { quote:indicate_locked_rate, name: 'Amy' })\n            console.log('stored in localStorage')\n\n            // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n        }\n    )\n    \n}\n\nexports.request_bid_ask = request_bid_ask\n//request_bid_ask();\n\n  "]},"metadata":{},"sourceType":"script"}