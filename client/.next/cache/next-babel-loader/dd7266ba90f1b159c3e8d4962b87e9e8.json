{"ast":null,"code":"var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate) => {\n  var [data, myMap, exchange_rate_round] = reformat_data(sales, exchange_rate);\n  console.log(\"data is \", data);\n  var regression = new jsregression.LinearRegression({\n    alpha: 0.001,\n    // \n    iterations: 300,\n    lambda: 0.0\n  });\n  console.log(\"here\");\n  var model = regression.fit(data);\n  let myMap2 = new Map();\n  myMap2 = myMap; // sort exchange rate\n\n  exchange_rate_round.sort(function (a, b) {\n    return a - b;\n  });\n  var regression_fx = [];\n  var regression_sales = [];\n  var regression_predicted_sales = [];\n\n  for (j = 0; j < exchange_rate_round.length; j++) {\n    regression_fx.push(exchange_rate_round[j]);\n    regression_sales.push(myMap2.get(exchange_rate_round[j]));\n    regression_predicted_sales.push(regression.transform([exchange_rate_round[j]]));\n    console.log(\"predicted number is \", regression.transform([exchange_rate_round[j]]));\n  }\n\n  return [regression_fx, regression_sales, regression_predicted_sales];\n};\n\nfunction reformat_data(sales, exchange_rate) {\n  const exchange_rate_round = [];\n  const data = [];\n  let myMap = new Map();\n\n  for (i = 0; i < exchange_rate.length; i++) {\n    var round_fx = Math.round(1000 * exchange_rate[i]) / 1000;\n\n    if (myMap.has(round_fx)) {\n      var sales_list = myMap.get(round_fx);\n      sales_list.push(sales[i]);\n      myMap.set(round_fx, sales_list);\n    }\n\n    myMap.set(round_fx, [sales[i]]);\n  }\n\n  for (let [k, v] of myMap) {\n    let sum = v.reduce((previous, current) => current += previous);\n    let avg = sum / v.length;\n    data.push([k, avg]);\n    exchange_rate_round.push(k);\n  }\n\n  return [data, myMap, exchange_rate_round];\n}\n\nmodule.exports = linear_regression; //linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/linear_regression.js"],"names":["jsregression","require","linear_regression","sales","exchange_rate","data","myMap","exchange_rate_round","reformat_data","console","log","regression","LinearRegression","alpha","iterations","lambda","model","fit","myMap2","Map","sort","a","b","regression_fx","regression_sales","regression_predicted_sales","j","length","push","get","transform","i","round_fx","Math","round","has","sales_list","set","k","v","sum","reduce","previous","current","avg","module","exports"],"mappings":"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","sourcesContent":["var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate)=>{\n    \n    var [data, myMap, exchange_rate_round] = reformat_data(sales, exchange_rate)\n    console.log(\"data is \", data)\n    var regression = new jsregression.LinearRegression(  {alpha: 0.001, // \n        iterations: 300,\n        lambda: 0.0});\n    console.log(\"here\")\n    var model = regression.fit(data);\n    \n    let myMap2 = new Map();\n    myMap2 = myMap\n\n    // sort exchange rate\n    exchange_rate_round.sort(function(a, b){return a-b});\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    \n    for (j=0;j<exchange_rate_round.length;j++){\n        regression_fx.push(exchange_rate_round[j])\n        regression_sales.push(myMap2.get(exchange_rate_round[j]))\n        \n        regression_predicted_sales.push(regression.transform([exchange_rate_round[j]]))\n        console.log(\"predicted number is \", regression.transform([exchange_rate_round[j]]))\n    }\n    return [regression_fx, regression_sales, regression_predicted_sales]\n}\n\nfunction reformat_data(sales, exchange_rate){\n    const exchange_rate_round = []\n    const data = []\n    let myMap = new Map()\n    for (i=0;i<exchange_rate.length;i++){\n        var round_fx = Math.round(1000*exchange_rate[i])/1000;\n        if (myMap.has(round_fx)){\n            var sales_list = myMap.get(round_fx)\n            sales_list.push(sales[i])\n            myMap.set(round_fx,sales_list)\n        }\n        myMap.set(round_fx,[sales[i]])\n    }\n    for (let [k, v] of myMap) {\n        let sum = v.reduce((previous, current) => current += previous);\n        let avg = sum / v.length;\n        data.push([k, avg])\n        exchange_rate_round.push(k)\n    }\n\n    return [data, myMap, exchange_rate_round]\n}\n \nmodule.exports = linear_regression; \n\n//linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/\n"]},"metadata":{},"sourceType":"script"}