{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Card, Layout } from '@shopify/polaris';\nimport { HorizontalBar, Doughnut, Bar } from 'react-chartjs-2';\nimport store from 'store-js';\n\nconst getPearsonCorrelation = require('../functions/sales_exchange_rate_corr');\n\nconst string_to_list = require('../functions/string_to_list');\n\nexport default function Country_data() {\n  const date = string_to_list(localStorage.getItem('date'), '');\n  const price = string_to_list(store.get('price'), 'float');\n  const exchange_rate = string_to_list(store.get('exchange_rate'), 'float');\n  const date_string = localStorage.getItem('date');\n  const price_string = localStorage.getItem('price');\n  const exchange_rate_string = localStorage.getItem('exchange_rate'); // var date = 'error date'\n  //var price = 'error price'\n  //var exchange_rate = 'error exchange rate'\n\n  console.log(\"store.get('date') is\", localStorage.getItem('date'));\n  console.log(\"store.get('price') is\", store.get('price'));\n  console.log(\"store.get('exchange_rate') is\", store.get('exchange_rate')); //date = string_to_list(store.get('date'),'')\n  //price = string_to_list(store.get('price'),'float')\n  //exchange_rate = string_to_list(store.get('exchange_rate'),'float')\n  //date = localStorage.getItem('date')\n  //price = string_to_list(store.get('date'),'float')[0]\n\n  const level = store.get('level');\n  const r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34, 37, 24, 67, 42], [1.23, 1.22, 1.23, 1.24, 1.25])), 1) * 100);\n  const doughnut = [r, 100 - r];\n  const leve_num2 = [2, 2, 2, 2];\n  const leve_num1 = [2, 2, 2, 2];\n  const leve_num3 = [2, 2, 2, 2]; //const leve_num1 = [level[0][0]*100-2, level[0][1]*100-2, level[0][2]*100-2, level[0][3]*100-2]\n  //const leve_num3 = [100-level[0][0]*100,100-level[0][1]*100,100-level[0][2]*100,100-level[0][3]*100]\n\n  console.log(\"level is\", level); //console.log(\"2 is\",leve_num2)\n  //console.log(\"3 is\",leve_num3)\n  //console.log(\"level2 is \", leve_num1)\n\n  console.log(\"date is \", date);\n  console.log(\"price is \", price);\n  console.log(\"exchange_rate is \", exchange_rate); //console.log(\"r is \", r)\n\n  var color = '';\n\n  if (r < 30) {\n    color = '#a2d6c4';\n  } else if (r < 60) {\n    color = '#ffb367';\n  } else {\n    color = '#fc7e2f';\n  }\n\n  const doughnutChartData = {\n    labels: [\"Moderate: \" + r],\n    datasets: [{\n      //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n      backgroundColor: [color, \"#EEEEEE\"],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: doughnut\n    }]\n  };\n  const doughnutChartOptions = {\n    circumference: 1 * Math.PI,\n    rotation: Math.PI,\n    maintainAspectRatio: true,\n    cutoutPercentage: 80,\n    tooltips: {\n      enabled: false\n    },\n    legend: {\n      display: true,\n      position: 'bottom',\n      align: 'center',\n      labels: {\n        fontSize: 25,\n        boxWidth: 0,\n        fontColor: '#01023A'\n      }\n    },\n    pieceLabel: {\n      render: 'value' + '%',\n      fontColor: \"white\"\n    }\n  };\n  var lineChartData = {\n    //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n    labels: price,\n    //lables: string_to_list(localStorage.getItem('date'),''),\n    datasets: [{\n      yAxisID: 'A',\n      type: \"bar\",\n      label: \"sales in store currency\",\n      fill: false,\n      lineTension: 0,\n      backgroundColor: \"rgb(1, 2, 58)\",\n      borderColor: \"rgb(1, 2, 58)\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"rgb(1, 2, 58)\",\n      pointBackgroundColor: \"rgb(1, 2, 58)\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [89.54, 96.8, 246.51],\n      data: price,\n      spanGaps: false,\n      barPercentage: 0.3\n    }, {\n      yAxisID: 'B',\n      type: \"line\",\n      label: \"product price\",\n      fill: false,\n      lineTension: 0,\n      backgroundColor: \"rgb(1, 2, 58)\",\n      borderColor: \"rgb(1, 2, 58)\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"rgb(1, 2, 58)\",\n      pointBackgroundColor: \"rgb(1, 2, 58)\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [0.8072950291, 0.8072950291, 0.8072950291],\n      data: exchange_rate,\n      spanGaps: false\n    }]\n  };\n  var lineChartOptions = {\n    maintainAspectRatio: true,\n    tooltips: {\n      enabled: true\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      yAxes: [{\n        id: 'A',\n        type: 'linear',\n        position: 'left',\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }, {\n        id: 'B',\n        type: 'linear',\n        position: 'right',\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }],\n      xAxes: [{\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 0,\n        right: 50,\n        top: 0,\n        bottom: 0\n      }\n    }\n  };\n  const barChartData = {\n    labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP', 'US - Aaa Corporate Bonds', 'US - S&P 500'],\n    datasets: [{\n      backgroundColor: [\"#ffa41b\", '#005082', '#ff5733', '#708160', '#00a8cc'],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: [0.65, 0.50, 0.47, 0.39, 0.37]\n    }]\n  };\n  const barChartOptions = {\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        ticks: {\n          min: 0,\n          max: 1,\n          callback: function (value) {\n            return value;\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: \"Correlation Coefficient (Absolute Value)\"\n        }\n      }],\n      yAxes: [{\n        barPercentage: 0.3,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    }\n  };\n  const rangeChartData = {\n    labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n    datasets: [{\n      label: 'range',\n      backgroundColor: 'rgb(1, 2, 58)',\n      stack: '3',\n      data: leve_num1\n    }, {\n      backgroundColor: '#32DC8B',\n      stack: '3',\n      data: leve_num2\n    }, {\n      label: 'range2',\n      backgroundColor: 'rgb(1, 2, 58)',\n      stack: '3',\n      data: leve_num3\n    }]\n  };\n  const rangeChartOptions = {\n    maintainAspectRatio: false,\n    tooltips: {\n      enabled: false\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        stacked: true,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        },\n        ticks: {\n          min: 0,\n          max: 100,\n          callback: function (value) {\n            return value + \"%\";\n          }\n        }\n      }],\n      yAxes: [{\n        stacked: true,\n        barPercentage: 0.4,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 0,\n        right: 30,\n        top: 0,\n        bottom: 0\n      }\n    }\n  };\n  return __jsx(Layout, null, __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Card, null, __jsx(\"p\", null, \"date is \", date_string), __jsx(\"p\", null, \"price is \", price_string), __jsx(\"p\", null, \"exchange_rate is \", exchange_rate_string), __jsx(\"p\", null, \"Price Change Magnitude in USD\"), __jsx(Doughnut, {\n    height: \"100vh\",\n    data: doughnutChartData,\n    options: doughnutChartOptions\n  }), __jsx(\"p\", null, \"Price vs Sales in USD\"), __jsx(Bar, {\n    height: \"200vh\",\n    data: lineChartData,\n    options: lineChartOptions\n  }))), __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Card, null, __jsx(\"p\", null, \"The current price level in USD\"), __jsx(HorizontalBar, {\n    height: \"220vh\",\n    data: rangeChartData,\n    options: rangeChartOptions\n  })), __jsx(Card, null, __jsx(\"h5\", null, \"Product Ranking\"), __jsx(\"p\", null, \"Rankings of products on how easily sales are affected by price change\"), __jsx(HorizontalBar, {\n    height: \"170vh\",\n    data: barChartData,\n    options: barChartOptions\n  }))));\n}","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/Country_data.js"],"names":["React","Card","Layout","HorizontalBar","Doughnut","Bar","store","getPearsonCorrelation","require","string_to_list","Country_data","date","localStorage","getItem","price","get","exchange_rate","date_string","price_string","exchange_rate_string","console","log","level","r","parseInt","Math","min","abs","doughnut","leve_num2","leve_num1","leve_num3","color","doughnutChartData","labels","datasets","backgroundColor","borderColor","borderWidth","data","doughnutChartOptions","circumference","PI","rotation","maintainAspectRatio","cutoutPercentage","tooltips","enabled","legend","display","position","align","fontSize","boxWidth","fontColor","pieceLabel","render","lineChartData","yAxisID","type","label","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","spanGaps","barPercentage","lineChartOptions","scales","yAxes","id","gridLines","xAxes","layout","padding","left","right","top","bottom","barChartData","barChartOptions","ticks","max","callback","value","scaleLabel","labelString","rangeChartData","stack","rangeChartOptions","stacked"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Card, Layout} from '@shopify/polaris';\nimport {HorizontalBar, Doughnut, Bar} from 'react-chartjs-2';\nimport store from 'store-js';\nconst getPearsonCorrelation = require('../functions/sales_exchange_rate_corr')\nconst string_to_list = require('../functions/string_to_list')\n\n\n\n\nexport default function Country_data() {  \n\n    const date = string_to_list(localStorage.getItem('date'),'')\n    const price = string_to_list(store.get('price'),'float')\n    const exchange_rate = string_to_list(store.get('exchange_rate'),'float')\n\n    const date_string = localStorage.getItem('date')\n    const price_string = localStorage.getItem('price')\n    const exchange_rate_string = localStorage.getItem('exchange_rate')\n\n\n   // var date = 'error date'\n    //var price = 'error price'\n    //var exchange_rate = 'error exchange rate'\n    \n    \n    console.log(\"store.get('date') is\",localStorage.getItem('date'))\n    console.log(\"store.get('price') is\",store.get('price'))\n    console.log(\"store.get('exchange_rate') is\",store.get('exchange_rate'))\n    \n    //date = string_to_list(store.get('date'),'')\n    //price = string_to_list(store.get('price'),'float')\n    //exchange_rate = string_to_list(store.get('exchange_rate'),'float')\n    \n    //date = localStorage.getItem('date')\n    //price = string_to_list(store.get('date'),'float')[0]\n    \n    \n    const level = store.get('level') \n    const r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1) * 100)\n    const doughnut = [r, 100-r]\n    \n    const leve_num2 = [2, 2, 2, 2]\n    const leve_num1 = [2, 2, 2, 2]\n    const leve_num3 = [2, 2, 2, 2]\n    //const leve_num1 = [level[0][0]*100-2, level[0][1]*100-2, level[0][2]*100-2, level[0][3]*100-2]\n    //const leve_num3 = [100-level[0][0]*100,100-level[0][1]*100,100-level[0][2]*100,100-level[0][3]*100]\n    \n    console.log(\"level is\",level)\n    //console.log(\"2 is\",leve_num2)\n    //console.log(\"3 is\",leve_num3)\n    //console.log(\"level2 is \", leve_num1)\n    \n    console.log(\"date is \", date)\n    console.log(\"price is \", price)\n    console.log(\"exchange_rate is \", exchange_rate)\n    //console.log(\"r is \", r)\n    \n    var color = ''\n    if (r < 30){\n        color = '#a2d6c4'\n    } else if (r < 60){\n        color = '#ffb367'\n    } else {\n        color = '#fc7e2f'\n    }\n    \n    \n    \n    const doughnutChartData = {\n      labels: [\"Moderate: \"+r],\n      datasets: [\n        {\n          //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n          backgroundColor: [color,\"#EEEEEE\"],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          data: doughnut,\n    \n        }\n      ],\n    };\n      \n    const doughnutChartOptions = {\n      circumference: 1* Math.PI,\n      rotation: Math.PI,\n      maintainAspectRatio: true,\n      cutoutPercentage:80,\n      tooltips:{\n        enabled:false,\n      },\n      legend: {\n                display: true,\n                position: 'bottom',\n                align:'center',\n                labels:{\n                    fontSize: 25,\n                    boxWidth: 0,\n                    fontColor: '#01023A'\n                }\n              },\n      pieceLabel: {\n        render: 'value' + '%',\n        fontColor: \"white\",\n      }\n      };\n    \n    var lineChartData = {\n      //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n      labels: price,\n      //lables: string_to_list(localStorage.getItem('date'),''),\n      datasets: [{\n        yAxisID: 'A',\n        type: \"bar\",\n        label: \"sales in store currency\",\n        fill: false,\n        lineTension: 0,\n        backgroundColor: \"rgb(1, 2, 58)\",\n        borderColor: \"rgb(1, 2, 58)\",\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: \"rgb(1, 2, 58)\",\n        pointBackgroundColor: \"rgb(1, 2, 58)\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10,\n        // notice the gap in the data and the spanGaps: false\n        //data: [89.54, 96.8, 246.51],\n        data: price,\n        spanGaps: false,\n        barPercentage: 0.3\n        },\n        {\n          yAxisID: 'B',\n          type: \"line\",\n          label: \"product price\",\n          fill: false,\n          lineTension: 0,\n          backgroundColor: \"rgb(1, 2, 58)\",\n          borderColor: \"rgb(1, 2, 58)\",\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: \"rgb(1, 2, 58)\",\n          pointBackgroundColor: \"rgb(1, 2, 58)\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n          pointHoverBorderColor: \"rgb(1, 2, 58)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 4,\n          pointHitRadius: 10,\n          // notice the gap in the data and the spanGaps: false\n          //data: [0.8072950291, 0.8072950291, 0.8072950291],\n          data: exchange_rate,\n          spanGaps: false,\n          }\n    \n      ]\n      };\n    \n    var lineChartOptions = {\n      maintainAspectRatio: true,\n      tooltips:{\n        enabled:true,\n      },\n      legend: {\n        display: false,\n      },\n      scales: {\n                yAxes:\n                [{\n                    id: 'A',\n                    type: 'linear',\n                    position: 'left',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n    \n     \n                  }, {\n                    id: 'B',\n                    type: 'linear',\n                    position: 'right',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n    \n    \n                  }],\n                xAxes: [{\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],            \n            },\n            layout: {\n              padding: {\n                  left: 0,\n                  right: 50,\n                  top: 0,\n                  bottom: 0\n              }\n          }   \n    };\n    \n    \n    const barChartData = {\n      labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP',\n                'US - Aaa Corporate Bonds', 'US - S&P 500'],\n      datasets: [\n        {\n          backgroundColor: [\"#ffa41b\", '#005082','#ff5733','#708160','#00a8cc'],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          data: [0.65, 0.50, 0.47, 0.39, 0.37]\n        }\n      ],\n    };\n    \n    const barChartOptions = {\n    \n      legend: {\n                display: false,\n              },\n    \n      scales: {\n                xAxes: [{\n                  ticks: {\n                    min: 0,\n                    max: 1,\n                    callback: function(value) {\n                        return value\n                    }\n                  },\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"Correlation Coefficient (Absolute Value)\"\n                  }\n                },],\n                yAxes: [{\n                  barPercentage: 0.3,\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],\n              },\n    };\n    \n    const rangeChartData = {\n        labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n        datasets: [\n        {\n        label: 'range',\n        backgroundColor: 'rgb(1, 2, 58)',\n        stack: '3',\n        data: leve_num1,\n        },\n        {\n        backgroundColor: '#32DC8B',\n        stack: '3',\n        data: leve_num2,\n        },\n        {\n          label: 'range2',\n          backgroundColor: 'rgb(1, 2, 58)',\n          stack: '3',\n          data: leve_num3,\n          },\n        ],\n      };\n        \n      const rangeChartOptions = {\n        maintainAspectRatio: false,\n        tooltips:{\n          enabled:false,\n        },\n        legend: {\n                  display: false,\n                },\n        scales: {\n                  xAxes: [{\n                    stacked: true,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                      min: 0,\n                      max: 100,\n                      callback: function(value) {\n                          return value + \"%\"\n                      }\n                    }\n                  },],\n                  yAxes: [{\n                    stacked: true,\n                    barPercentage: 0.4,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                  }\n                  \n                  },],\n                },\n                layout: {\n                  padding: {\n                      left: 0,\n                      right: 30,\n                      top: 0,\n                      bottom: 0\n                  }\n              }  \n        };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return (\n\n\n            <Layout>\n            <Layout.Section oneHalf>\n            <Card>\n                <p>date is {date_string}</p>\n                <p>price is {price_string}</p>\n                <p>exchange_rate is {exchange_rate_string}</p>\n                <p>Price Change Magnitude in USD</p>\n                <Doughnut\n                    height=\"100vh\"\n                    data={doughnutChartData}\n                    options={doughnutChartOptions}\n                />\n                <p>Price vs Sales in USD</p>\n                <Bar \n                  height=\"200vh\"\n                  data={lineChartData}\n                  options={lineChartOptions}\n                />\n                </Card>\n            </Layout.Section>\n            <Layout.Section oneHalf>\n            <Card>\n                <p>The current price level in USD</p>\n                <HorizontalBar \n                    height=\"220vh\"\n                    data={rangeChartData}\n                    options={rangeChartOptions}\n                    />\n            </Card>\n            <Card>\n                <h5>Product Ranking</h5>\n                <p>Rankings of products on how easily sales are affected by price change</p>\n                <HorizontalBar \n                        height=\"170vh\"\n                        data={barChartData}\n                        options={barChartOptions}\n                    />\n            </Card>\n            </Layout.Section>\n          </Layout>\n\n    );\n  }\n\n"]},"metadata":{},"sourceType":"module"}