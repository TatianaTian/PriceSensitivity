{"ast":null,"code":"// import \nlet position = require('./positionGenerator');\n\nfunction request_bid_ask() {\n  // user asks for quote: collect buyer/seller currencies and units from Shopify\n  var buyer_currency = 'GBP';\n  var seller_currency = 'USD'; // connect to ONADA\n\n  let common = require('./lib/common');\n\n  let config = require('./lib/config');\n  /*let argv = require('yargs')\n  .alias('config', 'c')\n  .nargs('config', 1)\n  .describe('config', \"v20 Configuration File to use\")\n  .default('config', config.defaultConfigFile())\n  .argv;*/\n  //let conf = new config.Config(argv.config);\n\n\n  let conf = new config.Config();\n  let ctx = conf.createContext();\n  var price = ''; // generate the trading direction\n\n  var [trade_direction, currency_pair] = position.positionIndicator(buyer_currency, seller_currency);\n\n  if (trade_direction === 'buy') {\n    account = conf.buyAccount;\n  } else if (trade_direction === 'sell') {\n    account = conf.sellAccount;\n  } // request prices\n\n\n  ctx.pricing.get(account, {\n    instruments: currency_pair\n  }, response => {\n    var obj = JSON.parse(response['rawBody']);\n\n    if (trade_direction === \"buy\") {\n      price = obj.prices[0].asks;\n      indicate_trade_price = price[0].price;\n      indicate_locked_rate = indicate_trade_price * 1.005;\n    } else if (trade_direction === \"sell\") {\n      price = obj.prices[0].bids;\n      indicate_trade_price = price[0].price;\n      indicate_locked_rate = indicate_trade_price * 0.99;\n    } //console.log(indicate_trade_price) \n\n\n    console.log('indicative price is ', indicate_locked_rate);\n    price = indicate_locked_rate; // write data to txt\n\n    const fs = require('fs');\n\n    let data = indicate_locked_rate;\n    fs.writeFile('newfile.txt', data, err => {\n      if (err) throw err;\n    }); // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n  });\n\n  var fs = require(\"fs\");\n\n  for (i = 1; i <= 5; ++i) {\n    setDelay(i);\n  }\n\n  function setDelay(i) {\n    setTimeout(function () {\n      if (i === 1) {\n        price = fs.readFileSync(\"newfile.txt\").toString(); //console.log('price is ', price);\n      } else {\n        if (price === '') {\n          price = fs.readFileSync(\"newfile.txt\").toString(); //console.log('price is ', price);\n        }\n      }\n    }, 1000);\n  }\n\n  return price;\n}\n\nexports.request_bid_ask = request_bid_ask;\nrequest_bid_ask();","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_app/trade/trades/src/request_bid_ask.js"],"names":["position","require","request_bid_ask","buyer_currency","seller_currency","common","config","conf","Config","ctx","createContext","price","trade_direction","currency_pair","positionIndicator","account","buyAccount","sellAccount","pricing","get","instruments","response","obj","JSON","parse","prices","asks","indicate_trade_price","indicate_locked_rate","bids","console","log","fs","data","writeFile","err","i","setDelay","setTimeout","readFileSync","toString","exports"],"mappings":"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","sourcesContent":["// import \nlet position = require('./positionGenerator');\n\nfunction request_bid_ask(){\n    // user asks for quote: collect buyer/seller currencies and units from Shopify\n    var buyer_currency = 'GBP';\n    var seller_currency = 'USD';\n\n    // connect to ONADA\n    let common = require('./lib/common');\n    let config = require('./lib/config');\n\n    /*let argv = require('yargs')\n    .alias('config', 'c')\n    .nargs('config', 1)\n    .describe('config', \"v20 Configuration File to use\")\n    .default('config', config.defaultConfigFile())\n    .argv;*/\n    \n\n    //let conf = new config.Config(argv.config);\n    let conf = new config.Config();\n    let ctx = conf.createContext();\n    var price = '';\n\n    // generate the trading direction\n    var [trade_direction, currency_pair] = position.positionIndicator(buyer_currency,seller_currency);\n    if (trade_direction === 'buy'){\n        account = conf.buyAccount\n    }\n    else if (trade_direction === 'sell'){\n        account = conf.sellAccount\n    }\n\n    // request prices\n    ctx.pricing.get(\n        account,\n        {\n            instruments: currency_pair,\n        },\n\n        (response) => {\n            var obj = JSON.parse(response['rawBody']);\n            if (trade_direction === \"buy\"){\n                price = obj.prices[0].asks\n                indicate_trade_price = price[0].price\n                indicate_locked_rate =  indicate_trade_price * 1.005\n            }\n            else if (trade_direction === \"sell\"){\n                price = obj.prices[0].bids\n                indicate_trade_price = price[0].price\n                indicate_locked_rate =  indicate_trade_price * 0.99\n            }\n            //console.log(indicate_trade_price) \n            console.log('indicative price is ', indicate_locked_rate)\n            price =indicate_locked_rate;\n\n            // write data to txt\n            const fs = require('fs') \n            let data = indicate_locked_rate \n            fs.writeFile('newfile.txt', data, (err) => { \n                if (err) throw err; \n            }) \n\n            // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n        }\n    )\n\n\n    var fs = require(\"fs\");\n    for (i = 1; i <= 5; ++i) {\n            setDelay(i);\n      }\n\n    function setDelay(i) {\n        setTimeout(function(){\n            if (i === 1){\n                price = fs.readFileSync(\"newfile.txt\").toString();\n                //console.log('price is ', price);\n            }\n            else{\n                if (price === ''){\n                    price = fs.readFileSync(\"newfile.txt\").toString();\n                    //console.log('price is ', price);\n                }\n            }    \n        }, 1000);\n    }\n    return price\n}\n\nexports.request_bid_ask = request_bid_ask\n\nrequest_bid_ask()\n\n\n  "]},"metadata":{},"sourceType":"script"}