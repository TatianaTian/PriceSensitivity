{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nglobal.fetch = require(\"node-fetch\");\n\nvar request_order = function request_order() {\n  var query, check, query_short_list, shop, accessToken, response3, orderJson, data1, i, j, country_set, tab, iterator1, value, a;\n  return _regeneratorRuntime.async(function request_order$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = JSON.stringify({\n            query: \"mutation {\\n        bulkOperationRunQuery(\\n            query:\\\"\\\"\\\"\\n            {\\n            orders(query: \\\"created_at:>=2020-01-01\\\") {\\n                edges {\\n                node {\\n                    id\\n                    customerLocale\\n                    customer {\\n                    addresses {\\n                        countryCode\\n                    }\\n\\n                    }\\n                    totalPriceSet {\\n                    presentmentMoney {\\n                        amount\\n                        currencyCode\\n                    }\\n                    shopMoney {\\n                        amount\\n                        currencyCode\\n                    }\\n                    }\\n                }\\n                }\\n            }\\n            }\\n            \\\"\\\"\\\"\\n        ) {\\n            bulkOperation {\\n            id\\n            status\\n            }\\n            userErrors {\\n            field\\n            message\\n            }\\n        }\\n        }\"\n          });\n          check = JSON.stringify({\n            query: \"query {\\n            currentBulkOperation {\\n            id\\n            status\\n            errorCode\\n            createdAt\\n            completedAt\\n            objectCount\\n            fileSize\\n            url\\n            partialDataUrl\\n            }\\n        }\"\n          });\n          query_short_list = JSON.stringify({\n            query: \"query {\\n            orders(query: \\\"created_at:>=2020-01-01\\\", first: 249) {\\n                edges {\\n                node {\\n                    id\\n                    customerLocale\\n                    customer {\\n                    addresses {\\n                        countryCode\\n                        country\\n                        countryCodeV2\\n                    }\\n                    }\\n                    totalPriceSet {\\n                    presentmentMoney {\\n                        amount\\n                        currencyCode\\n                    }\\n                    shopMoney {\\n                        amount\\n                        currencyCode\\n                    }\\n                    }\\n                    createdAt\\n                }\\n                }\\n            }\\n        }\"\n          });\n          shop = 'haloy.myshopify.com';\n          accessToken = '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';\n          /*\n          const response = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n              method: 'POST',\n              headers: {\n              'Content-Type': 'application/json',\n              \"X-Shopify-Access-Token\": accessToken,\n              },\n              body: query\n          })\n          \n          const responseJson = await response.json();\n          console.log(responseJson.data.bulkOperationRunQuery)\n            const response2 = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n              method: 'POST',\n              headers: {\n              'Content-Type': 'application/json',\n              \"X-Shopify-Access-Token\": accessToken,\n              },\n              body: check\n          })\n           const checkJson = await response2.json();\n          console.log(checkJson)\n          */\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(fetch(\"https://\".concat(shop, \"/admin/api/2019-10/graphql.json\"), {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              \"X-Shopify-Access-Token\": accessToken\n            },\n            body: query_short_list\n          }));\n\n        case 7:\n          response3 = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(response3.json());\n\n        case 10:\n          orderJson = _context.sent;\n          data1 = orderJson.data.orders.edges;\n          country_set = new Set();\n          tab = [];\n\n          for (i = 0; i < data1.length; i++) {\n            country_set.add(data1[i].node.id);\n          } //console.log(country_set.size)\n\n\n          iterator1 = country_set.values();\n\n          for (j = 0; j < country_set.size; j++) {\n            value = iterator1.next().value;\n            a = {\n              id: value,\n              content: value\n            };\n            tab.push(a);\n          }\n\n          console.log(tab);\n          return _context.abrupt(\"return\", tab);\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}; //request_order()\n\n\nmodule.exports = request_order;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/Query_orders.js"],"names":["global","fetch","require","request_order","query","JSON","stringify","check","query_short_list","shop","accessToken","method","headers","body","response3","json","orderJson","data1","data","orders","edges","country_set","Set","tab","i","length","add","node","id","iterator1","values","j","size","value","next","a","content","push","console","log","module","exports"],"mappings":";;AAAAA,MAAM,CAACC,KAAP,GAAeC,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,UAAAA,KADY,GACJC,IAAI,CAACC,SAAL,CAAe;AACzBF,YAAAA,KAAK;AADoB,WAAf,CADI;AA6CZG,UAAAA,KA7CY,GA6CJF,IAAI,CAACC,SAAL,CAAe;AACzBF,YAAAA,KAAK;AADoB,WAAf,CA7CI;AA6DZI,UAAAA,gBA7DY,GA6DOH,IAAI,CAACC,SAAL,CAAe;AACpCF,YAAAA,KAAK;AAD+B,WAAf,CA7DP;AA4FZK,UAAAA,IA5FY,GA4FL,qBA5FK;AA6FZC,UAAAA,WA7FY,GA6FE,wCA7FF;AA+FlB;;;;;;;;;;;;;;;;;;;;;;;;AA/FkB;AAAA,2CAyHMT,KAAK,mBAAYQ,IAAZ,sCAAmD;AAC5EE,YAAAA,MAAM,EAAE,MADoE;AAE5EC,YAAAA,OAAO,EAAE;AACT,8BAAgB,kBADP;AAET,wCAA0BF;AAFjB,aAFmE;AAM5EG,YAAAA,IAAI,EAAEL;AANsE,WAAnD,CAzHX;;AAAA;AAyHZM,UAAAA,SAzHY;AAAA;AAAA,2CAiIMA,SAAS,CAACC,IAAV,EAjIN;;AAAA;AAiIZC,UAAAA,SAjIY;AAkIZC,UAAAA,KAlIY,GAkIJD,SAAS,CAACE,IAAV,CAAeC,MAAf,CAAsBC,KAlIlB;AAqIZC,UAAAA,WArIY,GAqIE,IAAIC,GAAJ,EArIF;AAsIZC,UAAAA,GAtIY,GAsIN,EAtIM;;AAuIlB,eAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGP,KAAK,CAACQ,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/BH,YAAAA,WAAW,CAACK,GAAZ,CAAgBT,KAAK,CAACO,CAAD,CAAL,CAASG,IAAT,CAAcC,EAA9B;AACH,WAzIiB,CA0IlB;;;AACMC,UAAAA,SA3IY,GA2IAR,WAAW,CAACS,MAAZ,EA3IA;;AA6IlB,eAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGV,WAAW,CAACW,IAA5B,EAAkCD,CAAC,EAAnC,EAAuC;AAC7BE,YAAAA,KAD6B,GACrBJ,SAAS,CAACK,IAAV,GAAiBD,KADI;AAE7BE,YAAAA,CAF6B,GAEzB;AACNP,cAAAA,EAAE,EAAEK,KADE;AAENG,cAAAA,OAAO,EAAEH;AAFH,aAFyB;AAOnCV,YAAAA,GAAG,CAACc,IAAJ,CAASF,CAAT;AACH;;AACDG,UAAAA,OAAO,CAACC,GAAR,CAAYhB,GAAZ;AAtJkB,2CAuJXA,GAvJW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB,C,CA2JA;;;AACAiB,MAAM,CAACC,OAAP,GAAiBtC,aAAjB","sourcesContent":["global.fetch = require(\"node-fetch\");\n\nconst request_order = async () => {\n    const query = JSON.stringify({\n        query: `mutation {\n        bulkOperationRunQuery(\n            query:\"\"\"\n            {\n            orders(query: \"created_at:>=2020-01-01\") {\n                edges {\n                node {\n                    id\n                    customerLocale\n                    customer {\n                    addresses {\n                        countryCode\n                    }\n\n                    }\n                    totalPriceSet {\n                    presentmentMoney {\n                        amount\n                        currencyCode\n                    }\n                    shopMoney {\n                        amount\n                        currencyCode\n                    }\n                    }\n                }\n                }\n            }\n            }\n            \"\"\"\n        ) {\n            bulkOperation {\n            id\n            status\n            }\n            userErrors {\n            field\n            message\n            }\n        }\n        }`\n    });\n\n    const check = JSON.stringify({\n        query: `query {\n            currentBulkOperation {\n            id\n            status\n            errorCode\n            createdAt\n            completedAt\n            objectCount\n            fileSize\n            url\n            partialDataUrl\n            }\n        }`\n    });\n\n    const query_short_list = JSON.stringify({\n        query: `query {\n            orders(query: \"created_at:>=2020-01-01\", first: 249) {\n                edges {\n                node {\n                    id\n                    customerLocale\n                    customer {\n                    addresses {\n                        countryCode\n                        country\n                        countryCodeV2\n                    }\n                    }\n                    totalPriceSet {\n                    presentmentMoney {\n                        amount\n                        currencyCode\n                    }\n                    shopMoney {\n                        amount\n                        currencyCode\n                    }\n                    }\n                    createdAt\n                }\n                }\n            }\n        }`\n    });\n\n    const shop = 'haloy.myshopify.com'\n    const accessToken = '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'\n    \n    /*\n    const response = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json',\n        \"X-Shopify-Access-Token\": accessToken,\n        },\n        body: query\n    })\n    \n    const responseJson = await response.json();\n    console.log(responseJson.data.bulkOperationRunQuery)\n\n\n    const response2 = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json',\n        \"X-Shopify-Access-Token\": accessToken,\n        },\n        body: check\n    })\n\n    const checkJson = await response2.json();\n    console.log(checkJson)\n    */\n    const response3 = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json',\n        \"X-Shopify-Access-Token\": accessToken,\n        },\n        body: query_short_list\n    })\n    const orderJson = await response3.json();\n    const data1 = orderJson.data.orders.edges\n\n    var i, j;\n    const country_set = new Set();\n    const tab = []\n    for (i = 0; i < data1.length; i++) {\n        country_set.add(data1[i].node.id);\n    }\n    //console.log(country_set.size)\n    const iterator1 = country_set.values();\n\n    for (j = 0; j < country_set.size; j++) {\n        const value = iterator1.next().value\n        const a = {\n            id: value,\n            content: value\n        }\n       \n        tab.push(a)\n    }\n    console.log(tab)\n    return tab;\n\n};\n  \n//request_order()\nmodule.exports = request_order; \n\n\n"]},"metadata":{},"sourceType":"script"}