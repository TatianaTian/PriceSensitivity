{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState } from 'react';\nimport { Card, Layout, Caption, TextStyle, DisplayText, Select } from '@shopify/polaris';\nimport { HorizontalBar, Doughnut, Bar } from 'react-chartjs-2';\nimport store from 'store-js'; //import '../style/style.css'\n\nconst getPearsonCorrelation = require('../functions/calc_correlation');\n\nconst string_to_list = require('../functions/string_to_list');\n\nconst fetch_from_map = require('../functions/fetch_from_map');\n\nimport { FaArrowDown, FaArrowUp } from 'react-icons/fa';\nexport default function Country_data(props) {\n  const {\n    0: selected,\n    1: setSelected\n  } = useState('all');\n  const handleSelectChange = useCallback(value => setSelected(value), []);\n  console.log('props.product_id_title_map is ', props.product_id_title_map);\n  var options = fetch_from_map(props.select, props.tabs, props.maps, props.product_id_title_map, selected);\n  /*\n  options = [\n  {label: 'All products', value: 'allProducts'},\n  {label: 'Oldest update', value: 'oldestUpdate'},\n  {label: 'Most spent', value: 'mostSpent'},\n  {label: 'Most orders', value: 'mostOrders'},\n  {label: 'Last name A–Z', value: 'lastNameAlpha'},\n  {label: 'Last name Z–A', value: 'lastNameReverseAlpha'},\n  ];*/\n\n  console.log(\"options are \", options);\n  console.log(\"selected from dropdown is \", selected);\n  console.log(\"on tab \", props.select);\n  console.log(\"tabs are \", props.tabs);\n  console.log(\"map is \", props.maps);\n  const date_string = localStorage.getItem('date');\n  const price_string = localStorage.getItem('price');\n  const exchange_rate_string = localStorage.getItem('exchange_rate');\n  const current_level_string = localStorage.getItem('current_level');\n  const correlation = localStorage.getItem('correlation');\n  const regression_fx_string = localStorage.getItem('regression_fx');\n  const regression_sales_string = localStorage.getItem('regression_sales');\n  const regression_predicted_sales_string = localStorage.getItem('regression_predicted_sales');\n  const regression_slop = localStorage.getItem('slop');\n  var date = [];\n  var price = [];\n  var exchange_rate = [];\n  var current_level = [];\n  var regression_fx = [];\n  var regression_sales = [];\n  var regression_predicted_sales = [];\n  var min_bar = 0;\n  var max_bar = 0;\n  var min_line = 0;\n  var max_line = 0;\n  var min_price_range = 0;\n  var max_price_range = 0;\n  var min_sales_range = 0;\n  var max_sales_range = 0;\n\n  if (date_string.includes(',')) {\n    date = string_to_list(localStorage.getItem('date'), '');\n    /*\n    price = string_to_list(store.get('price'),'float')\n    exchange_rate = string_to_list(store.get('exchange_rate'),'float')\n    current_level = string_to_list(store.get('current_level'),'float')  */\n\n    price = string_to_list(price_string, 'float');\n    exchange_rate = string_to_list(exchange_rate_string, 'float');\n    current_level = string_to_list(current_level_string, 'float');\n    regression_fx = string_to_list(regression_fx_string, 'float');\n    regression_sales = string_to_list(regression_sales_string, 'float');\n    regression_predicted_sales = string_to_list(regression_predicted_sales_string, 'float');\n    min_price_range = Math.min.apply(Math, regression_fx);\n    max_price_range = Math.max.apply(Math, regression_fx);\n    min_sales_range = Math.min.apply(Math, regression_sales);\n    max_sales_range = Math.max.apply(Math, regression_sales);\n    min_bar = Math.min.apply(Math, price) * 0.8;\n    max_bar = (Math.max.apply(Math, price) - min_bar) * 2.2 + min_bar;\n    max_line = Math.max.apply(Math, exchange_rate);\n    min_line = max_line - (max_line - Math.min.apply(Math, exchange_rate)) * 2.2;\n    console.log(\"y is \", [min_bar, max_bar, min_line, max_line]);\n  } else {\n    date = [date_string];\n    price = [price_string];\n    exchange_rate = [exchange_rate_string];\n    current_level = string_to_list(store.get('current_level'), 'float');\n  }\n\n  console.log(\"regression_fx is \", regression_fx);\n  console.log(\"regression_sales is \");\n  console.log(\"regression_predicted_sales is \", regression_predicted_sales); //const level = store.get('level') \n\n  var r = parseInt(Math.min(Math.abs(parseFloat(correlation)), 1) * 100); //r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1) * 100)\n\n  const doughnut = [r, 100 - r];\n  var leve_num1 = [Math.max(current_level[0] * 100 - 2, 0), Math.max(current_level[1] * 100 - 2, 0), Math.max(current_level[2] * 100 - 2, 0), Math.max(current_level[3] * 100 - 2, 0)]; //console.log(\"level-num1 is \", leve_num1)\n\n  var leve_num3 = [98 - leve_num1[0], 98 - leve_num1[1], 98 - leve_num1[2], 98 - leve_num1[3]]; //console.log(\"level-num3 is \", leve_num3)\n\n  const leve_num2 = [2, 2, 2, 2];\n  /*\n  console.log(\"date is \", date)\n  console.log(\"price is \", price)\n  console.log(\"exchange_rate is \", exchange_rate)\n  console.log(\"current_level is \", current_level)\n  console.log(\"correlation is \", correlation)*/\n\n  var color = '';\n  var text = '';\n\n  if (r < 30) {\n    color = '#63b7af';\n    text = 'LOW';\n  } else if (r < 60) {\n    color = '#ffa41b';\n    text = 'MODERATE';\n  } else {\n    color = '#ff6f5e';\n    text = 'HIGH';\n  }\n\n  const doughnutChartData = {\n    labels: [text + ': ' + r],\n    datasets: [{\n      //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n      backgroundColor: [color, \"#ECECEC\"],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: doughnut\n    }]\n  };\n  const doughnutChartOptions = {\n    circumference: 1 * Math.PI,\n    rotation: Math.PI,\n    maintainAspectRatio: true,\n    cutoutPercentage: 80,\n    tooltips: {\n      enabled: false\n    },\n    legend: {\n      display: true,\n      position: 'bottom',\n      align: 'center',\n      labels: {\n        fontSize: 20,\n        boxWidth: 0,\n        fontColor: '#222831'\n      }\n    },\n    pieceLabel: {\n      render: 'value' + '%',\n      fontColor: \"white\"\n    },\n    layout: {\n      padding: {\n        left: 80,\n        right: 20,\n        top: 20,\n        bottom: 20\n      }\n    }\n  };\n  var lineChartData = {\n    //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n    labels: date,\n    //lables: [price[0],price[1],price[2]],\n    datasets: [{\n      yAxisID: 'A',\n      type: \"bar\",\n      label: \"sales in store currency\",\n      fill: false,\n      lineTension: 0,\n      backgroundColor: \"#63b7af\",\n      borderColor: \"#63b7af\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"rgb(1, 2, 58)\",\n      pointBackgroundColor: \"rgb(1, 2, 58)\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [89.54, 96.8, 246.51],\n      data: price,\n      //data: [store.get('price')],\n      spanGaps: false,\n      barPercentage: 0.3\n    }, {\n      yAxisID: 'B',\n      type: \"line\",\n      label: \"product price\",\n      fill: false,\n      lineTension: 0.3,\n      backgroundColor: \"#ee8572\",\n      borderColor: \"#ee8572\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"#ee8572\",\n      pointBackgroundColor: \"#ee8572\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"#ee8572\",\n      pointHoverBorderColor: \"#ee8572\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [0.8072950291, 0.8072950291, 0.8072950291],\n      data: exchange_rate,\n      //data: [store.get('exchange_rate')],\n      spanGaps: false\n    }]\n  };\n  var lineChartOptions = {\n    maintainAspectRatio: true,\n    tooltips: {\n      enabled: true\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      yAxes: [{\n        id: 'A',\n        type: 'linear',\n        position: 'left',\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        },\n        ticks: {\n          min: min_bar,\n          max: max_bar\n        }\n      }, {\n        id: 'B',\n        type: 'linear',\n        position: 'right',\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        },\n        ticks: {\n          min: min_line,\n          max: max_line\n        }\n      }],\n      xAxes: [{\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 50,\n        right: 50,\n        top: 20,\n        bottom: 20\n      }\n    }\n  };\n  var lineRegressionChartData = {\n    //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n    //labels: [0.8,0.9,1.0],\n    labels: regression_fx,\n    datasets: [{\n      type: \"line\",\n      label: \"sales in store currency\",\n      fill: false,\n      lineTension: 0,\n      backgroundColor: \"#fffffff\",\n      borderWidth: 0,\n      borderColor: \"#ffffff\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"rgb(1, 2, 58)\",\n      pointBackgroundColor: \"rgb(1, 2, 58)\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [89.54, 96.8, 246.51],\n      //data: [209, 555, 143],\n      data: regression_sales,\n      spanGaps: false,\n      barPercentage: 0.3\n    }, {\n      type: \"line\",\n      label: \"fitted model\",\n      fill: false,\n      backgroundColor: \"#D3D3D3\",\n      borderColor: \"#D3D3D3\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"#D3D3D3\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"#D3D3D3\",\n      pointHoverBorderColor: \"#D3D3D3\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      //data: [100,200,300],\n      data: regression_predicted_sales,\n      spanGaps: false\n    }]\n  };\n  var lineRegressionChartOptions = {\n    maintainAspectRatio: true,\n    tooltips: {\n      enabled: true\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      yAxes: [{\n        id: 'A',\n        type: 'linear',\n        //position: 'left',\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        } //ticks: {min: min_bar,\n        //    max: max_bar}\n\n      }],\n      xAxes: [{\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 50,\n        right: 50,\n        top: 20,\n        bottom: 20\n      }\n    }\n  };\n  const barChartData = {\n    labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP', 'US - Aaa Corporate Bonds', 'US - S&P 500'],\n    datasets: [{\n      backgroundColor: [\"#ff6f5e\", '#ffa41b', '#b2ebf2', '#35495e', '#63b7af'],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: [0.65, 0.50, 0.47, 0.39, 0.37]\n    }]\n  };\n  const barChartOptions = {\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        ticks: {\n          min: 0,\n          max: 1,\n          callback: function (value) {\n            return value;\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: \"Correlation Coefficient (Absolute Value)\"\n        },\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }],\n      yAxes: [{\n        barPercentage: 0.3,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 20,\n        right: 80,\n        top: 20,\n        bottom: 20\n      }\n    }\n  };\n  const rangeChartData = {\n    labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n    datasets: [{\n      label: 'range',\n      backgroundColor: '#35495e',\n      stack: '3',\n      data: leve_num1\n    }, {\n      backgroundColor: '#63b7af',\n      stack: '3',\n      data: leve_num2\n    }, {\n      label: 'range2',\n      backgroundColor: '#35495e',\n      stack: '3',\n      data: leve_num3\n    }]\n  };\n  const rangeChartOptions = {\n    maintainAspectRatio: true,\n    tooltips: {\n      enabled: false\n    },\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        stacked: true,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        },\n        ticks: {\n          min: 0,\n          max: 100,\n          callback: function (value) {\n            return value + \"%\";\n          }\n        }\n      }],\n      yAxes: [{\n        stacked: true,\n        barPercentage: 0.4,\n        gridLines: {\n          color: \"rgba(0, 0, 0, 0)\"\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 20,\n        right: 80,\n        top: 20,\n        bottom: 20\n      }\n    }\n  }; //console.log(\"height is \", [height2, h1, h2, h3])\n\n  return __jsx(Layout, {\n    sectioned: false\n  }, __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Select, {\n    label: \"Analytics on\",\n    labelInline: true,\n    options: options,\n    onChange: handleSelectChange,\n    value: selected\n  }), __jsx(Card, {\n    title: \"Price Sensitivity\",\n    sectioned: true\n  }, __jsx(Doughnut, {\n    height: \"60vh\",\n    data: doughnutChartData,\n    options: doughnutChartOptions\n  })), __jsx(Card, {\n    title: \"Most Price Sentitive Products in the Country\",\n    sectioned: true\n  }, __jsx(HorizontalBar, {\n    height: \"80vh\",\n    data: barChartData,\n    options: barChartOptions\n  })), __jsx(Card, {\n    title: \"Price And Sales By Date\",\n    sectioned: true\n  }, __jsx(Bar, {\n    height: \"150vh\",\n    data: lineChartData,\n    options: lineChartOptions\n  }))), __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Card, {\n    title: \"Sales And Prices Correlation\",\n    sectioned: true\n  }, __jsx(Bar, {\n    height: \"150vh\",\n    data: lineRegressionChartData,\n    options: lineRegressionChartOptions\n  }), __jsx(Card, {\n    title: \"Analytics\",\n    sectioned: true\n  }, __jsx(\"p\", null, \"Price range: \", min_price_range, \" \", props.tabs[props.select]['id'], \" - \", max_price_range, \" \", props.tabs[props.select]['id']), __jsx(\"br\", null), __jsx(\"p\", null, \"Sales range: \", min_sales_range, \" USD - \", max_sales_range, \" USD per day\"), __jsx(\"br\", null), __jsx(\"p\", null, __jsx(FaArrowDown, null), \" 1 \", props.tabs[props.select]['id'], \" in price\"), __jsx(\"br\", null), __jsx(\"p\", null, __jsx(FaArrowUp, null), \" \", regression_slop, \" USD sales/day\"), __jsx(\"br\", null), __jsx(\"p\", null, \"Current price: 21 \", props.tabs[props.select]['id']), __jsx(\"br\", null), __jsx(\"p\", null, \"Current Sales indicated from historical sales/prices correlation: 220 USD per day\"), __jsx(\"br\", null))), __jsx(Card, {\n    title: \"The current price level\",\n    sectioned: true\n  }, __jsx(HorizontalBar, {\n    height: \"100vh\",\n    data: rangeChartData,\n    options: rangeChartOptions\n  }))));\n}","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/Country_data.js"],"names":["React","useCallback","useState","Card","Layout","Caption","TextStyle","DisplayText","Select","HorizontalBar","Doughnut","Bar","store","getPearsonCorrelation","require","string_to_list","fetch_from_map","FaArrowDown","FaArrowUp","Country_data","props","selected","setSelected","handleSelectChange","value","console","log","product_id_title_map","options","select","tabs","maps","date_string","localStorage","getItem","price_string","exchange_rate_string","current_level_string","correlation","regression_fx_string","regression_sales_string","regression_predicted_sales_string","regression_slop","date","price","exchange_rate","current_level","regression_fx","regression_sales","regression_predicted_sales","min_bar","max_bar","min_line","max_line","min_price_range","max_price_range","min_sales_range","max_sales_range","includes","Math","min","apply","max","get","r","parseInt","abs","parseFloat","doughnut","leve_num1","leve_num3","leve_num2","color","text","doughnutChartData","labels","datasets","backgroundColor","borderColor","borderWidth","data","doughnutChartOptions","circumference","PI","rotation","maintainAspectRatio","cutoutPercentage","tooltips","enabled","legend","display","position","align","fontSize","boxWidth","fontColor","pieceLabel","render","layout","padding","left","right","top","bottom","lineChartData","yAxisID","type","label","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","spanGaps","barPercentage","lineChartOptions","scales","yAxes","id","gridLines","ticks","xAxes","lineRegressionChartData","lineRegressionChartOptions","barChartData","barChartOptions","callback","scaleLabel","labelString","rangeChartData","stack","rangeChartOptions","stacked"],"mappings":"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","sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {Card, Layout, Caption, TextStyle,DisplayText, Select} from '@shopify/polaris';\nimport {HorizontalBar, Doughnut, Bar} from 'react-chartjs-2';\nimport store from 'store-js';\n//import '../style/style.css'\nconst getPearsonCorrelation = require('../functions/calc_correlation')\nconst string_to_list = require('../functions/string_to_list')\nconst fetch_from_map = require('../functions/fetch_from_map')\nimport {FaArrowDown, FaArrowUp} from 'react-icons/fa';\n\n\n\n\nexport default function Country_data(props) {  \n\n    const [selected, setSelected] = useState('all');\n    const handleSelectChange = useCallback((value) => setSelected(value), []);\n    console.log('props.product_id_title_map is ', props.product_id_title_map)\n    var options = fetch_from_map(props.select, props.tabs, props.maps, props.product_id_title_map, selected)\n\n    \n    \n  \n    /*\n    options = [\n    {label: 'All products', value: 'allProducts'},\n    {label: 'Oldest update', value: 'oldestUpdate'},\n    {label: 'Most spent', value: 'mostSpent'},\n    {label: 'Most orders', value: 'mostOrders'},\n    {label: 'Last name A–Z', value: 'lastNameAlpha'},\n    {label: 'Last name Z–A', value: 'lastNameReverseAlpha'},\n    ];*/\n\n    console.log(\"options are \", options)\n    console.log(\"selected from dropdown is \", selected)\n    console.log(\"on tab \", props.select)\n    console.log(\"tabs are \", props.tabs)\n    console.log(\"map is \", props.maps)\n    \n\n    \n\n\n    const date_string = localStorage.getItem('date')\n    const price_string = localStorage.getItem('price')\n    const exchange_rate_string = localStorage.getItem('exchange_rate')\n    const current_level_string = localStorage.getItem('current_level')\n    const correlation = localStorage.getItem('correlation')\n    const regression_fx_string = localStorage.getItem('regression_fx');\n    const regression_sales_string = localStorage.getItem('regression_sales');\n    const regression_predicted_sales_string = localStorage.getItem('regression_predicted_sales');\n    const regression_slop = localStorage.getItem('slop');\n\n\n    var date = []\n    var price = []\n    var exchange_rate = []\n    var current_level = []\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n\n    var min_bar = 0\n    var max_bar = 0\n    var min_line = 0\n    var max_line = 0\n    var min_price_range = 0\n    var max_price_range = 0\n    var min_sales_range = 0\n    var max_sales_range = 0\n\n\n    if (date_string.includes(',')){\n        date = string_to_list(localStorage.getItem('date'),'')\n        /*\n        price = string_to_list(store.get('price'),'float')\n        exchange_rate = string_to_list(store.get('exchange_rate'),'float')\n        current_level = string_to_list(store.get('current_level'),'float')  */\n        price = string_to_list(price_string,'float')\n        exchange_rate = string_to_list(exchange_rate_string,'float')\n        current_level = string_to_list(current_level_string,'float')  \n\n        \n        regression_fx = string_to_list(regression_fx_string,'float')\n        regression_sales = string_to_list(regression_sales_string,'float')\n        regression_predicted_sales = string_to_list(regression_predicted_sales_string,'float')\n\n        min_price_range = Math.min.apply(Math, regression_fx)\n        max_price_range = Math.max.apply(Math, regression_fx)\n        min_sales_range = Math.min.apply(Math, regression_sales)\n        max_sales_range = Math.max.apply(Math, regression_sales)\n        \n        min_bar = Math.min.apply(Math, price)*0.8\n        max_bar = (Math.max.apply(Math, price)-min_bar)*2.2+min_bar\n\n        max_line = Math.max.apply(Math, exchange_rate)\n        min_line = max_line - (max_line - Math.min.apply(Math, exchange_rate) )*2.2\n\n        console.log(\"y is \", [min_bar, max_bar, min_line, max_line])\n        \n\n    } else {\n        date = [date_string]\n        price = [price_string]\n        exchange_rate = [exchange_rate_string]\n        current_level = string_to_list(store.get('current_level'),'float')\n    }\n\n       \n    console.log(\"regression_fx is \", regression_fx);\n    console.log(\"regression_sales is \", );\n    console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n\n\n    \n    //const level = store.get('level') \n    var r = parseInt(Math.min(Math.abs(parseFloat(correlation)), 1) * 100)\n    //r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1) * 100)\n    const doughnut = [r, 100-r]\n    \n\n    var leve_num1 = [Math.max(current_level[0]*100-2,0), Math.max(current_level[1]*100-2,0), Math.max(current_level[2]*100-2,0), Math.max(current_level[3]*100-2,0)]\n    //console.log(\"level-num1 is \", leve_num1)\n    var leve_num3 = [98-leve_num1[0],98-leve_num1[1],98-leve_num1[2],98-leve_num1[3]]\n    //console.log(\"level-num3 is \", leve_num3)\n    const leve_num2 = [2, 2, 2, 2]\n\n\n    /*\n    console.log(\"date is \", date)\n    console.log(\"price is \", price)\n    console.log(\"exchange_rate is \", exchange_rate)\n    console.log(\"current_level is \", current_level)\n    console.log(\"correlation is \", correlation)*/\n \n    \n    var color = ''\n    var text = ''\n    if (r < 30){\n        color = '#63b7af'\n        text = 'LOW'\n    } else if (r < 60){\n        color = '#ffa41b'\n        text = 'MODERATE'\n    } else {\n        color = '#ff6f5e'\n        text = 'HIGH'\n    }\n    \n    \n    \n    const doughnutChartData = {\n      labels: [text+': '+r],\n      datasets: [\n        {\n          //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n          backgroundColor: [color,\"#ECECEC\"],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          data: doughnut,\n    \n        }\n      ],\n    };\n      \n    const doughnutChartOptions = {\n      circumference: 1* Math.PI,\n      rotation: Math.PI,\n      maintainAspectRatio: true,\n      cutoutPercentage:80,\n      tooltips:{\n        enabled:false,\n      },\n      legend: {\n                display: true,\n                position: 'bottom',\n                align:'center',\n                labels:{\n                    fontSize: 20,\n                    boxWidth: 0,\n                    fontColor: '#222831'\n                }\n              },\n      pieceLabel: {\n        render: 'value' + '%',\n        fontColor: \"white\",\n      },\n    layout: {\n        padding: {\n            left: 80,\n            right: 20,\n            top: 20,\n            bottom: 20\n        }\n    } \n      };\n    \n    var lineChartData = {\n      //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n      labels: date,\n      //lables: [price[0],price[1],price[2]],\n      datasets: [{\n        yAxisID: 'A',\n        type: \"bar\",\n        label: \"sales in store currency\",\n        fill: false,\n        lineTension: 0,\n        backgroundColor: \"#63b7af\",\n        borderColor: \"#63b7af\",\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: \"rgb(1, 2, 58)\",\n        pointBackgroundColor: \"rgb(1, 2, 58)\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10,\n        // notice the gap in the data and the spanGaps: false\n        //data: [89.54, 96.8, 246.51],\n        data: price,\n        //data: [store.get('price')],\n        spanGaps: false,\n        barPercentage: 0.3\n        },\n        {\n          yAxisID: 'B',\n          type: \"line\",\n          label: \"product price\",\n          fill: false,\n          lineTension: 0.3,\n          backgroundColor: \"#ee8572\",\n          borderColor: \"#ee8572\",\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: \"#ee8572\",\n          pointBackgroundColor: \"#ee8572\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"#ee8572\",\n          pointHoverBorderColor: \"#ee8572\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 4,\n          pointHitRadius: 10,\n          // notice the gap in the data and the spanGaps: false\n          //data: [0.8072950291, 0.8072950291, 0.8072950291],\n          data: exchange_rate,\n          //data: [store.get('exchange_rate')],\n          spanGaps: false,\n          }\n    \n      ]\n      };\n    \n    var lineChartOptions = {\n      maintainAspectRatio: true,\n      tooltips:{\n        enabled:true,\n      },\n      legend: {\n        display: false,\n      },\n      scales: {\n                yAxes:\n                [{\n                    id: 'A',\n                    type: 'linear',\n                    position: 'left',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                        min: min_bar,\n                        max: max_bar\n                    }\n    \n     \n                  }, {\n                    id: 'B',\n                    type: 'linear',\n                    position: 'right',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                        min: min_line,\n                        max: max_line\n                    }\n    \n    \n                  }],\n                xAxes: [{\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],            \n            },\n        layout: {\n              padding: {\n                  left: 50,\n                  right: 50,\n                  top: 20,\n                  bottom: 20\n              }\n          }   \n    };\n\n    var lineRegressionChartData = {\n        //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n        //labels: [0.8,0.9,1.0],\n        labels: regression_fx,\n        datasets: [{\n   \n          type: \"line\",\n          label: \"sales in store currency\",\n          fill: false,\n          lineTension: 0,\n          backgroundColor: \"#fffffff\",\n          borderWidth: 0,\n          borderColor: \"#ffffff\",\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: \"rgb(1, 2, 58)\",\n          pointBackgroundColor: \"rgb(1, 2, 58)\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n          pointHoverBorderColor: \"rgb(1, 2, 58)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 4,\n          pointHitRadius: 10,\n          // notice the gap in the data and the spanGaps: false\n          //data: [89.54, 96.8, 246.51],\n          //data: [209, 555, 143],\n          data: regression_sales,\n          spanGaps: false,\n          barPercentage: 0.3\n          },\n          {\n            type: \"line\",\n            label: \"fitted model\",\n            fill: false,\n            backgroundColor: \"#D3D3D3\",\n            borderColor: \"#D3D3D3\",\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: \"#D3D3D3\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"#D3D3D3\",\n            pointHoverBorderColor: \"#D3D3D3\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            //data: [100,200,300],\n            data: regression_predicted_sales,\n            spanGaps: false,\n            }\n        ]\n        };\n      \n      var lineRegressionChartOptions = {\n        maintainAspectRatio: true,\n        tooltips:{\n          enabled:true,\n        },\n        legend: {\n          display: false,\n        },\n        scales: {\n                  yAxes:\n                  [{\n                      id: 'A',\n                      type: 'linear',\n                      //position: 'left',\n                      gridLines: {\n                          color: \"rgba(0, 0, 0, 0)\",\n                      },\n                      //ticks: {min: min_bar,\n                      //    max: max_bar}\n      \n       \n                    }],\n                  xAxes: [{\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                  }\n                  },],            \n              },\n          layout: {\n                padding: {\n                    left: 50,\n                    right: 50,\n                    top: 20,\n                    bottom: 20\n                }\n            }   \n      };\n    \n    \n    const barChartData = {\n      labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP',\n                'US - Aaa Corporate Bonds', 'US - S&P 500'],\n      datasets: [\n        {\n          backgroundColor: [\"#ff6f5e\", '#ffa41b','#b2ebf2','#35495e','#63b7af'],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          data: [0.65, 0.50, 0.47, 0.39, 0.37]\n        }\n      ],\n    };\n    \n    const barChartOptions = {\n    \n      legend: {\n                display: false,\n              },\n    \n      scales: {\n                xAxes: [{\n                  ticks: {\n                    min: 0,\n                    max: 1,\n                    callback: function(value) {\n                        return value\n                    }\n                  },\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"Correlation Coefficient (Absolute Value)\"\n                  },\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],\n                yAxes: [{\n                  barPercentage: 0.3,\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],\n              },\n        layout: {\n                padding: {\n                    left: 20,\n                    right: 80,\n                    top: 20,\n                    bottom: 20\n                }\n            }  \n    };\n    \n    const rangeChartData = {\n        labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n        datasets: [\n        {\n        label: 'range',\n        backgroundColor: '#35495e',\n        stack: '3',\n        data: leve_num1,\n        },\n        {\n        backgroundColor: '#63b7af',\n        stack: '3',\n        data: leve_num2,\n        },\n        {\n          label: 'range2',\n          backgroundColor: '#35495e',\n          stack: '3',\n          data: leve_num3,\n          },\n        ],\n      };\n        \n      const rangeChartOptions = {\n        maintainAspectRatio: true,\n        tooltips:{\n          enabled:false,\n        },\n        legend: {\n                  display: false,\n                },\n        scales: {\n                  xAxes: [{\n                    stacked: true,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                      min: 0,\n                      max: 100,\n                      callback: function(value) {\n                          return value + \"%\"\n                      }\n                    }\n                  },],\n                  yAxes: [{\n                    stacked: true,\n                    barPercentage: 0.4,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                  }\n                  \n                  },],\n                },\n                layout: {\n                  padding: {\n                      left: 20,\n                      right: 80,\n                      top: 20,\n                      bottom: 20\n                  }\n              }  \n        };\n\n        //console.log(\"height is \", [height2, h1, h2, h3])\n    return (\n            <Layout sectioned={false}>\n                <Layout.Section oneHalf>\n                    <Select\n                            label=\"Analytics on\"\n                            labelInline\n                            options={options}\n                            onChange={handleSelectChange}\n                            value={selected}\n                            />\n                    <Card title=\"Price Sensitivity\" sectioned>\n                    <Doughnut\n                        height= \"60vh\"\n                        data={doughnutChartData}\n                        options={doughnutChartOptions}\n                    />\n                    </Card>\n                    <Card title=\"Most Price Sentitive Products in the Country\" sectioned>\n                    <HorizontalBar \n                        height=\"80vh\"\n                        data={barChartData}\n                        options={barChartOptions}\n                    />\n                    </Card>\n                    <Card title=\"Price And Sales By Date\" sectioned>\n                    <Bar \n                        height=\"150vh\"\n                        data={lineChartData}\n                        options={lineChartOptions}\n                        />\n                    </Card>\n                </Layout.Section>\n                <Layout.Section oneHalf>\n                    <Card title=\"Sales And Prices Correlation\" sectioned>\n                        <Bar \n                            height=\"150vh\"\n                            data={lineRegressionChartData}\n                            options={lineRegressionChartOptions}\n                        />\n                        <Card title=\"Analytics\" sectioned>\n                            <p>Price range: {min_price_range} {props.tabs[props.select]['id']} - {max_price_range} {props.tabs[props.select]['id']}</p><br/>\n                            <p>Sales range: {min_sales_range} USD - {max_sales_range} USD per day</p><br/>\n                            <p><FaArrowDown/> 1 {props.tabs[props.select]['id']} in price</p><br/>\n                            <p><FaArrowUp/> {regression_slop} USD sales/day</p><br/>\n                            <p>Current price: 21 {props.tabs[props.select]['id']}</p><br/>\n                            <p>Current Sales indicated from historical sales/prices correlation: 220 USD per day</p><br/>\n                        </Card>\n                    </Card>\n                    <Card title=\"The current price level\" sectioned>\n                        <HorizontalBar \n                            height=\"100vh\"\n                            data={rangeChartData}\n                            options={rangeChartOptions}\n                        />\n                    </Card>\n                </Layout.Section>\n            </Layout>\n      \n         \n\n    );\n  }\n\n"]},"metadata":{},"sourceType":"module"}