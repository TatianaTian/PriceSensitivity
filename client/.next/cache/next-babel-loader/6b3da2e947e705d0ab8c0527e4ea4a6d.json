{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/esm/slicedToArray\"));\n\nvar _storeJs = _interopRequireDefault(require(\"store-js\"));\n\nvar _polaris = require(\"@shopify/polaris\");\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar getPearsonCorrelation = require('./calc_correlation');\n\nvar linear_regression = require('./linear_regression');\n\nvar fetch_from_map = function fetch_from_map(select, tabs, maps, product_id_title_map, dropdown_select, product_id_price_map) {\n  try {\n    if (select !== 0) {\n      // fetch data for graphs\n      var selected_currency = tabs[select]['id'];\n      console.log(\"selected currency is \", selected_currency);\n      console.log(\"dropdown_select is \", dropdown_select);\n      var selected_data_all_products = maps.get(selected_currency);\n      var selected_data = selected_data_all_products.get(dropdown_select);\n      var product_price = product_id_price_map.get(dropdown_select);\n      console.log(\"product_price is \", product_price);\n      Math.round(100 * sales[i]) / 100;\n\n      var _linear_regression = linear_regression(selected_data[1], selected_data[2]),\n          _linear_regression2 = (0, _slicedToArray2[\"default\"])(_linear_regression, 4),\n          regression_fx = _linear_regression2[0],\n          regression_sales = _linear_regression2[1],\n          regression_predicted_sales = _linear_regression2[2],\n          slope = _linear_regression2[3];\n\n      var regression_product_price = regression_fx.map(function (element) {\n        return Math.round(100 * element * product_price) / 100;\n      });\n      console.log(\"regression_fx is \", regression_product_price);\n      console.log(\"regression_sales is \", regression_sales);\n      console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n      console.log(\"slope is \", slope);\n      console.log(\"selected data is \", selected_data);\n      localStorage.setItem('date', selected_data[0]);\n      localStorage.setItem('price', selected_data[1]);\n      localStorage.setItem('exchange_rate', selected_data[2]);\n      localStorage.setItem('current_level', selected_data[3]);\n      localStorage.setItem('correlation', getPearsonCorrelation(selected_data[1], selected_data[2])); //localStorage.setItem('regression_fx', regression_fx);\n\n      localStorage.setItem('regression_fx', regression_fx * product_price);\n      localStorage.setItem('regression_sales', regression_sales);\n      localStorage.setItem('regression_predicted_sales', regression_predicted_sales);\n      localStorage.setItem('slope', slope);\n      console.log(\"done storing\");\n      /*\n      console.log(\"localStorage.getItem('date') is\",localStorage.getItem('date'))\n      console.log(\"localStorage.getItem('price') is\",localStorage.getItem('price'))\n      console.log(\"localStorage.getItem('exchange_rate') is\",localStorage.getItem('exchange_rate'))*/\n      // find the product price\n      // filter options\n\n      console.log(\"selected_data_all_products is\", selected_data_all_products);\n      console.log('product_id_title_map is ', product_id_title_map);\n      var num_dates = 0;\n      var options = [];\n\n      var _iterator = _createForOfIteratorHelper(selected_data_all_products),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = (0, _slicedToArray2[\"default\"])(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n\n          num_dates = value[0].length;\n\n          if (num_dates > 1) {\n            var price_set = new Set(value[1]);\n            var fx_set = new Set(value[2]);\n\n            if (price_set.size > 1 && fx_set.size > 1) {\n              console.log('use key to get name ', product_id_title_map.get(key));\n              options.push({\n                label: product_id_title_map.get(key),\n                value: key\n              });\n            }\n          }\n\n          console.log(key + ' = ' + value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  } catch (err) {\n    console.log(\"no id\");\n  }\n\n  return options;\n};\n\nmodule.exports = fetch_from_map;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/fetch_from_map.js"],"names":["getPearsonCorrelation","require","linear_regression","fetch_from_map","select","tabs","maps","product_id_title_map","dropdown_select","product_id_price_map","selected_currency","console","log","selected_data_all_products","get","selected_data","product_price","Math","round","sales","i","regression_fx","regression_sales","regression_predicted_sales","slope","regression_product_price","map","element","localStorage","setItem","num_dates","options","key","value","length","price_set","Set","fx_set","size","push","label","err","module","exports"],"mappings":"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","sourcesContent":["import store from 'store-js';\nimport { KeypressListener } from '@shopify/polaris';\n\nconst getPearsonCorrelation = require('./calc_correlation')\nconst linear_regression = require('./linear_regression')\n\nconst fetch_from_map = (select, tabs, maps, product_id_title_map, dropdown_select, product_id_price_map) => {\n\n\n    try{\n        \n        if (select !== 0){\n            // fetch data for graphs\n            const selected_currency = tabs[select]['id']\n            console.log(\"selected currency is \", selected_currency)\n            console.log(\"dropdown_select is \", dropdown_select)\n\n\n            const selected_data_all_products = maps.get(selected_currency)\n            const selected_data = selected_data_all_products.get(dropdown_select)\n            const product_price = product_id_price_map.get(dropdown_select)\n            console.log(\"product_price is \", product_price)\n            Math.round(100*sales[i])/100;\n\n            const [regression_fx, regression_sales, regression_predicted_sales, slope] = linear_regression(selected_data[1],selected_data[2])\n\n            var regression_product_price = regression_fx.map(function(element) {\n                return Math.round(100*element*product_price)/100;\n            });\n                \n            console.log(\"regression_fx is \", regression_product_price);\n            console.log(\"regression_sales is \", regression_sales);\n            console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n            console.log(\"slope is \", slope);\n    \n            console.log(\"selected data is \", selected_data)\n\n            localStorage.setItem('date', selected_data[0]);\n            localStorage.setItem('price', selected_data[1]);\n            localStorage.setItem('exchange_rate', selected_data[2]);\n            localStorage.setItem('current_level', selected_data[3]);\n            localStorage.setItem('correlation', getPearsonCorrelation(selected_data[1],selected_data[2]));\n            //localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_fx', regression_fx*product_price);\n            localStorage.setItem('regression_sales', regression_sales);\n            localStorage.setItem('regression_predicted_sales', regression_predicted_sales);\n            localStorage.setItem('slope', slope);\n\n            console.log(\"done storing\")\n            /*\n            console.log(\"localStorage.getItem('date') is\",localStorage.getItem('date'))\n            console.log(\"localStorage.getItem('price') is\",localStorage.getItem('price'))\n            console.log(\"localStorage.getItem('exchange_rate') is\",localStorage.getItem('exchange_rate'))*/\n\n            // find the product price\n\n\n\n\n\n\n\n            // filter options\n            console.log(\"selected_data_all_products is\",selected_data_all_products)\n            console.log('product_id_title_map is ', product_id_title_map)\n            var num_dates = 0\n            var options = []\n            for (let [key, value] of selected_data_all_products) {\n                num_dates = value[0].length\n                if (num_dates>1){\n                    var price_set = new Set(value[1]);\n                    var fx_set = new Set(value[2]);\n                    if (price_set.size>1 && fx_set.size>1){\n                        console.log('use key to get name ', product_id_title_map.get(key))\n                        options.push(\n                            {\n                                label:product_id_title_map.get(key), value: key\n                            }\n                        )\n                    }\n\n                 \n                }\n\n                console.log(key + ' = ' + value)\n              }\n\n\n        }\n\n        \n\n\n\n    } catch(err){\n        console.log(\"no id\")\n    }\n    \n    return options\n}\n\nmodule.exports = fetch_from_map; \n\n"]},"metadata":{},"sourceType":"script"}