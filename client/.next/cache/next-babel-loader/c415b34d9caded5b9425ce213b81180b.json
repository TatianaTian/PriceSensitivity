{"ast":null,"code":"// import \nlet position = require('./positionGenerator');\n\nfunction place_trade() {\n  // user confirms the lock: collect buyer/seller currencies, units, locked_rate from Shopify\n  var buyer_currency = 'AUD';\n  var seller_currency = 'USD';\n  var locked_rate = '1.25';\n  var units_buyer = 75; //in buyer's currencies\n\n  var account = ''; // connect to ONADA\n\n  let common = require('./lib/common');\n\n  let config = require('./lib/config');\n\n  let argv = require('yargs').alias('config', 'c').nargs('config', 1).describe('config', \"v20 Configuration File to use\").default('config', config.defaultConfigFile()).argv;\n\n  let conf = new config.Config(argv.config);\n  let ctx = conf.createContext(); // generate the trading direction\n\n  var [trade_direction, tradeQuantity, currency_pair] = position.positionTrader(buyer_currency, seller_currency, units_buyer, locked_rate);\n\n  if (trade_direction === 'buy') {\n    units_buyer = Math.round(tradeQuantity);\n    account = conf.buyAccount;\n  } else if (trade_direction === 'sell') {\n    units_buyer = Math.round(tradeQuantity * -1);\n    account = conf.sellAccount;\n  }\n\n  console.log('trade account ', account); // place limit trades, buy orders to buy_account, sell orders to sell_account\n\n  let marketOrder = new ctx.order.MarketOrderRequest({\n    instrument: currency_pair,\n    units: units_buyer,\n    timeInForce: 'IOC' //priceBound: locked_rate\n\n  });\n  ctx.order.market(account, marketOrder, response => {\n    common.handleErrorResponse(response);\n    common.dumpOrderCreateResponse(response);\n  });\n}","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_app/trade/trades/src/place_trades.js"],"names":["position","require","place_trade","buyer_currency","seller_currency","locked_rate","units_buyer","account","common","config","argv","alias","nargs","describe","default","defaultConfigFile","conf","Config","ctx","createContext","trade_direction","tradeQuantity","currency_pair","positionTrader","Math","round","buyAccount","sellAccount","console","log","marketOrder","order","MarketOrderRequest","instrument","units","timeInForce","market","response","handleErrorResponse","dumpOrderCreateResponse"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AAEA,SAASC,WAAT,GAAsB;AAClB;AACA,MAAIC,cAAc,GAAG,KAArB;AACA,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,WAAW,GAAG,MAAlB;AACA,MAAIC,WAAW,GAAG,EAAlB,CALkB,CAKI;;AACtB,MAAIC,OAAO,GAAG,EAAd,CANkB,CAQlB;;AACA,MAAIC,MAAM,GAAGP,OAAO,CAAC,cAAD,CAApB;;AACA,MAAIQ,MAAM,GAAGR,OAAO,CAAC,cAAD,CAApB;;AAEA,MAAIS,IAAI,GAAGT,OAAO,CAAC,OAAD,CAAP,CACVU,KADU,CACJ,QADI,EACM,GADN,EAEVC,KAFU,CAEJ,QAFI,EAEM,CAFN,EAGVC,QAHU,CAGD,QAHC,EAGS,+BAHT,EAIVC,OAJU,CAIF,QAJE,EAIQL,MAAM,CAACM,iBAAP,EAJR,EAKVL,IALD;;AAOA,MAAIM,IAAI,GAAG,IAAIP,MAAM,CAACQ,MAAX,CAAkBP,IAAI,CAACD,MAAvB,CAAX;AACA,MAAIS,GAAG,GAAGF,IAAI,CAACG,aAAL,EAAV,CApBkB,CAsBlB;;AACA,MAAI,CAACC,eAAD,EAAkBC,aAAlB,EAAiCC,aAAjC,IAAkDtB,QAAQ,CAACuB,cAAT,CAAwBpB,cAAxB,EAAuCC,eAAvC,EAAuDE,WAAvD,EAAmED,WAAnE,CAAtD;;AACA,MAAIe,eAAe,KAAK,KAAxB,EAA8B;AAC1Bd,IAAAA,WAAW,GAAGkB,IAAI,CAACC,KAAL,CAAWJ,aAAX,CAAd;AACAd,IAAAA,OAAO,GAAGS,IAAI,CAACU,UAAf;AACH,GAHD,MAIK,IAAIN,eAAe,KAAK,MAAxB,EAA+B;AAChCd,IAAAA,WAAW,GAAGkB,IAAI,CAACC,KAAL,CAAWJ,aAAa,GAAI,CAAC,CAA7B,CAAd;AACAd,IAAAA,OAAO,GAAGS,IAAI,CAACW,WAAf;AACH;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BtB,OAA9B,EAjCkB,CAmClB;;AACA,MAAIuB,WAAW,GAAG,IAAIZ,GAAG,CAACa,KAAJ,CAAUC,kBAAd,CAAiC;AAC/CC,IAAAA,UAAU,EAAEX,aADmC;AAE/CY,IAAAA,KAAK,EAAE5B,WAFwC;AAG/C6B,IAAAA,WAAW,EAAE,KAHkC,CAI/C;;AAJ+C,GAAjC,CAAlB;AAOAjB,EAAAA,GAAG,CAACa,KAAJ,CAAUK,MAAV,CACI7B,OADJ,EAEIuB,WAFJ,EAGIO,QAAQ,IAAI;AACR7B,IAAAA,MAAM,CAAC8B,mBAAP,CAA2BD,QAA3B;AACA7B,IAAAA,MAAM,CAAC+B,uBAAP,CAA+BF,QAA/B;AACH,GANL;AAQH","sourcesContent":["// import \nlet position = require('./positionGenerator');\n\nfunction place_trade(){\n    // user confirms the lock: collect buyer/seller currencies, units, locked_rate from Shopify\n    var buyer_currency = 'AUD';\n    var seller_currency = 'USD';\n    var locked_rate = '1.25';\n    var units_buyer = 75; //in buyer's currencies\n    var account = '';\n\n    // connect to ONADA\n    let common = require('./lib/common');\n    let config = require('./lib/config');\n\n    let argv = require('yargs')\n    .alias('config', 'c')\n    .nargs('config', 1)\n    .describe('config', \"v20 Configuration File to use\")\n    .default('config', config.defaultConfigFile())\n    .argv;\n\n    let conf = new config.Config(argv.config);\n    let ctx = conf.createContext();\n\n    // generate the trading direction\n    var [trade_direction, tradeQuantity, currency_pair] = position.positionTrader(buyer_currency,seller_currency,units_buyer,locked_rate);\n    if (trade_direction === 'buy'){\n        units_buyer = Math.round(tradeQuantity);\n        account = conf.buyAccount\n    }\n    else if (trade_direction === 'sell'){\n        units_buyer = Math.round(tradeQuantity * (-1));\n        account = conf.sellAccount\n    }\n\n    console.log('trade account ', account)\n\n    // place limit trades, buy orders to buy_account, sell orders to sell_account\n    let marketOrder = new ctx.order.MarketOrderRequest({\n        instrument: currency_pair,\n        units: units_buyer,\n        timeInForce: 'IOC',\n        //priceBound: locked_rate\n    });\n\n    ctx.order.market(\n        account,\n        marketOrder,\n        response => {\n            common.handleErrorResponse(response);\n            common.dumpOrderCreateResponse(response);\n        }\n    )    \n}\n\n"]},"metadata":{},"sourceType":"script"}