{"ast":null,"code":"// import \nlet position = require('./positionGenerator');\n\nlet pass_price = require('./test');\n\nfunction request_bid_ask() {\n  // user asks for quote: collect buyer/seller currencies and units from Shopify\n  var buyer_currency = 'GBP';\n  var seller_currency = 'USD'; // connect to ONADA\n\n  let common = require('./lib/common');\n\n  let config = require('./lib/config');\n  /*let argv = require('yargs')\n  .alias('config', 'c')\n  .nargs('config', 1)\n  .describe('config', \"v20 Configuration File to use\")\n  .default('config', config.defaultConfigFile())\n  .argv;\n  */\n\n\n  let conf = new config.Config(argv.config);\n  let ctx = conf.createContext();\n  var price = ''; // generate the trading direction\n\n  var [trade_direction, currency_pair] = position.positionIndicator(buyer_currency, seller_currency);\n\n  if (trade_direction === 'buy') {\n    account = conf.buyAccount;\n  } else if (trade_direction === 'sell') {\n    account = conf.sellAccount;\n  } // request prices\n\n\n  ctx.pricing.get(account, {\n    instruments: currency_pair\n  }, response => {\n    var obj = JSON.parse(response['rawBody']);\n\n    if (trade_direction === \"buy\") {\n      price = obj.prices[0].asks;\n      indicate_trade_price = price[0].price;\n      indicate_locked_rate = indicate_trade_price * 1.005;\n    } else if (trade_direction === \"sell\") {\n      price = obj.prices[0].bids;\n      indicate_trade_price = price[0].price;\n      indicate_locked_rate = indicate_trade_price * 0.99;\n    } //console.log(indicate_trade_price) \n\n\n    console.log(indicate_locked_rate); //pass_price(indicate_locked_rate)\n    // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n  });\n}\n\nexports.request_bid_ask = request_bid_ask;\nrequest_bid_ask();","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_app/trade/trades/src/request_bid_ask.js"],"names":["position","require","pass_price","request_bid_ask","buyer_currency","seller_currency","common","config","conf","Config","argv","ctx","createContext","price","trade_direction","currency_pair","positionIndicator","account","buyAccount","sellAccount","pricing","get","instruments","response","obj","JSON","parse","prices","asks","indicate_trade_price","indicate_locked_rate","bids","console","log","exports"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,QAAD,CAAxB;;AAEA,SAASE,eAAT,GAA0B;AACtB;AACA,MAAIC,cAAc,GAAG,KAArB;AACA,MAAIC,eAAe,GAAG,KAAtB,CAHsB,CAKtB;;AACA,MAAIC,MAAM,GAAGL,OAAO,CAAC,cAAD,CAApB;;AACA,MAAIM,MAAM,GAAGN,OAAO,CAAC,cAAD,CAApB;AAEA;;;;;;;;;AAQA,MAAIO,IAAI,GAAG,IAAID,MAAM,CAACE,MAAX,CAAkBC,IAAI,CAACH,MAAvB,CAAX;AACA,MAAII,GAAG,GAAGH,IAAI,CAACI,aAAL,EAAV;AACA,MAAIC,KAAK,GAAG,EAAZ,CAnBsB,CAqBtB;;AACA,MAAI,CAACC,eAAD,EAAkBC,aAAlB,IAAmCf,QAAQ,CAACgB,iBAAT,CAA2BZ,cAA3B,EAA0CC,eAA1C,CAAvC;;AACA,MAAIS,eAAe,KAAK,KAAxB,EAA8B;AAC1BG,IAAAA,OAAO,GAAGT,IAAI,CAACU,UAAf;AACH,GAFD,MAGK,IAAIJ,eAAe,KAAK,MAAxB,EAA+B;AAChCG,IAAAA,OAAO,GAAGT,IAAI,CAACW,WAAf;AACH,GA5BqB,CA8BtB;;;AACAR,EAAAA,GAAG,CAACS,OAAJ,CAAYC,GAAZ,CACIJ,OADJ,EAEI;AACIK,IAAAA,WAAW,EAAEP;AADjB,GAFJ,EAMKQ,QAAD,IAAc;AACV,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAAC,SAAD,CAAnB,CAAV;;AACA,QAAIT,eAAe,KAAK,KAAxB,EAA8B;AAC1BD,MAAAA,KAAK,GAAGW,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,IAAtB;AACAC,MAAAA,oBAAoB,GAAGhB,KAAK,CAAC,CAAD,CAAL,CAASA,KAAhC;AACAiB,MAAAA,oBAAoB,GAAID,oBAAoB,GAAG,KAA/C;AACH,KAJD,MAKK,IAAIf,eAAe,KAAK,MAAxB,EAA+B;AAChCD,MAAAA,KAAK,GAAGW,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcI,IAAtB;AACAF,MAAAA,oBAAoB,GAAGhB,KAAK,CAAC,CAAD,CAAL,CAASA,KAAhC;AACAiB,MAAAA,oBAAoB,GAAID,oBAAoB,GAAG,IAA/C;AACH,KAXS,CAYV;;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAZ,EAbU,CAcV;AAEA;AACH,GAvBL;AAyBH;;AAEDI,OAAO,CAAC/B,eAAR,GAA0BA,eAA1B;AAEAA,eAAe","sourcesContent":["// import \nlet position = require('./positionGenerator');\nlet pass_price = require('./test')\n\nfunction request_bid_ask(){\n    // user asks for quote: collect buyer/seller currencies and units from Shopify\n    var buyer_currency = 'GBP';\n    var seller_currency = 'USD';\n\n    // connect to ONADA\n    let common = require('./lib/common');\n    let config = require('./lib/config');\n\n    /*let argv = require('yargs')\n    .alias('config', 'c')\n    .nargs('config', 1)\n    .describe('config', \"v20 Configuration File to use\")\n    .default('config', config.defaultConfigFile())\n    .argv;\n    */\n\n    let conf = new config.Config(argv.config);\n    let ctx = conf.createContext();\n    var price = '';\n\n    // generate the trading direction\n    var [trade_direction, currency_pair] = position.positionIndicator(buyer_currency,seller_currency);\n    if (trade_direction === 'buy'){\n        account = conf.buyAccount\n    }\n    else if (trade_direction === 'sell'){\n        account = conf.sellAccount\n    }\n\n    // request prices\n    ctx.pricing.get(\n        account,\n        {\n            instruments: currency_pair,\n        },\n\n        (response) => {\n            var obj = JSON.parse(response['rawBody']);\n            if (trade_direction === \"buy\"){\n                price = obj.prices[0].asks\n                indicate_trade_price = price[0].price\n                indicate_locked_rate =  indicate_trade_price * 1.005\n            }\n            else if (trade_direction === \"sell\"){\n                price = obj.prices[0].bids\n                indicate_trade_price = price[0].price\n                indicate_locked_rate =  indicate_trade_price * 0.99\n            }\n            //console.log(indicate_trade_price) \n            console.log(indicate_locked_rate)\n            //pass_price(indicate_locked_rate)\n\n            // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n        }\n    )    \n}\n\nexports.request_bid_ask = request_bid_ask\n\nrequest_bid_ask()\n\n\n  "]},"metadata":{},"sourceType":"script"}