{"ast":null,"code":"// import \nlet position = require('./positionGenerator'); // user asks for quote: collect buyer/seller currencies and units from Shopify\n\n\nvar buyer_currency = 'GBP';\nvar seller_currency = 'USD'; // connect to ONADA\n\nlet common = require('./lib/common');\n\nlet config = require('./lib/config');\n\nlet argv = require('yargs').alias('config', 'c').nargs('config', 1).describe('config', \"v20 Configuration File to use\").default('config', config.defaultConfigFile()).argv;\n\nlet conf = new config.Config(argv.config);\nlet ctx = conf.createContext();\nvar price = ''; // generate the trading direction\n\nvar [trade_direction, currency_pair] = position.positionIndicator(buyer_currency, seller_currency);\n\nif (trade_direction === 'buy') {\n  account = conf.buyAccount;\n} else if (trade_direction === 'sell') {\n  account = conf.sellAccount;\n} // request prices\n\n\nctx.pricing.get(account, {\n  instruments: currency_pair\n}, response => {\n  var obj = JSON.parse(response['rawBody']);\n\n  if (trade_direction === \"buy\") {\n    price = obj.prices[0].asks;\n    indicate_trade_price = price[0].price;\n    indicate_locked_rate = indicate_trade_price * 1.005;\n  } else if (trade_direction === \"sell\") {\n    price = obj.prices[0].bids;\n    indicate_trade_price = price[0].price;\n    indicate_locked_rate = indicate_trade_price * 0.99;\n  } //console.log(indicate_trade_price) \n\n\n  console.log(indicate_locked_rate); // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n});","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_app/trade/trades/src/request_bid_ask.js"],"names":["position","require","buyer_currency","seller_currency","common","config","argv","alias","nargs","describe","default","defaultConfigFile","conf","Config","ctx","createContext","price","trade_direction","currency_pair","positionIndicator","account","buyAccount","sellAccount","pricing","get","instruments","response","obj","JSON","parse","prices","asks","indicate_trade_price","indicate_locked_rate","bids","console","log"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB,C,CAEA;;;AACA,IAAIC,cAAc,GAAG,KAArB;AACA,IAAIC,eAAe,GAAG,KAAtB,C,CAGA;;AACA,IAAIC,MAAM,GAAGH,OAAO,CAAC,cAAD,CAApB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,cAAD,CAApB;;AAEA,IAAIK,IAAI,GAAGL,OAAO,CAAC,OAAD,CAAP,CACVM,KADU,CACJ,QADI,EACM,GADN,EAEVC,KAFU,CAEJ,QAFI,EAEM,CAFN,EAGVC,QAHU,CAGD,QAHC,EAGS,+BAHT,EAIVC,OAJU,CAIF,QAJE,EAIQL,MAAM,CAACM,iBAAP,EAJR,EAKVL,IALD;;AAOA,IAAIM,IAAI,GAAG,IAAIP,MAAM,CAACQ,MAAX,CAAkBP,IAAI,CAACD,MAAvB,CAAX;AACA,IAAIS,GAAG,GAAGF,IAAI,CAACG,aAAL,EAAV;AACA,IAAIC,KAAK,GAAG,EAAZ,C,CAEA;;AACA,IAAI,CAACC,eAAD,EAAkBC,aAAlB,IAAmClB,QAAQ,CAACmB,iBAAT,CAA2BjB,cAA3B,EAA0CC,eAA1C,CAAvC;;AACA,IAAIc,eAAe,KAAK,KAAxB,EAA8B;AAC1BG,EAAAA,OAAO,GAAGR,IAAI,CAACS,UAAf;AACH,CAFD,MAGK,IAAIJ,eAAe,KAAK,MAAxB,EAA+B;AAChCG,EAAAA,OAAO,GAAGR,IAAI,CAACU,WAAf;AACH,C,CAED;;;AACAR,GAAG,CAACS,OAAJ,CAAYC,GAAZ,CACIJ,OADJ,EAEI;AACIK,EAAAA,WAAW,EAAEP;AADjB,CAFJ,EAMKQ,QAAD,IAAc;AACV,MAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAAC,SAAD,CAAnB,CAAV;;AACA,MAAIT,eAAe,KAAK,KAAxB,EAA8B;AAC1BD,IAAAA,KAAK,GAAGW,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcC,IAAtB;AACAC,IAAAA,oBAAoB,GAAGhB,KAAK,CAAC,CAAD,CAAL,CAASA,KAAhC;AACAiB,IAAAA,oBAAoB,GAAID,oBAAoB,GAAG,KAA/C;AACH,GAJD,MAKK,IAAIf,eAAe,KAAK,MAAxB,EAA+B;AAChCD,IAAAA,KAAK,GAAGW,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcI,IAAtB;AACAF,IAAAA,oBAAoB,GAAGhB,KAAK,CAAC,CAAD,CAAL,CAASA,KAAhC;AACAiB,IAAAA,oBAAoB,GAAID,oBAAoB,GAAG,IAA/C;AACH,GAXS,CAYV;;;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAZ,EAbU,CAcV;AACH,CArBL","sourcesContent":["// import \nlet position = require('./positionGenerator');\n\n// user asks for quote: collect buyer/seller currencies and units from Shopify\nvar buyer_currency = 'GBP';\nvar seller_currency = 'USD';\n\n\n// connect to ONADA\nlet common = require('./lib/common');\nlet config = require('./lib/config');\n\nlet argv = require('yargs')\n.alias('config', 'c')\n.nargs('config', 1)\n.describe('config', \"v20 Configuration File to use\")\n.default('config', config.defaultConfigFile())\n.argv;\n\nlet conf = new config.Config(argv.config);\nlet ctx = conf.createContext();\nvar price = '';\n\n// generate the trading direction\nvar [trade_direction, currency_pair] = position.positionIndicator(buyer_currency,seller_currency);\nif (trade_direction === 'buy'){\n    account = conf.buyAccount\n}\nelse if (trade_direction === 'sell'){\n    account = conf.sellAccount\n}\n\n// request prices\nctx.pricing.get(\n    account,\n    {\n        instruments: currency_pair,\n    },\n\n    (response) => {\n        var obj = JSON.parse(response['rawBody']);\n        if (trade_direction === \"buy\"){\n            price = obj.prices[0].asks\n            indicate_trade_price = price[0].price\n            indicate_locked_rate =  indicate_trade_price * 1.005\n        }\n        else if (trade_direction === \"sell\"){\n            price = obj.prices[0].bids\n            indicate_trade_price = price[0].price\n            indicate_locked_rate =  indicate_trade_price * 0.99\n        }\n        //console.log(indicate_trade_price) \n        console.log(indicate_locked_rate) \n        // indicate_trade_price is the price from ONADA, indicated_locked_rate is the marked up rate, send indicate_trade_price value back to Shopify\n    }\n)    \n\n\n  "]},"metadata":{},"sourceType":"script"}