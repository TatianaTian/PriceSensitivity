{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { memo } from \"react\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nvar geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nvar colorScale = scaleLinear().domain([0.29, 0.68]).range([\"#ffedea\", \"#ff5233\"]);\n\nvar rounded = function rounded(num) {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nvar MapChart = function MapChart(_ref) {\n  var setTooltipContent = _ref.setTooltipContent;\n  return __jsx(React.Fragment, null, __jsx(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    }\n  }, __jsx(ZoomableGroup, null, __jsx(Geographies, {\n    geography: geoUrl\n  }, function (_ref2) {\n    var geographies = _ref2.geographies;\n    return geographies.map(function (geo) {\n      return __jsx(Geography, {\n        key: geo.rsmKey,\n        geography: geo,\n        fill: d ? colorScale(d[\"2017\"]) : \"#F5F4F6\",\n        onMouseEnter: function onMouseEnter() {\n          var _geo$properties = geo.properties,\n              NAME = _geo$properties.NAME,\n              POP_EST = _geo$properties.POP_EST;\n          setTooltipContent(\"\".concat(NAME, \" \\u2014 \").concat(rounded(POP_EST)));\n        },\n        onMouseLeave: function onMouseLeave() {\n          setTooltipContent(\"\");\n        },\n        style: {\n          \"default\": {\n            fill: \"#D6D6DA\",\n            outline: \"none\"\n          },\n          hover: {\n            fill: \"#F53\",\n            outline: \"none\"\n          },\n          pressed: {\n            fill: \"#E42\",\n            outline: \"none\"\n          }\n        }\n      });\n    });\n  }))));\n};\n\nexport default memo(MapChart);","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/MapChart.js"],"names":["React","memo","ZoomableGroup","ComposableMap","Geographies","Geography","geoUrl","colorScale","scaleLinear","domain","range","rounded","num","Math","round","MapChart","setTooltipContent","scale","geographies","map","geo","rsmKey","d","properties","NAME","POP_EST","fill","outline","hover","pressed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,SAJF,QAKO,mBALP;AAOA,IAAMC,MAAM,GACV,wGADF;AAGA,IAAMC,UAAU,GAAGC,WAAW,GAC3BC,MADgB,CACT,CAAC,IAAD,EAAO,IAAP,CADS,EAEhBC,KAFgB,CAEV,CAAC,SAAD,EAAY,SAAZ,CAFU,CAAnB;;AAIA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,GAAG,EAAI;AACrB,MAAIA,GAAG,GAAG,UAAV,EAAsB;AACpB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,SAAjB,IAA8B,EAA9B,GAAmC,IAA1C;AACD,GAFD,MAEO,IAAIA,GAAG,GAAG,OAAV,EAAmB;AACxB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,MAAjB,IAA2B,EAA3B,GAAgC,GAAvC;AACD,GAFM,MAEA;AACL,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAjB,IAAwB,EAAxB,GAA6B,GAApC;AACD;AACF,CARD;;AAUA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,OAA2B;AAAA,MAAxBC,iBAAwB,QAAxBA,iBAAwB;AAC1C,SACE,4BACE,MAAC,aAAD;AAAe,gBAAS,EAAxB;AAA2B,IAAA,gBAAgB,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAA7C,KACE,MAAC,aAAD,QACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEX;AAAxB,KACG;AAAA,QAAGY,WAAH,SAAGA,WAAH;AAAA,WACCA,WAAW,CAACC,GAAZ,CAAgB,UAAAC,GAAG;AAAA,aACjB,MAAC,SAAD;AACE,QAAA,GAAG,EAAEA,GAAG,CAACC,MADX;AAEE,QAAA,SAAS,EAAED,GAFb;AAGE,QAAA,IAAI,EAAEE,CAAC,GAAGf,UAAU,CAACe,CAAC,CAAC,MAAD,CAAF,CAAb,GAA2B,SAHpC;AAIE,QAAA,YAAY,EAAE,wBAAM;AAAA,gCACQF,GAAG,CAACG,UADZ;AAAA,cACVC,IADU,mBACVA,IADU;AAAA,cACJC,OADI,mBACJA,OADI;AAElBT,UAAAA,iBAAiB,WAAIQ,IAAJ,qBAAcb,OAAO,CAACc,OAAD,CAArB,EAAjB;AACD,SAPH;AAQE,QAAA,YAAY,EAAE,wBAAM;AAClBT,UAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,SAVH;AAWE,QAAA,KAAK,EAAE;AACL,qBAAS;AACPU,YAAAA,IAAI,EAAE,SADC;AAEPC,YAAAA,OAAO,EAAE;AAFF,WADJ;AAKLC,UAAAA,KAAK,EAAE;AACLF,YAAAA,IAAI,EAAE,MADD;AAELC,YAAAA,OAAO,EAAE;AAFJ,WALF;AASLE,UAAAA,OAAO,EAAE;AACPH,YAAAA,IAAI,EAAE,MADC;AAEPC,YAAAA,OAAO,EAAE;AAFF;AATJ;AAXT,QADiB;AAAA,KAAnB,CADD;AAAA,GADH,CADF,CADF,CADF,CADF;AAwCD,CAzCD;;AA2CA,eAAe1B,IAAI,CAACc,QAAD,CAAnB","sourcesContent":["import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffedea\", \"#ff5233\"]);\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({ setTooltipContent }) => {\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    setTooltipContent(`${NAME} â€” ${rounded(POP_EST)}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}