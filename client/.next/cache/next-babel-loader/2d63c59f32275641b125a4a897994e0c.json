{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport { Card, Layout } from '@shopify/polaris';\nimport { HorizontalBar, Doughnut, Bar } from 'react-chartjs-2';\nimport store from 'store-js';\n\nvar getPearsonCorrelation = require('../functions/sales_exchange_rate_corr');\n\nvar date = store.get('date');\nvar price = store.get('price');\nvar exchange_rate = store.get('exchange_rate');\nvar r = Math.min(Math.abs(getPearsonCorrelation([34, 37, 24, 67, 42], [1.23, 1.22, 1.23, 1.24, 1.25])), 1);\nvar doughnut = [r, 1 - r];\nconsole.log(\"date is \", date);\nconsole.log(\"price is \", price);\nconsole.log(\"exchange_rate is \", exchange_rate);\nconsole.log(\"r is \", r);\nvar color = '';\n\nif (r < 0.3) {\n  color = '#92D87F';\n} else if (r < 0.6) {\n  color = '#F3DB26';\n} else {\n  color = '#FB5C17';\n}\n\nvar doughnutChartData = {\n  labels: [\"Moderate\"],\n  datasets: [{\n    //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n    backgroundColor: [color, \"#E1E1E1\"],\n    borderColor: 'rgba(0, 0, 0, 0)',\n    borderWidth: 2,\n    data: doughnut\n  }]\n};\nvar doughnutChartOptions = {\n  circumference: 1 * Math.PI,\n  rotation: Math.PI,\n  maintainAspectRatio: true,\n  cutoutPercentage: 70,\n  tooltips: {\n    enabled: false\n  },\n  legend: {\n    display: true,\n    position: 'bottom',\n    align: 'center',\n    labels: {\n      fontSize: 30\n    }\n  },\n  pieceLabel: {\n    render: 'value' + '%',\n    fontColor: \"white\"\n  }\n};\nvar lineChartData = {\n  //labels: ['04-19', '04-22', '04-25', '04-28', '05-01', '05-04', '05-07', '05-10', '05-13'],\n  lables: date,\n  datasets: [{\n    type: \"bar\",\n    label: \"real\",\n    fill: false,\n    lineTension: 0,\n    backgroundColor: \"rgb(1, 2, 58)\",\n    borderColor: \"rgb(1, 2, 58)\",\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: \"rgb(1, 2, 58)\",\n    pointBackgroundColor: \"rgb(1, 2, 58)\",\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderWidth: 2,\n    pointRadius: 4,\n    pointHitRadius: 10,\n    // notice the gap in the data and the spanGaps: false\n    //data: [1, 2, 3, 4, 3, 2, 4, 3, 1],\n    data: price,\n    spanGaps: false\n  }, {\n    type: \"line\",\n    label: \"real\",\n    fill: false,\n    lineTension: 0,\n    backgroundColor: \"rgb(1, 2, 58)\",\n    borderColor: \"rgb(1, 2, 58)\",\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: \"rgb(1, 2, 58)\",\n    pointBackgroundColor: \"rgb(1, 2, 58)\",\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderWidth: 2,\n    pointRadius: 4,\n    pointHitRadius: 10,\n    // notice the gap in the data and the spanGaps: false\n    //data: [7, 7.1005, 7.0906, 7.0879, 7.1372, 7.1542, 7.1257, 7.1673, 7.1562],\n    data: exchange_rate,\n    spanGaps: false\n  }]\n};\nvar lineChartOptions = {\n  maintainAspectRatio: true,\n  tooltips: {\n    enabled: true\n  },\n  legend: {\n    display: false\n  },\n  scales: {\n    yAxes: [{\n      ticks: {\n        beginAtZero: false\n      },\n      scaleLabel: {\n        display: false,\n        labelString: 'USD/CNH',\n        fontSize: 20\n      }\n    }],\n    xAxes: [{\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\"\n      }\n    }]\n  },\n  layout: {\n    padding: {\n      left: 0,\n      right: 50,\n      top: 0,\n      bottom: 0\n    }\n  }\n};\nvar barChartData = {\n  labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP', 'US - Aaa Corporate Bonds', 'US - S&P 500'],\n  datasets: [{\n    backgroundColor: [\"#ffa41b\", '#005082', '#ff5733', '#708160', '#00a8cc'],\n    borderColor: 'rgba(0, 0, 0, 0)',\n    borderWidth: 2,\n    data: [0.65, 0.50, 0.47, 0.39, 0.37]\n  }]\n};\nvar barChartOptions = {\n  legend: {\n    display: false\n  },\n  scales: {\n    xAxes: [{\n      ticks: {\n        min: 0,\n        max: 1,\n        callback: function callback(value) {\n          return value;\n        }\n      },\n      scaleLabel: {\n        display: true,\n        labelString: \"Correlation Coefficient (Absolute Value)\"\n      }\n    }],\n    yAxes: [{\n      barPercentage: 0.3,\n      gridLines: {\n        color: \"rgba(0, 0, 0, 0)\"\n      }\n    }]\n  }\n};\nexport default function Country_data() {\n  return __jsx(Card, null, __jsx(Layout, null, __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(Bar, {\n    height: \"170vh\",\n    data: lineChartData,\n    options: lineChartOptions\n  }), __jsx(Doughnut, {\n    height: \"100vh\",\n    data: doughnutChartData,\n    options: doughnutChartOptions\n  })), __jsx(Layout.Section, {\n    oneHalf: true\n  }, __jsx(HorizontalBar, {\n    height: \"170vh\",\n    data: barChartData,\n    options: barChartOptions\n  }))));\n}","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/Country_data.js"],"names":["React","Card","Layout","HorizontalBar","Doughnut","Bar","store","getPearsonCorrelation","require","date","get","price","exchange_rate","r","Math","min","abs","doughnut","console","log","color","doughnutChartData","labels","datasets","backgroundColor","borderColor","borderWidth","data","doughnutChartOptions","circumference","PI","rotation","maintainAspectRatio","cutoutPercentage","tooltips","enabled","legend","display","position","align","fontSize","pieceLabel","render","fontColor","lineChartData","lables","type","label","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","spanGaps","lineChartOptions","scales","yAxes","ticks","beginAtZero","scaleLabel","labelString","xAxes","gridLines","layout","padding","left","right","top","bottom","barChartData","barChartOptions","max","callback","value","barPercentage","Country_data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Card, Layout} from '@shopify/polaris';\nimport {HorizontalBar, Doughnut, Bar} from 'react-chartjs-2';\nimport store from 'store-js';\nconst getPearsonCorrelation = require('../functions/sales_exchange_rate_corr')\n\nconst date = store.get('date') \nconst price = store.get('price') \nconst exchange_rate = store.get('exchange_rate') \nconst r = Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1)\nconst doughnut = [r, 1-r]\nconsole.log(\"date is \", date)\nconsole.log(\"price is \", price)\nconsole.log(\"exchange_rate is \", exchange_rate)\nconsole.log(\"r is \", r)\n\nvar color = ''\nif (r < 0.3){\n    color = '#92D87F'\n} else if (r < 0.6){\n    color = '#F3DB26'\n} else {\n    color = '#FB5C17'\n}\n\n\n\nconst doughnutChartData = {\n  labels: [\"Moderate\"],\n  datasets: [\n    {\n      //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n      backgroundColor: [color,\"#E1E1E1\"],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: doughnut,\n\n    }\n  ],\n};\n  \nconst doughnutChartOptions = {\n  circumference: 1* Math.PI,\n  rotation: Math.PI,\n  maintainAspectRatio: true,\n  cutoutPercentage:70,\n  tooltips:{\n    enabled:false,\n  },\n  legend: {\n            display: true,\n            position: 'bottom',\n            align:'center',\n            labels:{\n                fontSize: 30\n            }\n          },\n  pieceLabel: {\n    render: 'value' + '%',\n    fontColor: \"white\",\n  }\n  };\n\nvar lineChartData = {\n  //labels: ['04-19', '04-22', '04-25', '04-28', '05-01', '05-04', '05-07', '05-10', '05-13'],\n  lables: date,\n  datasets: [{\n    type: \"bar\",\n    label: \"real\",\n    fill: false,\n    lineTension: 0,\n    backgroundColor: \"rgb(1, 2, 58)\",\n    borderColor: \"rgb(1, 2, 58)\",\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: \"rgb(1, 2, 58)\",\n    pointBackgroundColor: \"rgb(1, 2, 58)\",\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderColor: \"rgb(1, 2, 58)\",\n    pointHoverBorderWidth: 2,\n    pointRadius: 4,\n    pointHitRadius: 10,\n    // notice the gap in the data and the spanGaps: false\n    //data: [1, 2, 3, 4, 3, 2, 4, 3, 1],\n    data: price,\n    spanGaps: false,\n    },\n    {\n      type: \"line\",\n      label: \"real\",\n      fill: false,\n      lineTension: 0,\n      backgroundColor: \"rgb(1, 2, 58)\",\n      borderColor: \"rgb(1, 2, 58)\",\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: \"rgb(1, 2, 58)\",\n      pointBackgroundColor: \"rgb(1, 2, 58)\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderColor: \"rgb(1, 2, 58)\",\n      pointHoverBorderWidth: 2,\n      pointRadius: 4,\n      pointHitRadius: 10,\n      // notice the gap in the data and the spanGaps: false\n      //data: [7, 7.1005, 7.0906, 7.0879, 7.1372, 7.1542, 7.1257, 7.1673, 7.1562],\n      data: exchange_rate,\n      spanGaps: false,\n      }\n\n  ]\n  };\n\nvar lineChartOptions = {\n  maintainAspectRatio: true,\n  tooltips:{\n    enabled:true,\n  },\n  legend: {\n    display: false,\n  },\n  scales: {\n            yAxes: [{\n                ticks: {\n                    beginAtZero:false\n                },\n                scaleLabel: {\n                      display: false,\n                      labelString: 'USD/CNH',\n                      fontSize: 20 \n                  }\n            }],\n            xAxes: [{\n              gridLines: {\n                color: \"rgba(0, 0, 0, 0)\",\n            }\n            },],            \n        },\n        layout: {\n          padding: {\n              left: 0,\n              right: 50,\n              top: 0,\n              bottom: 0\n          }\n      }   \n};\n\n\nconst barChartData = {\n  labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP',\n            'US - Aaa Corporate Bonds', 'US - S&P 500'],\n  datasets: [\n    {\n      backgroundColor: [\"#ffa41b\", '#005082','#ff5733','#708160','#00a8cc'],\n      borderColor: 'rgba(0, 0, 0, 0)',\n      borderWidth: 2,\n      data: [0.65, 0.50, 0.47, 0.39, 0.37]\n    }\n  ],\n};\n\nconst barChartOptions = {\n\n  legend: {\n            display: false,\n          },\n\n  scales: {\n            xAxes: [{\n              ticks: {\n                min: 0,\n                max: 1,\n                callback: function(value) {\n                    return value\n                }\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"Correlation Coefficient (Absolute Value)\"\n              }\n            },],\n            yAxes: [{\n              barPercentage: 0.3,\n              gridLines: {\n                color: \"rgba(0, 0, 0, 0)\",\n            }\n            },],\n          },\n};\n\n\nexport default function Country_data() {  \n    return (\n      <Card>\n            <Layout>\n            <Layout.Section oneHalf>\n                <Bar \n                  height=\"170vh\"\n                  data={lineChartData}\n                  options={lineChartOptions}\n                />\n                <Doughnut\n                    height=\"100vh\"\n                    data={doughnutChartData}\n                    options={doughnutChartOptions}\n                />\n  \n            </Layout.Section>\n            <Layout.Section oneHalf>\n                <HorizontalBar \n                    height=\"170vh\"\n                    data={barChartData}\n                    options={barChartOptions}\n                  />\n\n            </Layout.Section>\n          </Layout>\n      </Card>\n    );\n  }\n\n"]},"metadata":{},"sourceType":"module"}