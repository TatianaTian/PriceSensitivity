{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { memo } from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport { ZoomableGroup, ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nconst colorScale = scaleLinear().domain([0.29, 0.68]).range([\"#ffedea\", \"#ff5233\"]);\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({\n  setTooltipContent\n}) => {\n  return __jsx(React.Fragment, null, __jsx(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      scale: 200\n    }\n  }, __jsx(ZoomableGroup, null, __jsx(Geographies, {\n    geography: geoUrl\n  }, ({\n    geographies\n  }) => geographies.map(geo => __jsx(Geography, {\n    key: geo.rsmKey,\n    geography: geo,\n    fill: d ? colorScale(d[\"2017\"]) : \"#F5F4F6\",\n    onMouseEnter: () => {\n      const {\n        NAME,\n        POP_EST\n      } = geo.properties;\n      setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n    },\n    onMouseLeave: () => {\n      setTooltipContent(\"\");\n    },\n    style: {\n      default: {\n        fill: \"#D6D6DA\",\n        outline: \"none\"\n      },\n      hover: {\n        fill: \"#F53\",\n        outline: \"none\"\n      },\n      pressed: {\n        fill: \"#E42\",\n        outline: \"none\"\n      }\n    }\n  }))))));\n};\n\nexport default memo(MapChart);","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/MapChart.js"],"names":["React","memo","scaleLinear","ZoomableGroup","ComposableMap","Geographies","Geography","geoUrl","colorScale","domain","range","rounded","num","Math","round","MapChart","setTooltipContent","scale","geographies","map","geo","rsmKey","d","NAME","POP_EST","properties","default","fill","outline","hover","pressed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,SAJF,QAKO,mBALP;AAOA,MAAMC,MAAM,GACV,wGADF;AAGA,MAAMC,UAAU,GAAGN,WAAW,GAC3BO,MADgB,CACT,CAAC,IAAD,EAAO,IAAP,CADS,EAEhBC,KAFgB,CAEV,CAAC,SAAD,EAAY,SAAZ,CAFU,CAAnB;;AAIA,MAAMC,OAAO,GAAGC,GAAG,IAAI;AACrB,MAAIA,GAAG,GAAG,UAAV,EAAsB;AACpB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,SAAjB,IAA8B,EAA9B,GAAmC,IAA1C;AACD,GAFD,MAEO,IAAIA,GAAG,GAAG,OAAV,EAAmB;AACxB,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,MAAjB,IAA2B,EAA3B,GAAgC,GAAvC;AACD,GAFM,MAEA;AACL,WAAOC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,GAAjB,IAAwB,EAAxB,GAA6B,GAApC;AACD;AACF,CARD;;AAUA,MAAMG,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA2B;AAC1C,SACE,4BACE,MAAC,aAAD;AAAe,gBAAS,EAAxB;AAA2B,IAAA,gBAAgB,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAA7C,KACE,MAAC,aAAD,QACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAEV;AAAxB,KACG,CAAC;AAAEW,IAAAA;AAAF,GAAD,KACCA,WAAW,CAACC,GAAZ,CAAgBC,GAAG,IACjB,MAAC,SAAD;AACE,IAAA,GAAG,EAAEA,GAAG,CAACC,MADX;AAEE,IAAA,SAAS,EAAED,GAFb;AAGE,IAAA,IAAI,EAAEE,CAAC,GAAGd,UAAU,CAACc,CAAC,CAAC,MAAD,CAAF,CAAb,GAA2B,SAHpC;AAIE,IAAA,YAAY,EAAE,MAAM;AAClB,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoBJ,GAAG,CAACK,UAA9B;AACAT,MAAAA,iBAAiB,CAAE,GAAEO,IAAK,MAAKZ,OAAO,CAACa,OAAD,CAAU,EAA/B,CAAjB;AACD,KAPH;AAQE,IAAA,YAAY,EAAE,MAAM;AAClBR,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACD,KAVH;AAWE,IAAA,KAAK,EAAE;AACLU,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,SADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OADJ;AAKLC,MAAAA,KAAK,EAAE;AACLF,QAAAA,IAAI,EAAE,MADD;AAELC,QAAAA,OAAO,EAAE;AAFJ,OALF;AASLE,MAAAA,OAAO,EAAE;AACPH,QAAAA,IAAI,EAAE,MADC;AAEPC,QAAAA,OAAO,EAAE;AAFF;AATJ;AAXT,IADF,CAFJ,CADF,CADF,CADF,CADF;AAwCD,CAzCD;;AA2CA,eAAe3B,IAAI,CAACc,QAAD,CAAnB","sourcesContent":["import React, { memo } from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffedea\", \"#ff5233\"]);\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst MapChart = ({ setTooltipContent }) => {\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\n        <ZoomableGroup>\n          <Geographies geography={geoUrl}>\n            {({ geographies }) =>\n              geographies.map(geo => (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  style={{\n                    default: {\n                      fill: \"#D6D6DA\",\n                      outline: \"none\"\n                    },\n                    hover: {\n                      fill: \"#F53\",\n                      outline: \"none\"\n                    },\n                    pressed: {\n                      fill: \"#E42\",\n                      outline: \"none\"\n                    }\n                  }}\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}