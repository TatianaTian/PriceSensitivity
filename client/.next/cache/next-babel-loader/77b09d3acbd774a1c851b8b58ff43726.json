{"ast":null,"code":"// import \nlet position = require('./positionGenerator');\n\nlet store = require('/Users/tatianatian/Desktop/Startup/shopify_app/node_modules/store-js/dist/store.legacy');\n\nfunction place_trade(buyer_currency, units_buyer) {\n  // user confirms the lock: collect buyer/seller currencies, units, locked_rate from Shopify\n  //var buyer_currency = 'GBP';\n  var seller_currency = 'USD';\n  var locked_rate = '1.25'; //var units_buyer = 75; //in buyer's currencies\n\n  var account = ''; // connect to ONADA\n\n  let common = require('./lib/common');\n\n  let config = require('./lib/config');\n\n  let conf = new config.Config();\n  let ctx = conf.createContext(); // generate the trading direction\n\n  var [trade_direction, tradeQuantity, currency_pair] = position.positionTrader(buyer_currency, seller_currency, units_buyer, locked_rate);\n\n  if (trade_direction === 'buy') {\n    units_buyer = Math.round(tradeQuantity);\n    account = conf.buyAccount;\n  } else if (trade_direction === 'sell') {\n    units_buyer = Math.round(tradeQuantity * -1);\n    account = conf.sellAccount;\n  }\n\n  console.log('trade account ', account); // place limit trades, buy orders to buy_account, sell orders to sell_account\n\n  let marketOrder = new ctx.order.MarketOrderRequest({\n    instrument: currency_pair,\n    units: units_buyer,\n    timeInForce: 'IOC' //priceBound: locked_rate\n\n  });\n  ctx.order.market(account, marketOrder, response => {\n    common.handleErrorResponse(response);\n    var a = common.dumpOrderCreateResponse(response);\n    store.set('user', {\n      name: 'Amy',\n      trade: true\n    });\n  });\n}\n\nexports.place_trade = place_trade;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/backend/client/trade/trades/src/place_trades.js"],"names":["position","require","store","place_trade","buyer_currency","units_buyer","seller_currency","locked_rate","account","common","config","conf","Config","ctx","createContext","trade_direction","tradeQuantity","currency_pair","positionTrader","Math","round","buyAccount","sellAccount","console","log","marketOrder","order","MarketOrderRequest","instrument","units","timeInForce","market","response","handleErrorResponse","a","dumpOrderCreateResponse","set","name","trade","exports"],"mappings":"AAAA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,wFAAD,CAAnB;;AAEA,SAASE,WAAT,CAAqBC,cAArB,EAAqCC,WAArC,EAAiD;AAC7C;AACA;AACA,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,WAAW,GAAG,MAAlB,CAJ6C,CAK7C;;AACA,MAAIC,OAAO,GAAG,EAAd,CAN6C,CAQ7C;;AACA,MAAIC,MAAM,GAAGR,OAAO,CAAC,cAAD,CAApB;;AACA,MAAIS,MAAM,GAAGT,OAAO,CAAC,cAAD,CAApB;;AAEA,MAAIU,IAAI,GAAG,IAAID,MAAM,CAACE,MAAX,EAAX;AACA,MAAIC,GAAG,GAAGF,IAAI,CAACG,aAAL,EAAV,CAb6C,CAe7C;;AACA,MAAI,CAACC,eAAD,EAAkBC,aAAlB,EAAiCC,aAAjC,IAAkDjB,QAAQ,CAACkB,cAAT,CAAwBd,cAAxB,EAAuCE,eAAvC,EAAuDD,WAAvD,EAAmEE,WAAnE,CAAtD;;AACA,MAAIQ,eAAe,KAAK,KAAxB,EAA8B;AAC1BV,IAAAA,WAAW,GAAGc,IAAI,CAACC,KAAL,CAAWJ,aAAX,CAAd;AACAR,IAAAA,OAAO,GAAGG,IAAI,CAACU,UAAf;AACH,GAHD,MAIK,IAAIN,eAAe,KAAK,MAAxB,EAA+B;AAChCV,IAAAA,WAAW,GAAGc,IAAI,CAACC,KAAL,CAAWJ,aAAa,GAAI,CAAC,CAA7B,CAAd;AACAR,IAAAA,OAAO,GAAGG,IAAI,CAACW,WAAf;AACH;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BhB,OAA9B,EA1B6C,CA4B7C;;AACA,MAAIiB,WAAW,GAAG,IAAIZ,GAAG,CAACa,KAAJ,CAAUC,kBAAd,CAAiC;AAC/CC,IAAAA,UAAU,EAAEX,aADmC;AAE/CY,IAAAA,KAAK,EAAExB,WAFwC;AAG/CyB,IAAAA,WAAW,EAAE,KAHkC,CAI/C;;AAJ+C,GAAjC,CAAlB;AAOAjB,EAAAA,GAAG,CAACa,KAAJ,CAAUK,MAAV,CACIvB,OADJ,EAEIiB,WAFJ,EAGIO,QAAQ,IAAI;AACRvB,IAAAA,MAAM,CAACwB,mBAAP,CAA2BD,QAA3B;AACA,QAAIE,CAAC,GAAGzB,MAAM,CAAC0B,uBAAP,CAA+BH,QAA/B,CAAR;AAEA9B,IAAAA,KAAK,CAACkC,GAAN,CAAU,MAAV,EAAkB;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAE;AAAtB,KAAlB;AACH,GARL;AAUH;;AAEDC,OAAO,CAACpC,WAAR,GAAsBA,WAAtB","sourcesContent":["// import \nlet position = require('./positionGenerator');\nlet store = require('/Users/tatianatian/Desktop/Startup/shopify_app/node_modules/store-js/dist/store.legacy')\n\nfunction place_trade(buyer_currency, units_buyer){\n    // user confirms the lock: collect buyer/seller currencies, units, locked_rate from Shopify\n    //var buyer_currency = 'GBP';\n    var seller_currency = 'USD';\n    var locked_rate = '1.25';\n    //var units_buyer = 75; //in buyer's currencies\n    var account = '';\n\n    // connect to ONADA\n    let common = require('./lib/common');\n    let config = require('./lib/config');\n\n    let conf = new config.Config();\n    let ctx = conf.createContext();\n\n    // generate the trading direction\n    var [trade_direction, tradeQuantity, currency_pair] = position.positionTrader(buyer_currency,seller_currency,units_buyer,locked_rate);\n    if (trade_direction === 'buy'){\n        units_buyer = Math.round(tradeQuantity);\n        account = conf.buyAccount\n    }\n    else if (trade_direction === 'sell'){\n        units_buyer = Math.round(tradeQuantity * (-1));\n        account = conf.sellAccount\n    }\n\n    console.log('trade account ', account)\n\n    // place limit trades, buy orders to buy_account, sell orders to sell_account\n    let marketOrder = new ctx.order.MarketOrderRequest({\n        instrument: currency_pair,\n        units: units_buyer,\n        timeInForce: 'IOC',\n        //priceBound: locked_rate\n    });\n\n    ctx.order.market(\n        account,\n        marketOrder,\n        response => {\n            common.handleErrorResponse(response);\n            var a = common.dumpOrderCreateResponse(response);\n\n            store.set('user', { name: 'Amy', trade: true })\n        }\n    )    \n}\n\nexports.place_trade = place_trade;"]},"metadata":{},"sourceType":"script"}