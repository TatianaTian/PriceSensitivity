{"ast":null,"code":"var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate) => {\n  var [data, myMap] = reformat_data(sales, exchange_rate);\n  console.log(\"data is \", data);\n  var regression = new jsregression.LinearRegression();\n  console.log(\"here\");\n  var model = regression.fit(data);\n  let myMap2 = new Map();\n  myMap2 = myMap; // sort exchange rate\n\n  exchange_rate.sort(function (a, b) {\n    return a - b;\n  });\n  var regression_fx = [];\n  var regression_sales = [];\n  var regression_predicted_sales = [];\n\n  for (j = 0; j < exchange_rate.length; j++) {\n    regression_fx.push(exchange_rate[j]);\n    regression_sales.push(myMap2.get(exchange_rate[j])); //console.log(\"[exchange_rate[i]] is \", exchange_rate[j])\n\n    regression_predicted_sales.push(regression.transform([exchange_rate[j]]));\n  }\n\n  return [regression_fx, regression_sales, regression_predicted_sales];\n};\n\nfunction reformat_data(sales, exchange_rate) {\n  const exchange_rate_round = [];\n  const data = [];\n  let myMap = new Map();\n\n  for (i = 0; i < exchange_rate.length; i++) {\n    var round_fx = Math.round(1000 * exchange_rate[i]) / 1000;\n\n    if (myMap.has(round_fx)) {\n      var sales_list = myMap.get(round_fx);\n      sales_list.push(sales[i]);\n      myMap.set(round_fx, sales_list);\n    }\n\n    myMap.set(round_fx, [sales[i]]);\n  }\n\n  for (let [k, v] of myMap) {\n    let sum = v.reduce((previous, current) => current += previous);\n    let avg = sum / v.length;\n    data.push([k, avg]);\n    exchange_rate_round.push(k);\n  }\n\n  return [data, myMap, exchange_rate_round];\n}\n\nmodule.exports = linear_regression; //linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/functions/linear_regression.js"],"names":["jsregression","require","linear_regression","sales","exchange_rate","data","myMap","reformat_data","console","log","regression","LinearRegression","model","fit","myMap2","Map","sort","a","b","regression_fx","regression_sales","regression_predicted_sales","j","length","push","get","transform","exchange_rate_round","i","round_fx","Math","round","has","sales_list","set","k","v","sum","reduce","previous","current","avg","module","exports"],"mappings":"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","sourcesContent":["var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate)=>{\n    \n\n\n\n\n\n    var [data, myMap] = reformat_data(sales, exchange_rate)\n    console.log(\"data is \", data)\n    var regression = new jsregression.LinearRegression();\n    console.log(\"here\")\n    var model = regression.fit(data);\n    \n    let myMap2 = new Map();\n    myMap2 = myMap\n\n    // sort exchange rate\n    exchange_rate.sort(function(a, b){return a-b});\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    \n    for (j=0;j<exchange_rate.length;j++){\n        regression_fx.push(exchange_rate[j])\n        regression_sales.push(myMap2.get(exchange_rate[j]))\n        //console.log(\"[exchange_rate[i]] is \", exchange_rate[j])\n        regression_predicted_sales.push(regression.transform([exchange_rate[j]]))\n    }\n    return [regression_fx, regression_sales, regression_predicted_sales]\n}\n\nfunction reformat_data(sales, exchange_rate){\n    const exchange_rate_round = []\n    const data = []\n    let myMap = new Map()\n    for (i=0;i<exchange_rate.length;i++){\n        var round_fx = Math.round(1000*exchange_rate[i])/1000;\n        if (myMap.has(round_fx)){\n            var sales_list = myMap.get(round_fx)\n            sales_list.push(sales[i])\n            myMap.set(round_fx,sales_list)\n        }\n        myMap.set(round_fx,[sales[i]])\n    }\n    for (let [k, v] of myMap) {\n        let sum = v.reduce((previous, current) => current += previous);\n        let avg = sum / v.length;\n        data.push([k, avg])\n        exchange_rate_round.push(k)\n    }\n\n    return [data, myMap, exchange_rate_round]\n}\n \nmodule.exports = linear_regression; \n\n//linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/\n"]},"metadata":{},"sourceType":"script"}