{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\n/*\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;*/\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts() {\n      orders(query: \"created_at:>=2019-01-01\", first: 249) {\n        edges {\n          node {\n            id\n            customerLocale\n            customer {\n              addresses {\n                countryCode\n                country\n                countryCodeV2\n              }\n            }\n            totalPriceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            createdAt\n          }\n        }\n      }\n    }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  render() {\n    const app = this.context;\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    console.log('ids are ', store.get('ids'));\n    return (//<Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') }}>\n      __jsx(Query, {\n        query: GET_PRODUCTS_BY_ID\n      }, ({\n        data,\n        loading,\n        error\n      }) => {\n        if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n        if (error) return __jsx(\"div\", null, error.message);\n        console.log(data);\n        return __jsx(Card, null, __jsx(ResourceList, {\n          showHeader: true //resourceName={{ singular: 'Product', plural: 'Products' }}\n          ,\n          items: data.nodes,\n          renderItem: item => {\n            const price = item.variants.edges[0].node.totalPriceSet.shopMoney.amount;\n            const quote = 1.2;\n            return __jsx(ResourceList.Item, {\n              //id={item.id}\n              //media={media}\n              //accessibilityLabel={`View details for ${item.title}`}\n              onClick: () => {\n                store.set('item', item); //redirectToProduct();\n              }\n            }, __jsx(\"p\", null, \"here is the product \"), __jsx(Stack, null, __jsx(Stack.Item, {\n              fill: true\n            }, __jsx(\"h3\", null, __jsx(TextStyle, {\n              variation: \"strong\"\n            }, item.title))), __jsx(Stack.Item, null, __jsx(\"p\", null, \"$\", price), __jsx(\"p\", null, quote)), __jsx(Stack.Item, null, __jsx(\"p\", null, \"Expires on \", twoWeeksFromNow, \" \"))));\n          }\n        }));\n      })\n    );\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/pages/detect_transactions.js"],"names":["gql","Query","Card","ResourceList","Stack","TextStyle","Thumbnail","store","Redirect","Context","GET_PRODUCTS_BY_ID","ResourceListWithProducts","React","Component","render","app","context","twoWeeksFromNow","Date","now","toDateString","console","log","get","data","loading","error","message","nodes","item","price","variants","edges","node","totalPriceSet","shopMoney","amount","quote","set","title"],"mappings":";;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SACEC,IADF,EAEEC,YAFF,EAGEC,KAHF,EAIEC,SAJF,EAKEC,SALF,QAMO,kBANP;AAOA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,MAAMC,kBAAkB,GAAGV,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA/B;;AAgCA,MAAMW,wBAAN,SAAuCC,KAAK,CAACC,SAA7C,CAAuD;AAErDC,EAAAA,MAAM,GAAG;AACP,UAAMC,GAAG,GAAG,KAAKC,OAAjB;AACA,UAAMC,eAAe,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,OAAtB,EAA+BC,YAA/B,EAAxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBf,KAAK,CAACgB,GAAN,CAAU,KAAV,CAAvB;AACA,WACE;AACA,YAAC,KAAD;AAAO,QAAA,KAAK,EAAEb;AAAd,SAGG,CAAC;AAAEc,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA;AAAjB,OAAD,KAA8B;AAC7B,YAAID,OAAJ,EAAa,OAAO,mCAAP;AACb,YAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACC,OAAZ,CAAP;AACXN,QAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACA,eACE,MAAC,IAAD,QACE,MAAC,YAAD;AACE,UAAA,UAAU,MADZ,CAEC;AAFD;AAGE,UAAA,KAAK,EAAEA,IAAI,CAACI,KAHd;AAIE,UAAA,UAAU,EAAEC,IAAI,IAAI;AAClB,kBAAMC,KAAK,GAAGD,IAAI,CAACE,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAuBC,IAAvB,CAA4BC,aAA5B,CAA0CC,SAA1C,CAAoDC,MAAlE;AACA,kBAAMC,KAAK,GAAG,GAAd;AACA,mBACE,MAAC,YAAD,CAAc,IAAd;AACE;AACA;AACA;AACA,cAAA,OAAO,EAAE,MAAM;AACb9B,gBAAAA,KAAK,CAAC+B,GAAN,CAAU,MAAV,EAAkBT,IAAlB,EADa,CAEb;AACD;AAPH,eASE,wCATF,EAUE,MAAC,KAAD,QACE,MAAC,KAAD,CAAO,IAAP;AAAY,cAAA,IAAI;AAAhB,eACE,kBACE,MAAC,SAAD;AAAW,cAAA,SAAS,EAAC;AAArB,eACCA,IAAI,CAACU,KADN,CADF,CADF,CADF,EAQE,MAAC,KAAD,CAAO,IAAP,QACE,sBAAKT,KAAL,CADF,EAEE,iBAAIO,KAAJ,CAFF,CARF,EAYE,MAAC,KAAD,CAAO,IAAP,QACE,gCAAepB,eAAf,MADF,CAZF,CAVF,CADF;AA6BD;AApCH,UADF,CADF;AA0CD,OAjDH;AAFF;AAsDD;;AA5DoD;;gBAAjDN,wB,iBACiBF,O;;AA8DtB,eAAeE,wBAAf","sourcesContent":["import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { \n  Card,\n  ResourceList,\n  Stack,\n  TextStyle,\n  Thumbnail, \n} from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\n\n/*\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts($ids: [ID!]!) {\n    nodes(ids: $ids) {\n      ... on Product {\n        title\n        handle\n        descriptionHtml\n        id\n        images(first: 1) {\n          edges {\n            node {\n              originalSrc\n              altText\n            }\n          }\n        }\n        variants(first: 1) {\n          edges {\n            node {\n              price\n              id\n            }\n          }\n        }\n      }\n    }\n  }\n`;*/\n\nconst GET_PRODUCTS_BY_ID = gql`\n  query getProducts() {\n      orders(query: \"created_at:>=2019-01-01\", first: 249) {\n        edges {\n          node {\n            id\n            customerLocale\n            customer {\n              addresses {\n                countryCode\n                country\n                countryCodeV2\n              }\n            }\n            totalPriceSet {\n              presentmentMoney {\n                amount\n                currencyCode\n              }\n              shopMoney {\n                amount\n                currencyCode\n              }\n            }\n            createdAt\n          }\n        }\n      }\n    }\n`;\n\n\nclass ResourceListWithProducts extends React.Component {\n  static contextType = Context;\n  render() {\n    const app = this.context;\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    console.log('ids are ',store.get('ids') )\n    return (\n      //<Query query={GET_PRODUCTS_BY_ID} variables={{ ids: store.get('ids') }}>\n      <Query query={GET_PRODUCTS_BY_ID}>\n      \n      \n        {({ data, loading, error }) => {\n          if (loading) return <div>Loadingâ€¦</div>;\n          if (error) return <div>{error.message}</div>;\n          console.log(data);\n          return (\n            <Card>\n              <ResourceList\n                showHeader\n               //resourceName={{ singular: 'Product', plural: 'Products' }}\n                items={data.nodes}\n                renderItem={item => {\n                  const price = item.variants.edges[0].node.totalPriceSet.shopMoney.amount;\n                  const quote = 1.2;\n                  return (\n                    <ResourceList.Item\n                      //id={item.id}\n                      //media={media}\n                      //accessibilityLabel={`View details for ${item.title}`}\n                      onClick={() => {\n                        store.set('item', item);\n                        //redirectToProduct();\n                      }}\n                    >\n                      <p>here is the product </p>\n                      <Stack>\n                        <Stack.Item fill>\n                          <h3>\n                            <TextStyle variation=\"strong\">\n                            {item.title}\n                            </TextStyle>\n                          </h3>\n                        </Stack.Item>\n                        <Stack.Item>\n                          <p>${price}</p>\n                          <p>{quote}</p>\n                        </Stack.Item>\n                        <Stack.Item>\n                          <p>Expires on {twoWeeksFromNow} </p>\n                        </Stack.Item>\n                      </Stack>\n                    </ResourceList.Item>\n                  );\n                }}\n              />\n            </Card>\n          );\n        }}\n      </Query>    \n    );\n  }\n}\n\n export default ResourceListWithProducts;"]},"metadata":{},"sourceType":"module"}