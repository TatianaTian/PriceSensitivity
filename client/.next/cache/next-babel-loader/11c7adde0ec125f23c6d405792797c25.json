{"ast":null,"code":"global.fetch = require(\"node-fetch\");\n\nconst request_order = async () => {\n  const query = JSON.stringify({\n    query: `mutation {\n        bulkOperationRunQuery(\n            query:\"\"\"\n            {\n            orders(query: \"created_at:>=2020-01-01\") {\n                edges {\n                node {\n                    id\n                    customerLocale\n                    customer {\n                    addresses {\n                        countryCode\n                    }\n\n                    }\n                    totalPriceSet {\n                    presentmentMoney {\n                        amount\n                        currencyCode\n                    }\n                    shopMoney {\n                        amount\n                        currencyCode\n                    }\n                    }\n                }\n                }\n            }\n            }\n            \"\"\"\n        ) {\n            bulkOperation {\n            id\n            status\n            }\n            userErrors {\n            field\n            message\n            }\n        }\n        }`\n  });\n  const check = JSON.stringify({\n    query: `query {\n            currentBulkOperation {\n            id\n            status\n            errorCode\n            createdAt\n            completedAt\n            objectCount\n            fileSize\n            url\n            partialDataUrl\n            }\n        }`\n  });\n  const query_short_list = JSON.stringify({\n    query: `query {\n            orders(query: \"created_at:>=2020-01-01\", first: 249) {\n                edges {\n                node {\n                    id\n                    customerLocale\n                    customer {\n                    addresses {\n                        countryCode\n                        country\n                        countryCodeV2\n                    }\n                    }\n                    totalPriceSet {\n                    presentmentMoney {\n                        amount\n                        currencyCode\n                    }\n                    shopMoney {\n                        amount\n                        currencyCode\n                    }\n                    }\n                    createdAt\n                }\n                }\n            }\n        }`\n  });\n  const shop = 'haloy.myshopify.com';\n  const accessToken = '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';\n  /*\n  const response = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n      method: 'POST',\n      headers: {\n      'Content-Type': 'application/json',\n      \"X-Shopify-Access-Token\": accessToken,\n      },\n      body: query\n  })\n  \n  const responseJson = await response.json();\n  console.log(responseJson.data.bulkOperationRunQuery)\n    const response2 = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n      method: 'POST',\n      headers: {\n      'Content-Type': 'application/json',\n      \"X-Shopify-Access-Token\": accessToken,\n      },\n      body: check\n  })\n   const checkJson = await response2.json();\n  console.log(checkJson)\n  */\n\n  const response3 = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      \"X-Shopify-Access-Token\": accessToken\n    },\n    body: query_short_list\n  });\n  const orderJson = await response3.json();\n  const data1 = orderJson.data.orders.edges;\n  var i, j;\n  const country_set = new Set();\n  const tab = [];\n\n  for (i = 0; i < data1.length; i++) {\n    country_set.add(data1[i].node.id);\n  } //console.log(country_set.size)\n\n\n  const iterator1 = country_set.values();\n\n  for (j = 0; j < country_set.size; j++) {\n    const value = iterator1.next().value;\n    const a = {\n      id: value,\n      content: value\n    };\n    tab.push(a);\n  }\n\n  console.log(tab);\n  return tab;\n};\n\nrequest_order();\nmodule.exports = request_order;","map":{"version":3,"sources":["/Users/tatianatian/Desktop/Startup/shopify_front_back_end/client/components/Query_orders.js"],"names":["global","fetch","require","request_order","query","JSON","stringify","check","query_short_list","shop","accessToken","response3","method","headers","body","orderJson","json","data1","data","orders","edges","i","j","country_set","Set","tab","length","add","node","id","iterator1","values","size","value","next","a","content","push","console","log","module","exports"],"mappings":"AAAAA,MAAM,CAACC,KAAP,GAAeC,OAAO,CAAC,YAAD,CAAtB;;AAEA,MAAMC,aAAa,GAAG,YAAY;AAC9B,QAAMC,KAAK,GAAGC,IAAI,CAACC,SAAL,CAAe;AACzBF,IAAAA,KAAK,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADiB,GAAf,CAAd;AA4CA,QAAMG,KAAK,GAAGF,IAAI,CAACC,SAAL,CAAe;AACzBF,IAAAA,KAAK,EAAG;;;;;;;;;;;;;AADiB,GAAf,CAAd;AAgBA,QAAMI,gBAAgB,GAAGH,IAAI,CAACC,SAAL,CAAe;AACpCF,IAAAA,KAAK,EAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAD4B,GAAf,CAAzB;AA+BA,QAAMK,IAAI,GAAG,qBAAb;AACA,QAAMC,WAAW,GAAG,wCAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,QAAMC,SAAS,GAAG,MAAMV,KAAK,CAAE,WAAUQ,IAAK,iCAAjB,EAAmD;AAC5EG,IAAAA,MAAM,EAAE,MADoE;AAE5EC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,gCAA0BH;AAFrB,KAFmE;AAO5EI,IAAAA,IAAI,EAAEN;AAPsE,GAAnD,CAA7B;AASA,QAAMO,SAAS,GAAG,MAAMJ,SAAS,CAACK,IAAV,EAAxB;AACA,QAAMC,KAAK,GAAGF,SAAS,CAACG,IAAV,CAAeC,MAAf,CAAsBC,KAApC;AAEA,MAAIC,CAAJ,EAAOC,CAAP;AACA,QAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;AACA,QAAMC,GAAG,GAAG,EAAZ;;AACA,OAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,KAAK,CAACS,MAAtB,EAA8BL,CAAC,EAA/B,EAAmC;AAC/BE,IAAAA,WAAW,CAACI,GAAZ,CAAgBV,KAAK,CAACI,CAAD,CAAL,CAASO,IAAT,CAAcC,EAA9B;AACH,GA1I6B,CA2I9B;;;AACA,QAAMC,SAAS,GAAGP,WAAW,CAACQ,MAAZ,EAAlB;;AAEA,OAAKT,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,WAAW,CAACS,IAA5B,EAAkCV,CAAC,EAAnC,EAAuC;AACnC,UAAMW,KAAK,GAAGH,SAAS,CAACI,IAAV,GAAiBD,KAA/B;AACA,UAAME,CAAC,GAAG;AACNN,MAAAA,EAAE,EAAEI,KADE;AAENG,MAAAA,OAAO,EAAEH;AAFH,KAAV;AAKAR,IAAAA,GAAG,CAACY,IAAJ,CAASF,CAAT;AACH;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAYd,GAAZ;AACA,SAAOA,GAAP;AAEH,CA1JD;;AA4JAtB,aAAa;AACbqC,MAAM,CAACC,OAAP,GAAiBtC,aAAjB","sourcesContent":["global.fetch = require(\"node-fetch\");\n\nconst request_order = async () => {\n    const query = JSON.stringify({\n        query: `mutation {\n        bulkOperationRunQuery(\n            query:\"\"\"\n            {\n            orders(query: \"created_at:>=2020-01-01\") {\n                edges {\n                node {\n                    id\n                    customerLocale\n                    customer {\n                    addresses {\n                        countryCode\n                    }\n\n                    }\n                    totalPriceSet {\n                    presentmentMoney {\n                        amount\n                        currencyCode\n                    }\n                    shopMoney {\n                        amount\n                        currencyCode\n                    }\n                    }\n                }\n                }\n            }\n            }\n            \"\"\"\n        ) {\n            bulkOperation {\n            id\n            status\n            }\n            userErrors {\n            field\n            message\n            }\n        }\n        }`\n    });\n\n    const check = JSON.stringify({\n        query: `query {\n            currentBulkOperation {\n            id\n            status\n            errorCode\n            createdAt\n            completedAt\n            objectCount\n            fileSize\n            url\n            partialDataUrl\n            }\n        }`\n    });\n\n    const query_short_list = JSON.stringify({\n        query: `query {\n            orders(query: \"created_at:>=2020-01-01\", first: 249) {\n                edges {\n                node {\n                    id\n                    customerLocale\n                    customer {\n                    addresses {\n                        countryCode\n                        country\n                        countryCodeV2\n                    }\n                    }\n                    totalPriceSet {\n                    presentmentMoney {\n                        amount\n                        currencyCode\n                    }\n                    shopMoney {\n                        amount\n                        currencyCode\n                    }\n                    }\n                    createdAt\n                }\n                }\n            }\n        }`\n    });\n\n    const shop = 'haloy.myshopify.com'\n    const accessToken = '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'\n    \n    /*\n    const response = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json',\n        \"X-Shopify-Access-Token\": accessToken,\n        },\n        body: query\n    })\n    \n    const responseJson = await response.json();\n    console.log(responseJson.data.bulkOperationRunQuery)\n\n\n    const response2 = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n        method: 'POST',\n        headers: {\n        'Content-Type': 'application/json',\n        \"X-Shopify-Access-Token\": accessToken,\n        },\n        body: check\n    })\n\n    const checkJson = await response2.json();\n    console.log(checkJson)\n    */\n    const response3 = await fetch(`https://${shop}/admin/api/2019-10/graphql.json`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            \"X-Shopify-Access-Token\": accessToken,\n        },\n        \n        body: query_short_list\n    })\n    const orderJson = await response3.json();\n    const data1 = orderJson.data.orders.edges\n\n    var i, j;\n    const country_set = new Set();\n    const tab = []\n    for (i = 0; i < data1.length; i++) {\n        country_set.add(data1[i].node.id);\n    }\n    //console.log(country_set.size)\n    const iterator1 = country_set.values();\n\n    for (j = 0; j < country_set.size; j++) {\n        const value = iterator1.next().value\n        const a = {\n            id: value,\n            content: value\n        }\n       \n        tab.push(a)\n    }\n    console.log(tab)\n    return tab;\n\n};\n  \nrequest_order()\nmodule.exports = request_order; \n\n\n"]},"metadata":{},"sourceType":"script"}