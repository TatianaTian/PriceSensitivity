{"version":3,"file":"static/webpack/static/development/pages/detect_transactions.js.47851f1161f19114c886.hot-update.js","sources":["webpack:///./functions/fetch_from_map.js"],"sourcesContent":["import store from 'store-js';\nimport { KeypressListener } from '@shopify/polaris';\nimport { json } from 'body-parser';\n\nconst getPearsonCorrelation = require('./calc_correlation')\nconst linear_regression = require('./linear_regression')\nconst price_elasticity = require('./price_elasticity')\n\nconst fetch_from_map = (select, tabs, maps, product_id_title_map, dropdown_select, product_id_price_map, fx_map) => {\n\n\n    //try{\n        \n        if (select !== 0){\n            // fetch data for graphs\n            const selected_currency = tabs[select]['id']\n            console.log(\"selected currency is \", selected_currency)\n            console.log(\"dropdown_select is \", dropdown_select)\n\n\n            const selected_data_all_products = maps.get(selected_currency)\n            const selected_data = selected_data_all_products.get(dropdown_select)\n            const product_price = product_id_price_map.get(dropdown_select)\n            const today_fx = fx_map.get(selected_currency)\n            console.log(\"product_price is \", product_price)\n\n            var product_price_list = selected_data[2].map(function(element) {\n                return Math.round(element*product_price*100)/100;\n            });\n\n            console.log(\"selected_data[1] is \", selected_data[1]);\n            console.log(\"product_price_list is \", product_price_list);\n            const [regression_fx, regression_sales, regression_predicted_sales, slope, intercept] = linear_regression(selected_data[1],product_price_list)\n\n            const price_elasticity = price_elasticity(selected_data[1], product_price_list, Math.abs(slope))\n\n   \n            console.log(\"indicated_sale is \", Math.round((today_fx*product_price*slope+intercept)*100)/100);\n            console.log(\"regression_fx is \", regression_fx);\n            console.log(\"regression_sales is \", regression_sales);\n            console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n            console.log(\"slope is \", slope);\n            console.log(\"intercept is \", intercept)\n            console.log(\"today_product_price is \", today_fx*product_price);\n            console.log(\"selected data is \", selected_data)\n\n            localStorage.setItem('date', selected_data[0]);\n            localStorage.setItem('price', selected_data[1]);\n            localStorage.setItem('exchange_rate', product_price_list);\n            localStorage.setItem('current_level', selected_data[3]);\n            localStorage.setItem('correlation', getPearsonCorrelation(selected_data[1],selected_data[2]));\n            //localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_sales', regression_sales);\n            localStorage.setItem('regression_predicted_sales', regression_predicted_sales);\n            localStorage.setItem('slope', Math.abs(slope));\n            localStorage.setItem('today_product_price', Math.round(today_fx*product_price*100)/100);\n            localStorage.setItem('indicated_sale', Math.round((today_fx*product_price*slope+intercept)*100)/100);\n\n            console.log(\"done storing\")\n            /*\n            console.log(\"localStorage.getItem('date') is\",localStorage.getItem('date'))\n            console.log(\"localStorage.getItem('price') is\",localStorage.getItem('price'))\n            console.log(\"localStorage.getItem('exchange_rate') is\",localStorage.getItem('exchange_rate'))*/\n\n            // find the product price\n\n\n\n\n\n\n\n            // filter options\n            console.log(\"selected_data_all_products is\",selected_data_all_products)\n            console.log('product_id_title_map is ', product_id_title_map)\n            var num_dates = 0\n            var options = []\n            var product_options = []\n            for (let [key, value] of selected_data_all_products) {\n                num_dates = value[0].length\n                if (num_dates>1){\n                    var price_set = new Set(value[1]);\n                    var fx_set = new Set(value[2]);\n                    if (price_set.size>1 && fx_set.size>1){\n                        console.log('use key to get name ', product_id_title_map.get(key))\n                        options.push(\n                            {\n                                label:product_id_title_map.get(key), value: key\n                            }\n                        )\n                        product_options.push(key)\n                    }\n                }\n                console.log(key + ' = ' + value)\n            }\n\n            // Find the most sensitive product\n            let slope_map = new Map()\n            var slope_list = []\n\n            console.log(\"product_options is \", product_options)\n\n            for (var k=0; k<product_options.length; k++){\n                if (product_options[k] !== 'all'){\n                    const product_price_rank = product_id_price_map.get(product_options[k])\n                    console.log(\"product_price_rank is \", product_price_rank)\n                    \n                    var product_price_list_rank = selected_data_all_products.get(product_options[k])[2].map(function(element) {\n                        return element*product_price_rank;\n                    });\n    \n                    const slope_rank = linear_regression(selected_data_all_products.get(product_options[k])[1],product_price_list_rank)[3]\n                    //slope_rank = product_price_rank/100*slope_rank\n    \n                    console.log(\"slope_rank is \", slope_rank)\n    \n                    if (slope_map.has(slope_rank)){\n                        const value = slope_map.get(slope_rank)\n                        value.push(product_id_title_map.get(product_options[k]))\n                        slope_map.set(slope_rank, value)\n                    } else {\n                        \n                        console.log(\"product_id_title_map is \", product_id_title_map)\n                        console.log(\"product_options[k] is \", product_options[k])\n                        console.log(\"product_id_title_map.get([product_options[k]] is \", product_id_title_map.get(product_options[k]))\n                        \n                        slope_map.set(slope_rank, product_id_title_map.get(product_options[k]))\n                    }\n                    slope_list.push(slope_rank)\n                }\n            }\n\n            console.log(\"slope_map is \", slope_map)\n            slope_list.sort(function(a, b){return b-a});\n            console.log(\"slope_list is \", slope_list)\n\n            const product_set_rank = new Set();\n            for (var f=0;f<slope_list.length;f++){\n                const product_options_list = slope_map.get(slope_list[f])\n                console.log(\"product_options_list is \", product_options_list)\n                product_set_rank.add(product_options_list)\n            }\n\n            console.log(\"product_set_rank is \", product_set_rank)\n\n            let product_array_rank = Array.from(product_set_rank);\n            localStorage.setItem('product_array_rank', product_array_rank);\n            localStorage.setItem('slope_rank', slope_list);\n\n            console.log(\"product_array_rank is \", product_array_rank)\n        }\n\n        \n\n\n\n    //} catch(err){\n     //   console.log(\"no id\")\n    //}\n    \n    return options\n}\n\nmodule.exports = fetch_from_map; \n\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AAAA;AACA;;;;;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAKA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAlEA;AAAA;AACA;AADA;AAkEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAnFA;AAAA;AAAA;AAAA;AAAA;AACA;AAoFA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAzBA;AA0BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;A","sourceRoot":""}