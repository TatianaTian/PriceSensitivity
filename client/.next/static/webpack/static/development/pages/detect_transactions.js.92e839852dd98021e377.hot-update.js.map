{"version":3,"file":"static/webpack/static/development/pages/detect_transactions.js.92e839852dd98021e377.hot-update.js","sources":["webpack:///./components/Country_data.js"],"sourcesContent":["import React, {useCallback, useState} from 'react';\nimport {Card, Layout, Caption, TextStyle,DisplayText, Select} from '@shopify/polaris';\nimport {HorizontalBar, Doughnut, Bar} from 'react-chartjs-2';\nimport store from 'store-js';\n//import '../style/style.css'\nconst getPearsonCorrelation = require('../functions/calc_correlation')\nconst string_to_list = require('../functions/string_to_list')\nconst fetch_from_map = require('../functions/fetch_from_map')\nimport {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp} from 'react-icons/fa';\n\n\n\n\nexport default function Country_data(props) {  \n\n    const [selected, setSelected] = useState('all');\n    const handleSelectChange = useCallback((value) => setSelected(value), []);\n    console.log('props.product_id_title_map is ', props.product_id_title_map)\n    var options = fetch_from_map(props.select, props.tabs, props.maps, props.product_id_title_map, selected, props.product_id_price_map, props.fx_map)\n    \n    const store_currency = props.store_currency\n    \n    \n  \n    /*\n    options = [\n    {label: 'All products', value: 'allProducts'},\n    {label: 'Oldest update', value: 'oldestUpdate'},\n    {label: 'Most spent', value: 'mostSpent'},\n    {label: 'Most orders', value: 'mostOrders'},\n    {label: 'Last name A–Z', value: 'lastNameAlpha'},\n    {label: 'Last name Z–A', value: 'lastNameReverseAlpha'},\n    ];*/\n\n    console.log(\"options are \", options)\n    console.log(\"selected from dropdown is \", selected)\n    console.log(\"on tab \", props.select)\n    console.log(\"tabs are \", props.tabs)\n    console.log(\"map is \", props.maps)\n    \n\n    \n\n\n    const date_string = localStorage.getItem('date')\n    const price_string = localStorage.getItem('price')\n    const exchange_rate_string = localStorage.getItem('exchange_rate')\n    const current_level_string = localStorage.getItem('current_level')\n    const correlation = localStorage.getItem('correlation')\n    const regression_fx_string = localStorage.getItem('regression_fx');\n    const regression_sales_string = localStorage.getItem('regression_sales');\n    const regression_predicted_sales_string = localStorage.getItem('regression_predicted_sales');\n    const regression_slope = localStorage.getItem('slope');\n    const today_product_price = localStorage.getItem('today_product_price');\n    const product_array_rank_string = localStorage.getItem('product_array_rank');\n    const slope_rank_string = localStorage.getItem('slope_rank');\n    const indicated_sale = localStorage.getItem('indicated_sale');\n    \n    \n    var date = []\n    var price = []\n    var exchange_rate = []\n    var current_level = []\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    var product_array_rank = []\n    var slope_rank = []\n\n    var min_bar = 0\n    var max_bar = 0\n    var min_line = 0\n    var max_line = 0\n    var min_price_range = 0\n    var max_price_range = 0\n    var min_sales_range = 0\n    var max_sales_range = 0\n\n\n    if (date_string.includes(',')){\n        date = string_to_list(localStorage.getItem('date'),'')\n        /*\n        price = string_to_list(store.get('price'),'float')\n        exchange_rate = string_to_list(store.get('exchange_rate'),'float')\n        current_level = string_to_list(store.get('current_level'),'float')  */\n        price = string_to_list(price_string,'float')\n        exchange_rate = string_to_list(exchange_rate_string,'float')\n        current_level = string_to_list(current_level_string,'float')  \n        regression_fx = string_to_list(regression_fx_string,'float')\n        regression_sales = string_to_list(regression_sales_string,'float')\n        regression_predicted_sales = string_to_list(regression_predicted_sales_string,'float')\n        product_array_rank = string_to_list(product_array_rank_string,'')\n        slope_rank = string_to_list(slope_rank_string,'float')\n\n        min_price_range = Math.min.apply(Math, regression_fx)\n        max_price_range = Math.max.apply(Math, regression_fx)\n        min_sales_range = Math.min.apply(Math, regression_sales)\n        max_sales_range = Math.max.apply(Math, regression_sales)\n        \n        min_bar = Math.min.apply(Math, price)*0.8\n        max_bar = (Math.max.apply(Math, price)-min_bar)*2.2+min_bar\n\n        max_line = Math.max.apply(Math, exchange_rate)\n        min_line = max_line - (max_line - Math.min.apply(Math, exchange_rate) )*2.2\n\n        console.log(\"y is \", [min_bar, max_bar, min_line, max_line])\n        \n\n    } else {\n        date = [date_string]\n        price = [price_string]\n        exchange_rate = [exchange_rate_string]\n        current_level = string_to_list(store.get('current_level'),'float')\n    }\n\n       \n    console.log(\"regression_fx is \", regression_fx);\n    console.log(\"regression_sales is \", );\n    console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n    console.log(\"product_array_rank is \", product_array_rank);\n    console.log(\"slope_rank is \", slope_rank);\n    //console.log(\"product_array_rank[0] is \", product_array_rank[0]===\"\");\n    console.log(\"indicated_sale is \", indicated_sale);\n    \n\n    \n    //const level = store.get('level') \n  \n    var r = Math.min(Math.abs(parseFloat(correlation)), 3)\n    //r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1) * 100)\n    const doughnut = [r, 3-r]\n    \n\n    var leve_num1 = [Math.max(current_level[0]*100-2,0), Math.max(current_level[1]*100-2,0), Math.max(current_level[2]*100-2,0), Math.max(current_level[3]*100-2,0)]\n    //console.log(\"level-num1 is \", leve_num1)\n    var leve_num3 = [98-leve_num1[0],98-leve_num1[1],98-leve_num1[2],98-leve_num1[3]]\n    //console.log(\"level-num3 is \", leve_num3)\n    const leve_num2 = [2, 2, 2, 2]\n\n\n    /*\n    console.log(\"date is \", date)\n    console.log(\"price is \", price)\n    console.log(\"exchange_rate is \", exchange_rate)\n    console.log(\"current_level is \", current_level)\n    console.log(\"correlation is \", correlation)*/\n \n    \n    var color = ''\n    var text = ''\n    if (r < 1){\n        color = '#63b7af'\n        text = 'LOW'\n    } else if (r < 2){\n        color = '#ffa41b'\n        text = 'MODERATE'\n    } else {\n        color = '#ff6f5e'\n        text = 'HIGH'\n    }\n    \n    \n    \n    const doughnutChartData = {\n      labels: [text+': '+Math.round(Math.abs(correlation)*100)/100],\n      datasets: [\n        {\n          //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n          backgroundColor: [color,\"#ECECEC\"],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          data: doughnut,\n    \n        }\n      ],\n    };\n      \n    const doughnutChartOptions = {\n      circumference: 1* Math.PI,\n      rotation: Math.PI,\n      maintainAspectRatio: true,\n      cutoutPercentage:80,\n      tooltips:{\n        enabled:false,\n      },\n      legend: {\n                display: true,\n                position: 'bottom',\n                align:'center',\n                labels:{\n                    fontSize: 20,\n                    boxWidth: 0,\n                    fontColor: '#222831'\n                }\n              },\n      pieceLabel: {\n        render: 'value' + '%',\n        fontColor: \"white\",\n      },\n    layout: {\n        padding: {\n            left: 80,\n            right: 20,\n            top: 20,\n            bottom: 20\n        }\n    } \n      };\n    \n    var lineChartData = {\n      //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n      labels: date,\n      //lables: [price[0],price[1],price[2]],\n      datasets: [{\n        yAxisID: 'A',\n        type: \"bar\",\n        label: \"sales in store currency\",\n        fill: false,\n        lineTension: 0,\n        backgroundColor: \"#63b7af\",\n        borderColor: \"#63b7af\",\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: \"rgb(1, 2, 58)\",\n        pointBackgroundColor: \"rgb(1, 2, 58)\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10,\n        // notice the gap in the data and the spanGaps: false\n        //data: [89.54, 96.8, 246.51],\n        data: price,\n        //data: [store.get('price')],\n        spanGaps: false,\n        barPercentage: 0.3\n        },\n        {\n          yAxisID: 'B',\n          type: \"line\",\n          label: \"product price\",\n          fill: false,\n          lineTension: 0.3,\n          backgroundColor: \"#ee8572\",\n          borderColor: \"#ee8572\",\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: \"#ee8572\",\n          pointBackgroundColor: \"#ee8572\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"#ee8572\",\n          pointHoverBorderColor: \"#ee8572\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 4,\n          pointHitRadius: 10,\n          // notice the gap in the data and the spanGaps: false\n          //data: [0.8072950291, 0.8072950291, 0.8072950291],\n          data: exchange_rate,\n          //data: [store.get('exchange_rate')],\n          spanGaps: false,\n          }\n    \n      ]\n      };\n    \n    var lineChartOptions = {\n      maintainAspectRatio: true,\n      tooltips:{\n        enabled:true,\n      },\n      legend: {\n        display: false,\n      },\n      scales: {\n                yAxes:\n                [{\n                    id: 'A',\n                    type: 'linear',\n                    position: 'left',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                        min: min_bar,\n                        max: max_bar\n                    }\n    \n     \n                  }, {\n                    id: 'B',\n                    type: 'linear',\n                    position: 'right',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                        min: min_line,\n                        max: max_line\n                    }\n    \n    \n                  }],\n                xAxes: [{\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],            \n            },\n        layout: {\n              padding: {\n                  left: 50,\n                  right: 50,\n                  top: 20,\n                  bottom: 20\n              }\n          }   \n    };\n\n    var lineRegressionChartData = {\n        //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n        //labels: [0.8,0.9,1.0],\n        labels: regression_fx,\n        datasets: [{\n   \n          type: \"line\",\n          label: \"sales in store currency\",\n          fill: false,\n          lineTension: 0,\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderWidth: 0,\n          borderColor: \"rgba(0, 0, 0, 0)\",\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: \"#63b7af\",\n          pointBackgroundColor: \"#63b7af\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"#63b7af\",\n          pointHoverBorderColor: \"#63b7af\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 4,\n          pointHitRadius: 10,\n          // notice the gap in the data and the spanGaps: false\n          //data: [89.54, 96.8, 246.51],\n          //data: [209, 555, 143],\n          data: regression_sales,\n          spanGaps: false,\n          barPercentage: 0.3\n          },\n          {\n            type: \"line\",\n            label: \"fitted model\",\n            fill: false,\n            backgroundColor: \"#D3D3D3\",\n            borderColor: \"#D3D3D3\",\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: \"#D3D3D3\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"#D3D3D3\",\n            pointHoverBorderColor: \"#D3D3D3\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            //data: [100,200,300],\n            data: regression_predicted_sales,\n            spanGaps: false,\n            }\n        ]\n        };\n      \n      var lineRegressionChartOptions = {\n        maintainAspectRatio: true,\n        tooltips:{\n          enabled:true,\n        },\n        legend: {\n          display: false,\n        },\n        scales: {\n                  yAxes:\n                  [{\n                      id: 'A',\n                      type: 'linear',\n                      //position: 'left',\n                      gridLines: {\n                          color: \"rgba(0, 0, 0, 0)\",\n                      },\n                      //ticks: {min: min_bar,\n                      //    max: max_bar}\n      \n       \n                    }],\n                  xAxes: [{\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                  }\n                  },],            \n              },\n          layout: {\n                padding: {\n                    left: 50,\n                    right: 50,\n                    top: 20,\n                    bottom: 20\n                }\n            }   \n      };\n    \n    \n    const barChartData = {\n      //labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP','US - Aaa Corporate Bonds', 'US - S&P 500'],\n      labels: product_array_rank,\n      datasets: [\n        {\n          backgroundColor: ['#63b7af', \"#ff6f5e\", '#ffa41b','#b2ebf2','#35495e'],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          //data: [0.65, 0.50, 0.47, 0.39, 0.37]\n          data: slope_rank\n        }\n      ],\n    };\n    \n    const barChartOptions = {\n    \n      legend: {\n                display: false,\n              },\n    \n      scales: {\n                xAxes: [{\n\n\n\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"Sales change in \"+store_currency+\" with 1 \"+props.tabs[props.select]['id']+\" price change\"\n                  },\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],\n                yAxes: [{\n                  barPercentage: 0.3,\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],\n              },\n        layout: {\n                padding: {\n                    left: 20,\n                    right: 80,\n                    top: 20,\n                    bottom: 20\n                }\n            }  \n    };\n    \n    const rangeChartData = {\n        labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n        datasets: [\n        {\n        label: 'range',\n        backgroundColor: '#35495e',\n        stack: '3',\n        data: leve_num1,\n        },\n        {\n        backgroundColor: '#63b7af',\n        stack: '3',\n        data: leve_num2,\n        },\n        {\n          label: 'range2',\n          backgroundColor: '#35495e',\n          stack: '3',\n          data: leve_num3,\n          },\n        ],\n      };\n        \n      const rangeChartOptions = {\n        maintainAspectRatio: true,\n        tooltips:{\n          enabled:false,\n        },\n        legend: {\n                  display: false,\n                },\n        scales: {\n                  xAxes: [{\n                    stacked: true,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                      min: 0,\n                      max: 100,\n                      callback: function(value) {\n                          return value + \"%\"\n                      }\n                    }\n                  },],\n                  yAxes: [{\n                    stacked: true,\n                    barPercentage: 0.4,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                  }\n                  \n                  },],\n                },\n                layout: {\n                  padding: {\n                      left: 20,\n                      right: 80,\n                      top: 20,\n                      bottom: 20\n                  }\n              }  \n        };\n\n        //console.log(\"height is \", [height2, h1, h2, h3])\n    return (\n            <Layout sectioned={false}>\n                <Layout.Section oneHalf>\n                    <Select\n                            label=\"Analytics on\"\n                            labelInline\n                            options={options}\n                            onChange={handleSelectChange}\n                            value={selected}\n                            />\n                    <Card title=\"Price Sensitivity\" sectioned>\n                    <Doughnut\n                        height= \"100vh\"\n                        data={doughnutChartData}\n                        options={doughnutChartOptions}\n                    />\n                    </Card>\n\n                    <Card title=\"Most Price Sentitive Products in the Country\" sectioned>\n                    {product_array_rank[0]!==\"\"? (\n\n                      <HorizontalBar \n                      height=\"100vh\"\n                      data={barChartData}\n                      options={barChartOptions}\n                      />\n\n                    ):(\n                      <p>No enough data. Come back when you have more international orders :) You can do it!</p>\n                    )}\n\n\n                    </Card>\n                    <Card title=\"Price And Sales By Date\" sectioned>\n                      \n                    <Bar \n                        height=\"220vh\"\n                        data={lineChartData}\n                        options={lineChartOptions}\n                        />\n                    </Card>\n                </Layout.Section>\n                <Layout.Section oneHalf>\n                    <Card title=\"Sales And Prices Correlation\" sectioned>\n                        <Bar \n                            height=\"150vh\"\n                            data={lineRegressionChartData}\n                            options={lineRegressionChartOptions}\n                        />\n                        <div className =\"main_background_image\">\n                        <Card title=\"Analytics\" sectioned>\n                            <p><b>Price range:</b> {min_price_range} {props.tabs[props.select]['id']} - {max_price_range} {props.tabs[props.select]['id']}</p><br/>\n                            <p><b>Sales range:</b> {min_sales_range} {store_currency} - {max_sales_range} {store_currency} per day</p><br/>\n                            <p><FaRegArrowAltCircleDown/> 1 {props.tabs[props.select]['id']} in price</p><br/>\n                            <p><FaRegArrowAltCircleUp/> {regression_slope} {store_currency} sales/day</p><br/>\n                            <p><b>Current price:</b> {today_product_price} {props.tabs[props.select]['id']}</p><br/>\n                            <p><b>Projected sales:</b> {indicated_sale} {store_currency} per day</p><br/>\n                        </Card>\n                        </div>\n                    </Card>\n                    <Card title=\"The current price level\" sectioned>\n                        <HorizontalBar \n                            height=\"100vh\"\n                            data={rangeChartData}\n                            options={rangeChartOptions}\n                        />\n                    </Card>\n                </Layout.Section>\n            </Layout>\n      \n         \n\n    );\n  }\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAIA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAHA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAtBA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAhCA;AA+DA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AAcA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AAcA;AACA;AACA;AADA;AADA;AA7BA;AAmCA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AA3CA;AAqDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAjCA;AA2DA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AATA;AAYA;AACA;AACA;AADA;AADA;AAdA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AA5BA;AAuCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAJA;AAcA;AAEA;AACA;AADA;AAIA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AARA;AAYA;AACA;AACA;AACA;AADA;AAFA;AAbA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AA1BA;AAoCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAdA;AAuBA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AAaA;AACA;AACA;AACA;AACA;AADA;AAHA;AAdA;AAuBA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AA/BA;AACA;AAyCA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAYA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAOA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AACA;AAAA;AAAA;AAUA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAYA;;;;A","sourceRoot":""}