{"version":3,"file":"static/development/pages/detect_transactions.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Country_data.js","webpack:///./components/Main_data.js","webpack:///./components/MapChart.js","webpack:///./functions/calc_correlation.js","webpack:///./functions/change_format2.js","webpack:///./functions/country_code_to_name.js","webpack:///./functions/fetch_from_map.js","webpack:///./functions/linear_regression.js","webpack:///./functions/price_elasticity.js","webpack:///./functions/price_sensitive_market.js","webpack:///./functions/string_to_list.js","webpack:///./pages/detect_transactions.js","webpack:///external \"@shopify/app-bridge-react\"","webpack:///external \"@shopify/app-bridge/actions\"","webpack:///external \"@shopify/polaris\"","webpack:///external \"body-parser\"","webpack:///external \"d3-fetch\"","webpack:///external \"d3-scale\"","webpack:///external \"graphql-tag\"","webpack:///external \"js-regression\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"react-bootstrap\"","webpack:///external \"react-chartjs-2\"","webpack:///external \"react-icons/fa\"","webpack:///external \"react-loader-spinner\"","webpack:///external \"react-simple-maps\"","webpack:///external \"react-tooltip\"","webpack:///external \"store-js\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import React, {useCallback, useState} from 'react';\nimport {Card, Layout, Caption, TextStyle,DisplayText, Select} from '@shopify/polaris';\nimport {HorizontalBar, Doughnut, Bar} from 'react-chartjs-2';\nimport store from 'store-js';\nimport { Form, OverlayTrigger, Tooltip } from 'react-bootstrap';\n//import '../style/style.css'\nconst getPearsonCorrelation = require('../functions/calc_correlation')\nconst string_to_list = require('../functions/string_to_list')\nconst fetch_from_map = require('../functions/fetch_from_map')\nimport {FaRegArrowAltCircleDown, FaRegArrowAltCircleUp, FaRegQuestionCircle} from 'react-icons/fa';\n\n\n\n\nexport default function Country_data(props) {  \n\n    const [selected, setSelected] = useState('all');\n    const handleSelectChange = useCallback((value) => setSelected(value), []);\n    console.log('props.product_id_title_map is ', props.product_id_title_map)\n    var options = fetch_from_map(props.select, props.tabs, props.maps, props.product_id_title_map, selected, props.product_id_price_map, props.fx_map)\n    \n    const store_currency = props.store_currency\n    \n    \n  \n    /*\n    options = [\n    {label: 'All products', value: 'allProducts'},\n    {label: 'Oldest update', value: 'oldestUpdate'},\n    {label: 'Most spent', value: 'mostSpent'},\n    {label: 'Most orders', value: 'mostOrders'},\n    {label: 'Last name A–Z', value: 'lastNameAlpha'},\n    {label: 'Last name Z–A', value: 'lastNameReverseAlpha'},\n    ];*/\n\n    console.log(\"options are \", options)\n    console.log(\"selected from dropdown is \", selected)\n    console.log(\"on tab \", props.select)\n    console.log(\"tabs are \", props.tabs)\n    console.log(\"map is \", props.maps)\n    \n\n    \n\n\n    const date_string = localStorage.getItem('date')\n    const price_string = localStorage.getItem('price')\n    const exchange_rate_string = localStorage.getItem('exchange_rate')\n    const current_level_string = localStorage.getItem('current_level')\n    const correlation = localStorage.getItem('correlation')\n    const regression_fx_string = localStorage.getItem('regression_fx');\n    const regression_sales_string = localStorage.getItem('regression_sales');\n    const regression_predicted_sales_string = localStorage.getItem('regression_predicted_sales');\n    const regression_slope = localStorage.getItem('slope');\n    const today_product_price = localStorage.getItem('today_product_price');\n    const product_array_rank_string = localStorage.getItem('product_array_rank');\n    const slope_rank_string = localStorage.getItem('slope_rank');\n    const indicated_sale = localStorage.getItem('indicated_sale');\n    \n    \n    var date = []\n    var price = []\n    var exchange_rate = []\n    var current_level = []\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    var product_array_rank = []\n    var slope_rank = []\n\n    var min_bar = 0\n    var max_bar = 0\n    var min_line = 0\n    var max_line = 0\n    var min_price_range = 0\n    var max_price_range = 0\n    var min_sales_range = 0\n    var max_sales_range = 0\n\n\n    if (date_string.includes(',')){\n        date = string_to_list(localStorage.getItem('date'),'')\n        /*\n        price = string_to_list(store.get('price'),'float')\n        exchange_rate = string_to_list(store.get('exchange_rate'),'float')\n        current_level = string_to_list(store.get('current_level'),'float')  */\n        price = string_to_list(price_string,'float')\n        exchange_rate = string_to_list(exchange_rate_string,'float')\n        current_level = string_to_list(current_level_string,'float')  \n        regression_fx = string_to_list(regression_fx_string,'float')\n        regression_sales = string_to_list(regression_sales_string,'float')\n        regression_predicted_sales = string_to_list(regression_predicted_sales_string,'float')\n        product_array_rank = string_to_list(product_array_rank_string,'')\n        slope_rank = string_to_list(slope_rank_string,'float')\n\n        min_price_range = Math.min.apply(Math, regression_fx)\n        max_price_range = Math.max.apply(Math, regression_fx)\n        min_sales_range = Math.min.apply(Math, regression_sales)\n        max_sales_range = Math.max.apply(Math, regression_sales)\n        \n        min_bar = Math.min.apply(Math, price)*0.8\n        max_bar = (Math.max.apply(Math, price)-min_bar)*2.2+min_bar\n\n        max_line = Math.max.apply(Math, exchange_rate)\n        min_line = max_line - (max_line - Math.min.apply(Math, exchange_rate) )*2.2\n\n        console.log(\"y is \", [min_bar, max_bar, min_line, max_line])\n        \n\n    } else {\n        date = [date_string]\n        price = [price_string]\n        exchange_rate = [exchange_rate_string]\n        current_level = string_to_list(store.get('current_level'),'float')\n    }\n\n       \n    console.log(\"regression_fx is \", regression_fx);\n    console.log(\"regression_sales is \", );\n    console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n    console.log(\"product_array_rank is \", product_array_rank);\n    console.log(\"slope_rank is \", slope_rank);\n    //console.log(\"product_array_rank[0] is \", product_array_rank[0]===\"\");\n    console.log(\"indicated_sale is \", indicated_sale);\n    \n\n    \n    //const level = store.get('level') \n  \n    var r = Math.min(Math.abs(parseFloat(correlation)), 3)\n    //r = parseInt(Math.min(Math.abs(getPearsonCorrelation([34,37,24,67,42 ],[1.23,1.22, 1.23, 1.24, 1.25])), 1) * 100)\n    var doughnut = [r, 3-r]\n    \n   \n    \n\n    var leve_num1 = [Math.max(current_level[0]*100-2,0), Math.max(current_level[1]*100-2,0), Math.max(current_level[2]*100-2,0), Math.max(current_level[3]*100-2,0)]\n    //console.log(\"level-num1 is \", leve_num1)\n    var leve_num3 = [98-leve_num1[0],98-leve_num1[1],98-leve_num1[2],98-leve_num1[3]]\n    //console.log(\"level-num3 is \", leve_num3)\n    const leve_num2 = [2, 2, 2, 2]\n\n\n    /*\n    console.log(\"date is \", date)\n    console.log(\"price is \", price)\n    console.log(\"exchange_rate is \", exchange_rate)\n    console.log(\"current_level is \", current_level)\n    console.log(\"correlation is \", correlation)*/\n \n    \n    var color = ''\n    var text = ''\n    if (r < 1){\n        color = '#63b7af'\n        text = 'LOW'\n    } else if (r < 2){\n        color = '#ffa41b'\n        text = 'MODERATE'\n    } else {\n        color = '#ff6f5e'\n        text = 'HIGH'\n    }\n   \n    \n    \n    const doughnutChartData = {\n      labels: [text+': '+Math.round(Math.abs(correlation)*100)/100],\n      \n      datasets: [\n        {\n          //backgroundColor: [\"#FF6D2D\",\"#45853C\"],\n          backgroundColor: [color,\"#ECECEC\"],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          data: doughnut,\n    \n        }\n      ],\n    };\n      \n    const doughnutChartOptions = {\n      circumference: 1* Math.PI,\n      rotation: Math.PI,\n      maintainAspectRatio: true,\n      cutoutPercentage:80,\n      tooltips:{\n        enabled:false,\n      },\n      legend: {\n                display: true,\n                position: 'bottom',\n                align:'center',\n                labels:{\n                    fontSize: 20,\n                    boxWidth: 0,\n                    fontColor: '#222831'\n                }\n              },\n      pieceLabel: {\n        render: 'value' + '%',\n        fontColor: \"white\",\n      },\n    layout: {\n        padding: {\n            left: 80,\n            right: 20,\n            top: 20,\n            bottom: 20\n        }\n    } \n      };\n    \n    var lineChartData = {\n      //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n      labels: date,\n      //lables: [price[0],price[1],price[2]],\n      datasets: [{\n        yAxisID: 'A',\n        type: \"bar\",\n        label: \"sales in store currency\",\n        fill: false,\n        lineTension: 0,\n        backgroundColor: \"#63b7af\",\n        borderColor: \"#63b7af\",\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: \"rgb(1, 2, 58)\",\n        pointBackgroundColor: \"rgb(1, 2, 58)\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderColor: \"rgb(1, 2, 58)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 4,\n        pointHitRadius: 10,\n        // notice the gap in the data and the spanGaps: false\n        //data: [89.54, 96.8, 246.51],\n        data: price,\n        //data: [store.get('price')],\n        spanGaps: false,\n        barPercentage: 0.3\n        },\n        {\n          yAxisID: 'B',\n          type: \"line\",\n          label: \"product price\",\n          fill: false,\n          lineTension: 0.3,\n          backgroundColor: \"#ee8572\",\n          borderColor: \"#ee8572\",\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: \"#ee8572\",\n          pointBackgroundColor: \"#ee8572\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"#ee8572\",\n          pointHoverBorderColor: \"#ee8572\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 4,\n          pointHitRadius: 10,\n          // notice the gap in the data and the spanGaps: false\n          //data: [0.8072950291, 0.8072950291, 0.8072950291],\n          data: exchange_rate,\n          //data: [store.get('exchange_rate')],\n          spanGaps: false,\n          }\n    \n      ]\n      };\n    \n    var lineChartOptions = {\n      maintainAspectRatio: true,\n      tooltips:{\n        enabled:true,\n      },\n      legend: {\n        display: false,\n      },\n      scales: {\n                yAxes:\n                [{\n                    id: 'A',\n                    type: 'linear',\n                    position: 'left',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                        min: min_bar,\n                        max: max_bar\n                    }\n    \n     \n                  }, {\n                    id: 'B',\n                    type: 'linear',\n                    position: 'right',\n                    gridLines: {\n                        color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                        min: min_line,\n                        max: max_line\n                    }\n    \n    \n                  }],\n                xAxes: [{\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],            \n            },\n        layout: {\n              padding: {\n                  left: 50,\n                  right: 50,\n                  top: 20,\n                  bottom: 20\n              }\n          }   \n    };\n\n    var lineRegressionChartData = {\n        //labels: [\"2020-05-08\", \"2020-05-09\", \"2020-05-10\"],\n        //labels: [0.8,0.9,1.0],\n        labels: regression_fx,\n        datasets: [{\n   \n          type: \"line\",\n          label: \"sales in store currency\",\n          fill: false,\n          lineTension: 0,\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\n          borderWidth: 0,\n          borderColor: \"rgba(0, 0, 0, 0)\",\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: \"#ffa41b\",\n          pointBackgroundColor: \"#ffa41b\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"#ffa41b\",\n          pointHoverBorderColor: \"#ffa41b\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 4,\n          pointHitRadius: 10,\n          // notice the gap in the data and the spanGaps: false\n          //data: [89.54, 96.8, 246.51],\n          //data: [209, 555, 143],\n          data: regression_sales,\n          spanGaps: false,\n          barPercentage: 0.3\n          },\n          {\n            type: \"line\",\n            label: \"fitted model\",\n            fill: false,\n            backgroundColor: \"#D3D3D3\",\n            borderColor: \"#D3D3D3\",\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: \"#D3D3D3\",\n            pointBackgroundColor: \"#fff\",\n            pointBorderWidth: 1,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: \"#D3D3D3\",\n            pointHoverBorderColor: \"#D3D3D3\",\n            pointHoverBorderWidth: 2,\n            pointRadius: 1,\n            pointHitRadius: 10,\n            //data: [100,200,300],\n            data: regression_predicted_sales,\n            spanGaps: false,\n            }\n        ]\n        };\n      \n      var lineRegressionChartOptions = {\n        maintainAspectRatio: true,\n        tooltips:{\n          enabled:true,\n        },\n        legend: {\n          display: false,\n        },\n        scales: {\n                  yAxes:\n                  [{\n                      id: 'A',\n                      type: 'linear',\n                      //position: 'left',\n                      gridLines: {\n                          color: \"rgba(0, 0, 0, 0)\",\n                      },\n                      //ticks: {min: min_bar,\n                      //    max: max_bar}\n      \n       \n                    }],\n                  xAxes: [{\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                  }\n                  },],            \n              },\n          layout: {\n                padding: {\n                    left: 50,\n                    right: 50,\n                    top: 20,\n                    bottom: 20\n                }\n            }   \n      };\n    \n    \n    const barChartData = {\n      //labels: ['China - Monthly CPI', 'US - Monthly CPI', 'China - Quarterly GDP','US - Aaa Corporate Bonds', 'US - S&P 500'],\n      labels: product_array_rank,\n      datasets: [\n        {\n          backgroundColor: ['#63b7af', \"#ff6f5e\", '#ffa41b','#b2ebf2','#35495e'],\n          borderColor: 'rgba(0, 0, 0, 0)',\n          borderWidth: 2,\n          //data: [0.65, 0.50, 0.47, 0.39, 0.37]\n          data: slope_rank\n        }\n      ],\n    };\n    \n    const barChartOptions = {\n    \n      legend: {\n                display: false,\n              },\n    \n      scales: {\n                xAxes: [{\n\n\n\n                  scaleLabel: {\n                    display: true,\n                    labelString: \"Sales change in \"+store_currency+\" with 1 \"+props.tabs[props.select]['id']+\" price change\"\n                  },\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],\n                yAxes: [{\n                  barPercentage: 0.3,\n                  gridLines: {\n                    color: \"rgba(0, 0, 0, 0)\",\n                }\n                },],\n              },\n        layout: {\n                padding: {\n                    left: 20,\n                    right: 80,\n                    top: 20,\n                    bottom: 20\n                }\n            }  \n    };\n    \n    const rangeChartData = {\n        labels: ['past 3 days', 'past 1 week', 'past 1 month', 'past 3 months'],\n        datasets: [\n        {\n        label: 'range',\n        backgroundColor: '#35495e',\n        stack: '3',\n        data: leve_num1,\n        },\n        {\n        backgroundColor: '#63b7af',\n        stack: '3',\n        data: leve_num2,\n        },\n        {\n          label: 'range2',\n          backgroundColor: '#35495e',\n          stack: '3',\n          data: leve_num3,\n          },\n        ],\n      };\n        \n      const rangeChartOptions = {\n        maintainAspectRatio: true,\n        tooltips:{\n          enabled:false,\n        },\n        legend: {\n                  display: false,\n                },\n        scales: {\n                  xAxes: [{\n                    stacked: true,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                    },\n                    ticks: {\n                      min: 0,\n                      max: 100,\n                      callback: function(value) {\n                          return value + \"%\"\n                      }\n                    }\n                  },],\n                  yAxes: [{\n                    stacked: true,\n                    barPercentage: 0.4,\n                    gridLines: {\n                      color: \"rgba(0, 0, 0, 0)\",\n                  }\n                  \n                  },],\n                },\n                layout: {\n                  padding: {\n                      left: 20,\n                      right: 80,\n                      top: 20,\n                      bottom: 20\n                  }\n              }  \n        };\n\n        //console.log(\"height is \", [height2, h1, h2, h3])\n\n        function renderTooltip1(props) {\n          return (\n            <Tooltip id=\"button-tooltip\" {...props}\n            style={{\n              backgroundColor: 'rgb(233,246,251)',\n              padding: '3px 10px',\n              color: 'rgb(1, 2, 58)',\n              fontFamily: 'lato',\n              borderRadius: 3,\n    \n              ...props.style,\n            }}\n            >\n              <p className = \"text_footnote\">\n              The score is price elasticity. It is defined<br/>\n              as the % demand change per 1% price change.<br/>\n              When score &#60; 1, the market has low price <br/>\n              sensitivty; when score &#60;2, the market has <br/>\n              moderate price sensitivty; when the score<br/>\n              > 2, the market has high price sensitivity.\n              </p> \n            </Tooltip>\n          );\n        }\n        function renderTooltip2(props) {\n          return (\n            <Tooltip id=\"button-tooltip\" {...props}\n            style={{\n              backgroundColor: 'rgb(233,246,251)',\n              padding: '3px 10px',\n              color: 'rgb(1, 2, 58)',\n              fontFamily: 'lato',\n              borderRadius: 3,\n    \n              ...props.style,\n            }}\n            >\n              <p className = \"text_footnote\">\n              This is the ranking of products that you<br/>\n              have sold to this country based on how <br/>\n              price sensitive they are. The x axis is<br/>\n              the estimated sales change when you reduce <br/>\n              1 unit price. \n               </p>\n            </Tooltip>\n          );\n        }\n        function renderTooltip3(props) {\n          return (\n            <Tooltip id=\"button-tooltip\" {...props}\n            style={{\n              backgroundColor: 'rgb(233,246,251)',\n              padding: '3px 10px',\n              color: 'rgb(1, 2, 58)',\n              fontFamily: 'lato',\n              borderRadius: 3,\n    \n              ...props.style,\n            }}\n            >\n              <p className = \"text_footnote\">\n              The line is the product price in the local<br/>\n              currency by date; the bar is the sales in<br/>\n              the store currency by date. \n              </p>\n            </Tooltip>\n          );\n        }\n        function renderTooltip4(props) {\n          return (\n            <Tooltip id=\"button-tooltip\" {...props}\n            style={{\n              backgroundColor: 'rgb(233,246,251)',\n              padding: '3px 10px',\n              color: 'rgb(1, 2, 58)',\n              fontFamily: 'lato',\n              borderRadius: 3,\n    \n              ...props.style,\n            }}\n            >\n              <p className = \"text_footnote\">\n              After logging in, you can monitor bank<br/>\n              USD/CNY, markets USD/CNH, major <br/>\n              brokers’ market views, and upcoming <br/>\n              events that will move USD/CNH. <span className=\"highlight\">Avoid <br/>\n              the hassle of self-monitoring exchange <br/>\n              rates.</span><br/>\n              <br/>\n              <a href=\"https://www.nasdaq.com/articles/cnh-vs-cny-differences-between-two-yuan-2018-09-12\">Read more</a> on CNY vs CNH\n               </p>\n            </Tooltip>\n          );\n        }\n        function renderTooltip5(props) {\n          return (\n            <Tooltip id=\"button-tooltip\" {...props}\n            style={{\n              backgroundColor: 'rgb(233,246,251)',\n              padding: '3px 10px',\n              color: 'rgb(1, 2, 58)',\n              fontFamily: 'lato',\n              borderRadius: 3,\n    \n              ...props.style,\n            }}\n            >\n              <p className = \"text_footnote\">\n              After logging in, you can monitor bank<br/>\n              USD/CNY, markets USD/CNH, major <br/>\n              brokers’ market views, and upcoming <br/>\n              events that will move USD/CNH. <span className=\"highlight\">Avoid <br/>\n              the hassle of self-monitoring exchange <br/>\n              rates.</span><br/>\n              <br/>\n              <a href=\"https://www.nasdaq.com/articles/cnh-vs-cny-differences-between-two-yuan-2018-09-12\">Read more</a> on CNY vs CNH\n               </p>\n            </Tooltip>\n          );\n        }\n\n\n        const Example1 = () => (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 100, hide: 400 }}\n            overlay={renderTooltip1}\n          >\n            <FaRegQuestionCircle />\n          </OverlayTrigger>\n        );\n\n        const Example2 = () => (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 100, hide: 400 }}\n            overlay={renderTooltip2}\n          >\n            <FaRegQuestionCircle />\n          </OverlayTrigger>\n        );\n\n        const Example3 = () => (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 100, hide: 400 }}\n            overlay={renderTooltip3}\n          >\n            <FaRegQuestionCircle />\n          </OverlayTrigger>\n        );\n\n        const Example4 = () => (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 100, hide: 400 }}\n            overlay={renderTooltip4}\n          >\n            <FaRegQuestionCircle />\n          </OverlayTrigger>\n        );\n\n        const Example5 = () => (\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 100, hide: 400 }}\n            overlay={renderTooltip5}\n          >\n            <FaRegQuestionCircle />\n          </OverlayTrigger>\n        );\n\n    return (\n            <Layout sectioned={false}>\n  <Layout.Section oneHalf>\n                    <Select\n                            label=\"Analytics on\"\n                            labelInline\n                            options={options}\n                            onChange={handleSelectChange}\n                            value={selected}\n                            />\n                    <Card title=\"Price Sensitivity\" sectioned>\n                    <Example1/> \n                    <Doughnut\n                        height= \"100vh\"\n                        data={doughnutChartData}\n                        options={doughnutChartOptions}\n                    />\n                    </Card>\n\n                    <Card title=\"Most Price Sentitive Products in the Country\" sectioned>\n                    <Example2/> \n                    {product_array_rank[0]!==\"\"? (\n\n                      <HorizontalBar \n                      height=\"100vh\"\n                      data={barChartData}\n                      options={barChartOptions}\n                      />\n\n                    ):(\n                      <p>No enough data. Come back when you have more international orders :) You can do it!</p>\n                    )}\n\n\n                    </Card>\n                    \n                    <Card title=\"Price And Sales By Date\" sectioned>\n                    <Example3/> \n                      \n                    <Bar \n                        height=\"220vh\"\n                        data={lineChartData}\n                        options={lineChartOptions}\n                        />\n                    </Card>\n                </Layout.Section>\n                <Layout.Section oneHalf>\n                    <Card title=\"Sales And Prices Correlation\" sectioned>\n                    <Example4/>  \n                        <Bar \n                            height=\"150vh\"\n                            data={lineRegressionChartData}\n                            options={lineRegressionChartOptions}\n                        />\n        \n                        <Card title=\"Analytics\" sectioned>\n                            <p><b>Price range:</b> {min_price_range} {props.tabs[props.select]['id']} - {max_price_range} {props.tabs[props.select]['id']}</p><br/>\n                            <p><b>Sales range:</b> {min_sales_range} {store_currency} - {max_sales_range} {store_currency} per day</p><br/>\n                            <p><FaRegArrowAltCircleDown/> 1 {props.tabs[props.select]['id']} in price</p><br/>\n                            <p><FaRegArrowAltCircleUp/> {regression_slope} {store_currency} sales/day</p><br/>\n                            <p><b>Current price:</b> {today_product_price} {props.tabs[props.select]['id']}</p><br/>\n                            <p><b>Projected sales:</b> {indicated_sale} {store_currency} per day</p><br/>\n                        </Card>\n                \n                    </Card>\n                    <Card title=\"The current price level\" sectioned>\n                    <Example5/> \n                        <HorizontalBar \n                            height=\"100vh\"\n                            data={rangeChartData}\n                            options={rangeChartOptions}\n                        />\n                    </Card>\n                </Layout.Section>\n\n\n\n              \n            </Layout>\n      \n         \n\n    );\n  }\n\n","import React, { useState }from 'react';\nimport {Card, Layout, DisplayText, TextStyle, DataTable} from '@shopify/polaris';\nimport store from 'store-js';\nimport MapChart from \"./MapChart\";\nimport ReactTooltip from \"react-tooltip\";\nimport price_sensitive_market from \"../functions/price_sensitive_market\";\nconst country_code_to_name = require('../functions/country_code_to_name')\n//import france_flag from '../images/france_flag';\n\n\n\nexport default function Main_data(props) {  \n    const [content, setContent] = useState(\"\");\n    const currency_list = price_sensitive_market(props.tabs, props.maps)\n\n    console.log(\"currency_list is\", currency_list)\n\n    var rows_price_sensitive = [\n      //['Emerald Silk Gown', '$875.00'],\n      //['Mauve Cashmere Scarf', '$230.00'],\n    ];\n\n    var rows_price_range = [\n      //['Emerald Silk Gown', '$875.00'],\n      //['Mauve Cashmere Scarf', '$230.00'],\n    ];\n\n    const countryListMap = props.countryListMap\n    const percChangeMap = props.perc_change_map\n\n    console.log(\"countryListMap is\", countryListMap)\n    console.log(\"percChangeMap is\", percChangeMap)\n\n    // price elasticity\n    for (var i=0; i<currency_list.length; i++){\n      const currency = currency_list[i]\n      const country = countryListMap.get(currency)\n\n      console.log(\"currency is\", currency)\n      console.log(\"country is\", country)\n\n      var country_string =''\n      for (var j=0; j<country.length; j++){\n        if (country_code_to_name(country[j])!= undefined){\n          country_string += country_code_to_name(country[j])+', '\n        }\n      }\n      var country_string = country_string.substring(0, country_string.length-2);\n\n      console.log(\"country_string is\", country_string)\n      rows_price_sensitive.push([currency, country_string])\n      console.log(\"percChangeMap.get(currency_list[i]) is \", percChangeMap.get(currency_list[i]))\n      const perc = Math.round(percChangeMap.get(currency_list[i])*10000)/100 + '%'\n      rows_price_range.push([currency, perc])\n    }\n\n \n\n\n    \n    var rows_price_change = [\n      ['EUR','12%'],\n      ['CAD','15%'],\n      ['GBP','17%']\n    ]\n\n    var rows_price_volatie = [\n      ['EUR','France, Italy, Germany'],\n      ['CAD','Canada']\n      ['GBP','UK']\n    ]\n    \n\n    return (\n    \n          <Layout>\n\n\n              <Layout.Section oneThird>\n            \n              <Card title=\"Price Range Analyzed\" sectioned>\n              <DataTable\n                  columnContentTypes={[\n                    'text',\n                    'text',\n                  ]}\n                  headings={[\n                    'Currency',\n                    'Price Moving % Range',\n                  ]}\n                  rows={rows_price_range}\n                />\n\n                </Card>\n                </Layout.Section>\n                <Layout.Section oneThird>\n              <Card title=\"Your Most Price Sentitive Markets\" sectioned>\n              <DataTable\n                  columnContentTypes={[\n                    'text',\n                    'text',\n                  ]}\n                  headings={[\n                    'Currency',\n                    'Price Sensitive Country',\n                  ]}\n                  rows={rows_price_sensitive}\n                />\n                </Card>\n                </Layout.Section>\n                <Layout.Section oneThird>\n                <Card title=\"Your Most Price Volatile Markets\" sectioned>\n                <DataTable\n                  columnContentTypes={[\n                    'text',\n                    'text',\n                  ]}\n                  headings={[\n                    'Currency',\n                    'Price Volatile Country',\n                  ]}\n                  rows={rows_price_sensitive}\n                />\n                </Card>\n      \n              </Layout.Section>\n              <Layout.Section>\n              <Card title=\"Price Change Magnitue\" sectioned>\n            \n               <MapChart setTooltipContent={setContent} />\n               <ReactTooltip>{content}</ReactTooltip>  \n              </Card>\n             </Layout.Section>\n      \n          </Layout>\n\n\n    );\n\n  }\n\n  function displayBlock(currency) {\n    render(\n      {currency}\n    )\n     \n  }\n","import React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule,\n  ZoomableGroup\n} from \"react-simple-maps\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n  .domain([0.29, 0.68])\n  .range([\"#ffeeeb\", \"#ff5233\"]);\n\nconst MapChart = ({ setTooltipContent }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then(data => {\n      setData(data);\n    });\n  }, []);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 150\n      }}\n      //width={180}\n      //height={180}\n      data-tip=\"\"\n    >\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      {data.length > 0 && (\n        //<ZoomableGroup zoom={1}>\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => {\n              const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  onMouseEnter={() => {\n                    const { NAME, POP_EST } = geo.properties;\n                    setTooltipContent(`${NAME} — ${Math.round((POP_EST/1000000))}%`);\n                  }}\n                  onMouseLeave={() => {\n                    setTooltipContent(\"\");\n                  }}\n                  fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                  style={{\n                    hover: {\n                      fill: \"#abf0e9\",\n                      outline: \"none\"\n                    }\n\n                  }}\n                />\n              );\n            })\n          }\n        </Geographies>\n       // </ZoomableGroup>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n","const getPearsonCorrelation = (x, y) => {\n    var shortestArrayLength = 0;\n     \n    if(x.length == y.length) {\n        shortestArrayLength = x.length;\n    } else if(x.length > y.length) {\n        shortestArrayLength = y.length;\n        console.error('x has more items in it, the last ' + (x.length - shortestArrayLength) + ' item(s) will be ignored');\n    } else {\n        shortestArrayLength = x.length;\n        console.error('y has more items in it, the last ' + (y.length - shortestArrayLength) + ' item(s) will be ignored');\n    }\n  \n    var xy = [];\n    var x2 = [];\n    var y2 = [];\n  \n    for(var i=0; i<shortestArrayLength; i++) {\n        xy.push(x[i] * y[i]);\n        x2.push(x[i] * x[i]);\n        y2.push(y[i] * y[i]);\n    }\n  \n    var sum_x = 0;\n    var sum_y = 0;\n    var sum_xy = 0;\n    var sum_x2 = 0;\n    var sum_y2 = 0;\n  \n    for(var i=0; i< shortestArrayLength; i++) {\n        sum_x += x[i];\n        sum_y += y[i];\n        sum_xy += xy[i];\n        sum_x2 += x2[i];\n        sum_y2 += y2[i];\n    }\n  \n    var step1 = (shortestArrayLength * sum_xy) - (sum_x * sum_y);\n    var step2 = (shortestArrayLength * sum_x2) - (sum_x * sum_x);\n    var step3 = (shortestArrayLength * sum_y2) - (sum_y * sum_y);\n    var step4 = Math.sqrt(step2 * step3);\n    var answer = step1 / step4;\n\n    /*\n    console.log(\"sum_y2 is \", sum_y2)\n    console.log(\"sum_y is \", sum_y)\n    console.log(\"shortestArrayLength is \", shortestArrayLength)\n    console.log(\"step1 is \", step1)\n    console.log(\"step2 is \", step2)\n    console.log(\"step3 is \", step3)\n    console.log(\"step4 is \", step4)\n    console.log(\"answer is \", answer)*/\n    return answer;\n}\n\nmodule.exports = getPearsonCorrelation; \ngetPearsonCorrelation( [275.88,273.03,175.43],[0.8072950291,0.8072950291,0.8072950291])","import store from 'store-js';\n\nconst getPearsonCorrelation = require('./calc_correlation')\n\nconst change_format2 = (allList) => {\n    let myMap = new Map();\n    let countryListMap = new Map();\n    //console.log(\"all list is \", alllist)\n\n    const store_currency = allList[3]\n    //localStorage.setItem('store_currency', store_currency);\n    /*\n    if(window.localStorage) {\n        // localStorage can be used\n        localStorage.setItem('store_currency', store_currency);\n      } else {\n        // can't be used\n        //localStorage.setItem('store_currency', store_currency);\n        console.log(\"error in localstorage\")\n      }*/\n    \n\n    const list = allList[1]\n   // try{\n    console.log(\"list in format is \", list)\n    // i is currency iterator\n    for (var i=0; i<list.length; i++){\n        //console.log(\"i is \", i)\n        const currency = list[i][0]\n        const detail = list[i][3]\n        const current_level = list[i][2]\n        const country_list = list[i][1]\n\n        countryListMap.set(currency, country_list)\n        //console.log(\"currency is \", currency)\n\n        // j is products/all iterator\n        let map2 = new Map();\n        for (var j=0; j<detail.length; j++){\n            //console.log(\"j is \", j)\n            var date_list = []\n            var revenue_list = []\n            var fx_list = []\n\n\n            const product_id = list[i][3][j][0]\n            for (var k=0; k<list[i][3][j][1].length; k++){\n                    \n                date_list.push(list[i][3][j][1][k][0])\n                //date_list.push('*')\n                revenue_list.push(parseFloat(list[i][3][j][1][k][1][0]))\n                //revenue_list.push('*')\n                fx_list.push(parseFloat(list[i][3][j][1][k][1][1]))\n                //fx_list.push('*')\n            }\n            map2.set(product_id, [date_list, revenue_list, fx_list, current_level, country_list])\n        }\n        myMap.set(currency, map2)\n\n    }\n    //console.log(\"myMap is \", myMap)\n\n    const product_id_title = allList[2]\n    let product_id_title_map = new Map();\n    let product_id_price_map = new Map();\n\n    //console.log('product_id_title is ', product_id_title)\n    \n    try{\n        for (var k=0; k<product_id_title.length; k++){\n            product_id_title_map.set(product_id_title[k][0],product_id_title[k][1])\n            product_id_price_map.set(product_id_title[k][0],product_id_title[k][2])\n        }\n    } catch(error){\n        console.log(\"error id title\")\n    }\n\n    // build today fx map\n    let fx_map = new Map();\n    try{\n        fx_list = allList[4]\n        console.log(\"fx_list length is \", fx_list.length)\n        for (var f=0;f<fx_list.length;f++){\n            fx_map.set(fx_list[f][0], fx_list[f][1])\n        }\n\n    } catch(error){\n        console.log(\"fx_list length error\")\n    }\n    \n\n    console.log(\"fx_map is \", fx_map)\n\n\n    // build perc change map\n    let perc_change_map = new Map();\n    try{\n        const per_change_list = allList[5]\n        console.log(\"per_change_list is \", per_change_list)\n        console.log(\"per_change_list length is \", per_change_list.length)\n        for (var g=0;g<per_change_list.length;g++){\n            perc_change_map.set(per_change_list[g][0], per_change_list[g][1])\n        }\n\n    } catch(error){\n        console.log(\"perc_change_map error\")\n    }\n\n\n    console.log(\"perc_change_map is \", perc_change_map)\n\n    return [myMap, product_id_title_map, product_id_price_map, store_currency, fx_map, countryListMap, perc_change_map]\n}\n\nmodule.exports = change_format2; ","\nlet myMap = new Map([ \n  ['AF','Afghanistan'],\n['AL','Albania'],\n['DZ','Algeria'],\n['AS','American Samoa'],\n['AD','Andorra'],\n['AO','Angola'],\n['AI','Anguilla'],\n['AQ','Antarctica'],\n['AG','Antigua and Barbuda'],\n['AR','Argentina'],\n['AM','Armenia'],\n['AW','Aruba'],\n['AU','Australia'],\n['AT','Austria'],\n['AZ','Azerbaijan'],\n['BS','Bahamas (the)'],\n['BH','Bahrain'],\n['BD','Bangladesh'],\n['BB','Barbados'],\n['BY','Belarus'],\n['BE','Belgium'],\n['BZ','Belize'],\n['BJ','Benin'],\n['BM','Bermuda'],\n['BT','Bhutan'],\n['BO','Bolivia'],\n['BQ','Bonaire'],\n['BA','Bosnia and Herzegovina'],\n['BW','Botswana'],\n['BV','Bouvet Island'],\n['BR','Brazil'],\n['IO','British Indian Ocean Territory'],\n['BN','Brunei Darussalam'],\n['BG','Bulgaria'],\n['BF','Burkina Faso'],\n['BI','Burundi'],\n['CV','Cabo Verde'],\n['KH','Cambodia'],\n['CM','Cameroon'],\n['CA','Canada'],\n['KY','Cayman Islands'],\n['CF','Central African Republic'],\n['TD','Chad'],\n['CL','Chile'],\n['CN','China'],\n['CX','Christmas Island'],\n['CC','Cocos (Keeling) Islands'],\n['CO','Colombia'],\n['KM','Comoros'],\n['CD','Congo'],\n['CG','Congo'],\n['CK','Cook Islands'],\n['CR','Costa Rica'],\n['HR','Croatia'],\n['CU','Cuba'],\n['CW','Curaçao'],\n['CY','Cyprus'],\n['CZ','Czechia'],\n['CI','Côte dIvoire'],\n['DK','Denmark'],\n['DJ','Djibouti'],\n['DM','Dominica'],\n['DO','Dominican Republic'],\n['EC','Ecuador'],\n['EG','Egypt'],\n['SV','El Salvador'],\n['GQ','Equatorial Guinea'],\n['ER','Eritrea'],\n['EE','Estonia'],\n['SZ','Eswatini'],\n['ET','Ethiopia'],\n['FK','Falkland Islands'],\n['FO','Faroe Islands'],\n['FJ','Fiji'],\n['FI','Finland'],\n['FR','France'],\n['GF','French Guiana'],\n['PF','French Polynesia'],\n['TF','French Southern Territories'],\n['GA','Gabon'],\n['GM','Gambia (the)'],\n['GE','Georgia'],\n['DE','Germany'],\n['GH','Ghana'],\n['GI','Gibraltar'],\n['GR','Greece'],\n['GL','Greenland'],\n['GD','Grenada'],\n['GP','Guadeloupe'],\n['GU','Guam'],\n['GT','Guatemala'],\n['GG','Guernsey'],\n['GN','Guinea'],\n['GW','Guinea-Bissau'],\n['GY','Guyana'],\n['HT','Haiti'],\n['HM','Heard Island and McDonald Islands'],\n['VA','Holy See (the)'],\n['HN','Honduras'],\n['HK','Hong Kong'],\n['HU','Hungary'],\n['IS','Iceland'],\n['IN','India'],\n['ID','Indonesia'],\n['IR','Iran'],\n['IQ','Iraq'],\n['IE','Ireland'],\n['IM','Isle of Man'],\n['IL','Israel'],\n['IT','Italy'],\n['JM','Jamaica'],\n['JP','Japan'],\n['JE','Jersey'],\n['JO','Jordan'],\n['KZ','Kazakhstan'],\n['KE','Kenya'],\n['KI','Kiribati'],\n['KP',\"Korea\"],\n['KR','Korea'],\n['KW','Kuwait'],\n['KG','Kyrgyzstan'],\n['LA',\"Lao\"],\n['LV','Latvia'],\n['LB','Lebanon'],\n['LS','Lesotho'],\n['LR','Liberia'],\n['LY','Libya'],\n['LI','Liechtenstein'],\n['LT','Lithuania'],\n['LU','Luxembourg'],\n['MO','Macao'],\n['MG','Madagascar'],\n['MW','Malawi'],\n['MY','Malaysia'],\n['MV','Maldives'],\n['ML','Mali'],\n['MT','Malta'],\n['MH','Marshall Islands'],\n['MQ','Martinique'],\n['MR','Mauritania'],\n['MU','Mauritius'],\n['YT','Mayotte'],\n['MX','Mexico'],\n['FM','Micronesia'],\n['MD','Moldova'],\n['MC','Monaco'],\n['MN','Mongolia'],\n['ME','Montenegro'],\n['MS','Montserrat'],\n['MA','Morocco'],\n['MZ','Mozambique'],\n['MM','Myanmar'],\n['NA','Namibia'],\n['NR','Nauru'],\n['NP','Nepal'],\n['NL','Netherlands'],\n['NC','New Caledonia'],\n['NZ','New Zealand'],\n['NI','Nicaragua'],\n['NE','Niger'],\n['NG','Nigeria'],\n['NU','Niue'],\n['NF','Norfolk Island'],\n['MP','Northern Mariana Islands'],\n['NO','Norway'],\n['OM','Oman'],\n['PK','Pakistan'],\n['PW','Palau'],\n['PS','Palestine, State of'],\n['PA','Panama'],\n['PG','Papua New Guinea'],\n['PY','Paraguay'],\n['PE','Peru'],\n['PH','Philippines'],\n['PN','Pitcairn'],\n['PL','Poland'],\n['PT','Portugal'],\n['PR','Puerto Rico'],\n['QA','Qatar'],\n['MK','Republic of North Macedonia'],\n['RO','Romania'],\n['RU','Russian Federation'],\n['RW','Rwanda'],\n['RE','Réunion'],\n['BL','Saint Barthélemy'],\n['SH','Saint Helena'],\n['KN','Saint Kitts and Nevis'],\n['LC','Saint Lucia'],\n['MF','Saint Martin'],\n['PM','Saint Pierre and Miquelon'],\n['VC','Saint Vincent and the Grenadines'],\n['WS','Samoa'],\n['SM','San Marino'],\n['ST','Sao Tome and Principe'],\n['SA','Saudi Arabia'],\n['SN','Senegal'],\n['RS','Serbia'],\n['SC','Seychelles'],\n['SL','Sierra Leone'],\n['SG','Singapore'],\n['SX','Sint Maarten'],\n['SK','Slovakia'],\n['SI','Slovenia'],\n['SB','Solomon Islands'],\n['SO','Somalia'],\n['ZA','South Africa'],\n['GS','South Georgia and the South Sandwich Islands'],\n['SS','South Sudan'],\n['ES','Spain'],\n['LK','Sri Lanka'],\n['SD','Sudan'],\n['SR','Suriname'],\n['SJ','Svalbard and Jan Mayen'],\n['SE','Sweden'],\n['CH','Switzerland'],\n['SY','Syrian Arab Republic'],\n['TW','Taiwan'],\n['TJ','Tajikistan'],\n['TZ','Tanzania, United Republic of'],\n['TH','Thailand'],\n['TL','Timor-Leste'],\n['TG','Togo'],\n['TK','Tokelau'],\n['TO','Tonga'],\n['TT','Trinidad and Tobago'],\n['TN','Tunisia'],\n['TR','Turkey'],\n['TM','Turkmenistan'],\n['TC','Turks and Caicos Islands'],\n['TV','Tuvalu'],\n['UG','Uganda'],\n['UA','Ukraine'],\n['AE','United Arab Emirates'],\n['GB','UK'],\n['UM','United States Minor Outlying Islands'],\n['US','USA'],\n['UY','Uruguay'],\n['UZ','Uzbekistan'],\n['VU','Vanuatu'],\n['VE','Venezuela'],\n['VN','Viet Nam'],\n['VG','Virgin Island'],\n['VI','Virgin Islands'],\n['WF','Wallis and Futuna'],\n['EH','Western Sahara'],\n['YE','Yemen'],\n['ZM','Zambia'],\n['ZW','Zimbabwe'],\n['AX','Åland Islands']\n]);\n\nconst country_code_to_name = (country_code) => {\n    //console.log(myMap.get(country_code))\n    return myMap.get(country_code)\n}\n\n//country_to_currency('US')\nmodule.exports = country_code_to_name; \n","import store from 'store-js';\nimport { KeypressListener } from '@shopify/polaris';\nimport { json } from 'body-parser';\n\nconst getPearsonCorrelation = require('./calc_correlation')\nconst linear_regression = require('./linear_regression')\nconst price_elasticity = require('./price_elasticity')\n\nconst fetch_from_map = (select, tabs, maps, product_id_title_map, dropdown_select, product_id_price_map, fx_map) => {\n\n\n    //try{\n        \n        if (select !== 0){\n            // fetch data for graphs\n            const selected_currency = tabs[select]['id']\n            console.log(\"selected currency is \", selected_currency)\n            console.log(\"dropdown_select is \", dropdown_select)\n\n\n            const selected_data_all_products = maps.get(selected_currency)\n            const selected_data = selected_data_all_products.get(dropdown_select)\n            const product_price = product_id_price_map.get(dropdown_select)\n            const today_fx = fx_map.get(selected_currency)\n            console.log(\"product_price is \", product_price)\n\n            var product_price_list = selected_data[2].map(function(element) {\n                return Math.round(element*product_price*100)/100;\n            });\n\n            console.log(\"selected_data[1] is \", selected_data[1]);\n            console.log(\"product_price_list is \", product_price_list);\n            const [regression_fx, regression_sales, regression_predicted_sales, slope, intercept] = linear_regression(selected_data[1],product_price_list)\n\n            const elasticity = price_elasticity(selected_data[1], product_price_list, Math.abs(slope))\n\n   \n            console.log(\"indicated_sale is \", Math.round((today_fx*product_price*slope+intercept)*100)/100);\n            console.log(\"regression_fx is \", regression_fx);\n            console.log(\"regression_sales is \", regression_sales);\n            console.log(\"regression_predicted_sales is \", regression_predicted_sales);\n            console.log(\"slope is \", slope);\n            console.log(\"intercept is \", intercept)\n            console.log(\"today_product_price is \", today_fx*product_price);\n            console.log(\"selected data is \", selected_data)\n\n            localStorage.setItem('date', selected_data[0]);\n            localStorage.setItem('price', selected_data[1]);\n            localStorage.setItem('exchange_rate', product_price_list);\n            localStorage.setItem('current_level', selected_data[3]);\n            //localStorage.setItem('correlation', getPearsonCorrelation(selected_data[1],selected_data[2]));\n            localStorage.setItem('correlation', elasticity);\n            //localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_fx', regression_fx);\n            localStorage.setItem('regression_sales', regression_sales);\n            localStorage.setItem('regression_predicted_sales', regression_predicted_sales);\n            localStorage.setItem('slope', Math.abs(slope));\n            localStorage.setItem('today_product_price', Math.round(today_fx*product_price*100)/100);\n            localStorage.setItem('indicated_sale', Math.round((today_fx*product_price*slope+intercept)*100)/100);\n\n            console.log(\"done storing\")\n            /*\n            console.log(\"localStorage.getItem('date') is\",localStorage.getItem('date'))\n            console.log(\"localStorage.getItem('price') is\",localStorage.getItem('price'))\n            console.log(\"localStorage.getItem('exchange_rate') is\",localStorage.getItem('exchange_rate'))*/\n\n            // find the product price\n\n\n\n\n\n\n\n            // filter options\n            console.log(\"selected_data_all_products is\",selected_data_all_products)\n            console.log('product_id_title_map is ', product_id_title_map)\n            var num_dates = 0\n            var options = []\n            var product_options = []\n            for (let [key, value] of selected_data_all_products) {\n                num_dates = value[0].length\n                if (num_dates>1){\n                    var price_set = new Set(value[1]);\n                    var fx_set = new Set(value[2]);\n                    if (price_set.size>1 && fx_set.size>1){\n                        console.log('use key to get name ', product_id_title_map.get(key))\n                        options.push(\n                            {\n                                label:product_id_title_map.get(key), value: key\n                            }\n                        )\n                        product_options.push(key)\n                    }\n                }\n                console.log(key + ' = ' + value)\n            }\n\n            // Find the most sensitive product\n            let slope_map = new Map()\n            var slope_list = []\n\n            console.log(\"product_options is \", product_options)\n\n            for (var k=0; k<product_options.length; k++){\n                if (product_options[k] !== 'all'){\n                    const product_price_rank = product_id_price_map.get(product_options[k])\n                    console.log(\"product_price_rank is \", product_price_rank)\n                    \n                    var product_price_list_rank = selected_data_all_products.get(product_options[k])[2].map(function(element) {\n                        return element*product_price_rank;\n                    });\n    \n                    const slope_rank = linear_regression(selected_data_all_products.get(product_options[k])[1],product_price_list_rank)[3]\n                    //slope_rank = product_price_rank/100*slope_rank\n    \n                    console.log(\"slope_rank is \", slope_rank)\n    \n                    if (slope_map.has(slope_rank)){\n                        const value = slope_map.get(slope_rank)\n                        value.push(product_id_title_map.get(product_options[k]))\n                        slope_map.set(slope_rank, value)\n                    } else {\n                        \n                        console.log(\"product_id_title_map is \", product_id_title_map)\n                        console.log(\"product_options[k] is \", product_options[k])\n                        console.log(\"product_id_title_map.get([product_options[k]] is \", product_id_title_map.get(product_options[k]))\n                        \n                        slope_map.set(slope_rank, product_id_title_map.get(product_options[k]))\n                    }\n                    slope_list.push(slope_rank)\n                }\n            }\n\n            console.log(\"slope_map is \", slope_map)\n            slope_list.sort(function(a, b){return b-a});\n            console.log(\"slope_list is \", slope_list)\n\n            const product_set_rank = new Set();\n            for (var f=0;f<slope_list.length;f++){\n                const product_options_list = slope_map.get(slope_list[f])\n                console.log(\"product_options_list is \", product_options_list)\n                product_set_rank.add(product_options_list)\n            }\n\n            console.log(\"product_set_rank is \", product_set_rank)\n\n            let product_array_rank = Array.from(product_set_rank);\n            localStorage.setItem('product_array_rank', product_array_rank);\n            localStorage.setItem('slope_rank', slope_list);\n\n            console.log(\"product_array_rank is \", product_array_rank)\n        }\n\n        \n\n\n\n    //} catch(err){\n     //   console.log(\"no id\")\n    //}\n    \n    return options\n}\n\nmodule.exports = fetch_from_map; \n\n","var jsregression = require('js-regression');\n\nconst linear_regression = (sales, exchange_rate)=>{\n    \n    var [myMap, exchange_rate_round, sales_round] = reformat_data(sales, exchange_rate)\n    //console.log(\"data is \", data)\n    const [m, b] = findLineByLeastSquares(exchange_rate_round, sales_round)\n    /*\n    var regression = new jsregression.LinearRegression(  {alpha: 0.001, // \n        iterations: 300,\n        lambda: 0.0});\n    console.log(\"here\")\n    var model = regression.fit(data);\n    */\n    let myMap2 = new Map();\n    myMap2 = myMap\n\n    // sort exchange rate\n    exchange_rate_round.sort(function(a, b){return a-b});\n    var regression_fx = []\n    var regression_sales = []\n    var regression_predicted_sales = []\n    \n    for (j=0;j<exchange_rate_round.length;j++){\n        regression_fx.push(exchange_rate_round[j])\n        regression_sales.push(myMap2.get(exchange_rate_round[j]))\n        \n        regression_predicted_sales.push(m*exchange_rate_round[j]+b)\n        console.log(\"predicted number is \", m*exchange_rate_round[j]+b)\n    }\n    console.log(\"m is \",m)\n    console.log(\"b is \",b)\n    return [regression_fx, regression_sales, regression_predicted_sales, Math.round(m*100)/100, Math.round(b*100)/100]\n}\n\nfunction reformat_data(sales, exchange_rate){\n    var round_sales\n    const exchange_rate_round = []\n    const sales_round = []\n    let myMap = new Map()\n    for (i=0;i<exchange_rate.length;i++){\n        var round_fx = Math.round(100*exchange_rate[i])/100;\n        if (myMap.has(round_fx)){\n            var sales_list = myMap.get(round_fx)\n            round_sales = Math.round(100*sales[i])/100;\n            sales_list.push(round_sales)\n            myMap.set(round_fx,sales_list)\n        }\n        round_sales = Math.round(100*sales[i])/100;\n        myMap.set(round_fx,[round_sales])\n    }\n    for (let [k, v] of myMap) {\n        let sum = v.reduce((previous, current) => current += previous);\n        let avg = sum / v.length;\n        sales_round.push(avg)\n        exchange_rate_round.push(k)\n    }\n\n    return [myMap, exchange_rate_round, sales_round]\n}\n \nmodule.exports = linear_regression; \n\n\nfunction findLineByLeastSquares(values_x, values_y) {\n    var x_sum = 0;\n    var y_sum = 0;\n    var xy_sum = 0;\n    var xx_sum = 0;\n    var count = 0;\n\n    /*\n     * The above is just for quick access, makes the program faster\n     */\n    var x = 0;\n    var y = 0;\n    var values_length = values_x.length;\n\n    if (values_length != values_y.length) {\n        throw new Error('The parameters values_x and values_y need to have same size!');\n    }\n\n    /*\n     * Above and below cover edge cases\n     */\n    if (values_length === 0) {\n        return [ [], [] ];\n    }\n\n    /*\n     * Calculate the sum for each of the parts necessary.\n     */\n    for (let i = 0; i< values_length; i++) {\n        x = values_x[i];\n        y = values_y[i];\n        x_sum+= x;\n        y_sum+= y;\n        xx_sum += x*x;\n        xy_sum += x*y;\n        count++;\n    }\n\n    /*\n     * Calculate m and b for the line equation:\n     * y = x * m + b\n     */\n    var m = (count*xy_sum - x_sum*y_sum) / (count*xx_sum - x_sum*x_sum);\n    var b = (y_sum/count) - (m*x_sum)/count;\n\n    /*\n     * We then return the x and y data points according to our fit\n     */\n    var result_values_x = [];\n    var result_values_y = [];\n\n    for (let i = 0; i < values_length; i++) {\n        x = values_x[i];\n        y = x * m + b;\n        result_values_x.push(x);\n        result_values_y.push(y);\n    }\n    console.log(result_values_x)\n    console.log(result_values_y)\n    return [m, b];\n}\n\n\nfindLineByLeastSquares([0.921,0.922,0.926],[209.8,555.4,93.56])\n\n\n\n\n\n//linear_regression([20,50,60],[4,9,7])\n\n/*\nvar data = [];\ndata = [[1,2],[2,3],[3,4]]\n \n// === Create the linear regression === //\nvar regression = new jsregression.LinearRegression();\n// can also use default configuration: var regression = new jsregression.LinearRegression(); \n \n// === Train the linear regression === //\nvar model = regression.fit(data);\n \n// === Print the trained model === //\nconsole.log(model);\nconsole.log(regression.transform([3]));\n \n /*\n// === Testing the trained linear regression === //\nvar testingData = [];\nfor(var x = 1.0; x < 100.0; x += 1.0) {\n  var actual_y = 2.0 + 5.0 * x + 2.0 * x * x + Math.random() * 1.0;\n  var predicted_y = regression.transform([x, x * x]);\n  console.log(\"actual: \" + actual_y + \" predicted: \" + predicted_y); \n}*/\n","\n\n\n\nconst price_elasticity = (sales, product_price, slope)=>{\n    const arrAvg = arr => arr.reduce((a,b) => a + b, 0) / arr.length\n    const avgPrice = arrAvg(product_price)\n    const avgSales = arrAvg(sales)\n    console.log(\"avgSales is \", avgSales)\n    console.log(\"avgPrice is \", avgPrice)\n    const perc_price_change = 1/avgPrice\n    const perc_revenue_change = slope/avgSales\n    const elasticity = perc_revenue_change/perc_price_change\n    console.log(\"elasticity is \", elasticity)\n    return elasticity\n}\n\nmodule.exports = price_elasticity; \nprice_elasticity([1,2],[2,3],5)","const linear_regression = require('./linear_regression')\nconst price_elasticity = require('./price_elasticity')\n\nconst price_sensitive_market = (tabs, maps) => {\n    let myMap = new Map();\n    //try{\n    var elasticity_list = []\n    console.log(\"tabs.length is \", tabs)\n    console.log(\"maps is \", maps)\n\n\n    for (var i=1;i<tabs.length;i++){\n        const selected_currency = tabs[i]['id']\n        console.log(\"selected_currency is \", selected_currency)\n\n        const selected_data_all_products = maps.get(selected_currency)\n        const selected_data = selected_data_all_products.get('all')\n        const product_price = 100\n        var product_price_list = selected_data[2].map(function(element) {\n            return Math.round(element*product_price*100)/100;\n        });\n\n        if (selected_data[1].length>1){\n            console.log(\"selected_data[1] is \", selected_data[1])\n            console.log(\"product_price_list is \", product_price_list)\n            const slope = linear_regression(selected_data[1],product_price_list)[3]\n    \n            console.log(\"slope is \", slope)\n    \n            const elasticity = price_elasticity(selected_data[1], product_price_list, Math.abs(slope))\n    \n            console.log(\"elasticity is \", elasticity)\n            \n            if (myMap.has(elasticity)){\n                console.log(\"myMap has elasticity\")\n                var value = myMap.get(elasticity)\n                value.push(selected_currency)\n                myMap.set(elasticity, value)\n            }else{\n                console.log(\"myMap doesn't have elasticity\")\n                console.log(\"[selected_currency] is \", selected_currency)\n                myMap.set(elasticity, [selected_currency])\n            }\n            elasticity_list.push(elasticity)\n        }\n    }\n\n    elasticity_list.sort(function(a, b){return b-a});\n\n    console.log(\"elasticity_list is \", elasticity_list)\n\n    var currency_rank = []\n\n    for (var j=0;j<elasticity_list.length;j++){\n        var elasticity_element = elasticity_list[j]\n        console.log(\"myMap.get(elasticity_element) is \", myMap.get(elasticity_element))\n        if (!currency_rank.includes(myMap.get(elasticity_element)[0])){\n            console.log(\"myMap.get(elasticity_element).length is \", myMap.get(elasticity_element).length)\n            for (var k=0; k<myMap.get(elasticity_element).length;k++){\n                currency_rank.push(myMap.get(elasticity_element)[k])\n            }\n            \n        }\n    }\n\n    console.log(\"currency_rank is \", currency_rank)\n\n    //localStorage.setItem('currency_elasticity_rank', currency_rank);\n    return currency_rank\n //} catch (error){\n   // console.log(\"error in price sensitive market\")\n    //}\n}\n\nmodule.exports = price_sensitive_market; ","const string_to_list = (string, type) =>{\n    //try{\n        /*\n    if (string.includes(\",\")){\n        const res = string.split(\",\");\n        var convert_list = []\n        for (i=0; i<res.length; i++){\n            if (type === 'float'){\n                const num = parseFloat(res[i])\n                convert_list.push(num)\n            } else{\n                const str = res[i].toString()\n                convert_list.push(str)\n            }\n        }\n        console.log(convert_list)\n        return convert_list\n    } else {\n        if (type === 'float'){\n            return [parseFloat(string)]\n        } else {\n            return [string.toString()]\n        }\n        \n    }*/\n    \n/*\n    } catch(error){\n        console.log(\"string is \", string)\n    }\n    */\n    //\n    \n    try{\n    const res = string.split(\",\");\n    var convert_list = []\n    for (i=0; i<res.length; i++){\n        if (type === 'float'){\n            const num = parseFloat(res[i])\n            convert_list.push(num)\n        } else{\n            const str = res[i].toString()\n            convert_list.push(str)\n        }\n    }\n    //console.log(convert_list)\n    return convert_list\n}catch(error){\n    //console.log(\"string is \", string)\n}\n\n}\n\nstring_to_list('209.28','float')\nmodule.exports = string_to_list; ","import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport {Tabs} from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport Country_data from \"../components/Country_data\";\nimport Main_data from \"../components/Main_data\";\n//import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport Loader from 'react-loader-spinner'\n\nconst change_format2 = require('../functions/change_format2')\n\n\n\nclass ResourceListWithProducts extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      list : [[],[],[]],\n      selected: 0,  \n      list2:[[],[]]\n    }\n  }\n  static contextType = Context;\n\n  componentDidMount() {\n    this.getList();\n    //this.getCountryData();\n    console.log(\"here\")\n    //console.log(\"list is \", this.state.list)\n    //change_format2(this.state.list)\n  }\n\n  getList = () => {\n    fetch('http://localhost:5000/api/tabs')\n    .then(res => res.json())\n    .then(list2 => this.setState({ list2 }))\n  }\n\n  \n  getCountryData = () => {\n    fetch('http://localhost:5000/api/country_data')\n    .then(res => res.json())\n    .then(country_data => this.setState({ country_data }))\n    console.log(\"3\")\n  }\n\n  \n  render() {\n    const {list, selected, list2} = this.state;\n\n    //change_format2(list)\n    /*\n    if (list2===null){\n      console.log(\"loading...\")\n    }{\n      console.log(\"list2 is \")\n    }*/\n    const tab =  list2[0]\n\n    //try {\n      \n      console.log(\"list2 is \", list2)\n      console.log(\"selected is \", selected)\n      const [map, product_id_title_map, product_id_price_map, store_currency, fx_map, countryListMap, perc_change_map] = change_format2(list2)\n      console.log('product_id_title_map is ', product_id_title_map)\n      console.log('perc_change_map is ', perc_change_map)\n      /*\n      const currency = tab[select]\n      const [date, revenue, fx] = myMap.get(currency)\n \n\n      console.log(\"date is \", date)\n      console.log(\"price is \", revenue)\n      console.log(\"exchange_rate is \", fx)\n\n\n      store.set('date', date)\n      store.set('price', revenue)\n      store.set('exchange_rate', fx)*/\n    /*}\n    catch(err) {\n      console.log(\"loading...\")\n    }*/\n    //store.set('date',[2,3])\n    //console.log(\"store get in detect transaction is\", localStorage.getItem('date'))\n\n   \n\n\n    \n\n    //console.log(\"lis1 is \", list[0])\n\n    //console.log(\"list is \", list[1])\n    //console.log(\"selected is \", selected)\n\n    var i = 0\n    if (selected > 0){\n      i = selected - 1\n    }\n\n\n    /*\n    const date = list[1][i][0]\n    const price = list[1][i][1]\n    const exchange_rate = list[1][i][2]\n    store.set('date', date)\n    store.set('price', price)\n    store.set('exchange_rate', exchange_rate)\n\n    const level = list[2]\n    store.set('level', level)\n    //console.log('level is ', level)\n*/\n   // var tab = list[0]\n  \n  \n    \n  console.log(\"tab is \", tab)\n  \n\n  \n    return (\n      <div className=\"main_background_image\">\n      {/* Check to see if any items are found*/}\n      {list2[0][0] === undefined ? (\n        \n        <div>\n          <h2>Working Hard And Analyzing...</h2>\n        <Loader\n        type=\"Oval\"\n        color=\"#63b7af\"\n        height={80}\n        width={80}\n        timeout={20000} //3 secs\n\n          />\n          </div>\n      ) : (\n  \n        <div className=\"main_background_image\">\n        <Tabs tabs={tab} selected={selected} onSelect={(selected) => this.setState({selected})} fitted={true} >\n          {selected===0? (\n            \n            <Main_data tabs={tab} maps={map} countryListMap={countryListMap} perc_change_map={perc_change_map}/>\n        ):(\n  \n            <Country_data select={selected} tabs={tab} maps={map} product_id_title_map={product_id_title_map} product_id_price_map={product_id_price_map} store_currency={store_currency} fx_map={fx_map}/>\n        )}\n  \n        </Tabs>\n        </div>\n     \n      )\n    }\n    </div>\n    \n    );\n  }\n\n\n}\n\n export default ResourceListWithProducts;","module.exports = require(\"@shopify/app-bridge-react\");","module.exports = require(\"@shopify/app-bridge/actions\");","module.exports = require(\"@shopify/polaris\");","module.exports = require(\"body-parser\");","module.exports = require(\"d3-fetch\");","module.exports = require(\"d3-scale\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"js-regression\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"react-bootstrap\");","module.exports = require(\"react-chartjs-2\");","module.exports = require(\"react-icons/fa\");","module.exports = require(\"react-loader-spinner\");","module.exports = require(\"react-simple-maps\");","module.exports = require(\"react-tooltip\");","module.exports = require(\"store-js\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAIA;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;;;;;;;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAJA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAtBA;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAhCA;AA+DA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AAcA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAPA;AAcA;AACA;AACA;AADA;AADA;AA7BA;AAmCA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AA3CA;AAqDA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAjCA;AA2DA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AATA;AAYA;AACA;AACA;AADA;AADA;AAdA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AA5BA;AAuCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AALA;AAJA;AAcA;AAEA;AACA;AADA;AAIA;AACA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AARA;AAYA;AACA;AACA;AACA;AADA;AAFA;AAbA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AA1BA;AAoCA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAdA;AAuBA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AALA;AAaA;AACA;AACA;AACA;AACA;AADA;AAHA;AAdA;AAuBA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AA/BA;AACA;AA0CA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAWA;AAAA;AAUA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAWA;AAAA;AASA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAWA;AAAA;AAOA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAWA;AAAA;AAIA;AAAA;AAIA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAWA;AAAA;AAIA;AAAA;AAIA;AAAA;AAIA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAQA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAKA;AACA;AACA;AAHA;AAaA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAOA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAUA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;AC9xBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAFA;AAKA;AAEA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAMA;AAOA;AAKA;AAAA;AAEA;AAAA;AAAA;AAEA;AAIA;AAIA;AATA;AAcA;AAAA;AACA;AAAA;AAAA;AAEA;AAIA;AAIA;AATA;AAaA;AAAA;AACA;AAAA;AAAA;AAEA;AAIA;AAIA;AATA;AAeA;AAAA;AAAA;AAEA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAGA;;;;;;;;;;;;;;;;;;;;;;AClJA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AANA;AAOA;AAPA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAXA;AAoBA;AAtCA;AA6CA;AACA;AACA;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACxDA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;ACjHA;AACA;AA2PA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACnQA;AACA;AAAA;AACA;AAAA;AACA;;;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;AAKA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AADA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;ACrKA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;AAOA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClBA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1EA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;AAKA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAFA;AAmBA;AAEA;AAAA;AACA;AACA;AAvBA;AA0BA;AAEA;AAAA;AACA;AACA;AACA;AA7BA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAgBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAaA;;;;AAIA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;AAYA;AACA;AACA;AAEA;AAIA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAnJA;AACA;AADA;AACA;AAsJA;;;;;;;;;;;;;;;;;;;;;;;ACtKA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}